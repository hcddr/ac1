 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 1 - 2/19/2023 19:38:37


       1/       0 :                     ;  * * AC1 * * GRAFIK/SOUND-BASIC V.3.2 * (C)1978 Microsoft & * *
       2/       0 :                     ;  * * (C)1988 E.Ludwig * * 
       3/       0 :                     
       4/       0 :                     ; File Name   :	P.Grafik Basic 3.2_4000_5FFF_0000.bin
       5/       0 :                     ; reassembled: V.Pohlers, 11/2018, 02/2023
       6/       0 :                     ; last change: 
       7/       0 :                     ; based on nascom basic (microsoft basic 4.7)
       8/       0 :                     
       9/       0 :                     ; NASCOM ROM BASIC Ver 4.7, (C) 1978 Microsoft
      10/       0 :                     ; Scanned from source published in 80-BUS NEWS from Vol 2, Issue 3
      11/       0 :                     ; (May-June 1983) to Vol 3, Issue 3 (May-June 1984)
      12/       0 :                     ; adapted to arnold assembler vpohlers
      13/       0 :                     
      14/       0 :                     ; gepatchte Version für Modul1
      15/       0 :                     
      16/       0 :                     		cpu	z80undoc
      17/       0 :                     
      18/       0 :                     
      19/       0 : =0H                 basver	equ	0		; 0 - orig, 1 - gepatchte Version von Modul1
      20/       0 :                     
      21/       0 :                     
      22/       0 :                     ; GENERAL EQUATES
      23/       0 :                     
      24/       0 : =3H                 CTRLC   EQU    03H             ; Control "C"
      25/       0 : =7H                 CTRLG   EQU    07H             ; Control "G"
      26/       0 : =8H                 BKSP    EQU    08H             ; Back space
      27/       0 : =0AH                LF      EQU    0AH             ; Line feed
      28/       0 : =0CH                CS      EQU    0CH             ; Clear screen
      29/       0 : =0DH                CR      EQU    0DH             ; Carriage return
      30/       0 : =0FH                CTRLO   EQU    0FH             ; Control "O"
      31/       0 : =11H                CTRLQ	EQU	11H             ; Control "Q"
      32/       0 : =12H                CTRLR   EQU    12H             ; Control "R"
      33/       0 : =13H                CTRLS   EQU    13H             ; Control "S"
      34/       0 : =15H                CTRLU   EQU    15H             ; Control "U"
      35/       0 : =1BH                ESC     EQU    1BH             ; Escape
      36/       0 :                     ;DEL     EQU    7FH             ; Delete
      37/       0 :                     
      38/       0 :                     ; BASIC WORK SPACE LOCATIONS
      39/       0 :                     
      40/       0 : =6000H              WRKSPC  EQU    6000H           ; <<<< BASIC Work space ** Rx buffer & Tx buffer located from 2100H **
      41/       0 : =6003H              USR     EQU    WRKSPC+3H       ; "USR (x)" jump
      42/       0 : =6006H              OTPORT  EQU    WRKSPC+6H       ; Port (p)
      43/       0 : =6009H              byte_6009	equ	6009h	; genutzt f. MODE 1+2
      44/       0 : =600AH              TRFLAG	EQU    WRKSPC+0AH
      45/       0 : =600BH              DIVSUP  EQU    WRKSPC+0BH       ; Division support routine
      46/       0 : =600CH              DIV1    EQU    WRKSPC+0CH      ; <- Values
      47/       0 : =6010H              DIV2    EQU    WRKSPC+10H      ; <-   to
      48/       0 : =6014H              DIV3    EQU    WRKSPC+14H      ; <-   be
      49/       0 : =6017H              DIV4    EQU    WRKSPC+17H      ; <-inserted
      50/       0 : =6019H              SEED    EQU    WRKSPC+19H      ; Random number seed
      51/       0 : =603CH              LSTRND  EQU    WRKSPC+3CH      ; Last random number
      52/       0 : =6040H              NULLS   EQU    WRKSPC+40H      ; Number of nulls
      53/       0 : =6041H              LWIDTH  EQU    WRKSPC+41H      ; Terminal width
      54/       0 : =6042H              COMMAN  EQU    WRKSPC+42H      ; Width for commas
      55/       0 : =6043H              CTLOFG  EQU    WRKSPC+43H      ; Control "O" flag
      56/       0 : =6044H              LINESC  EQU    WRKSPC+44H      ; Lines counter
      57/       0 : =6046H              LINESN  EQU    WRKSPC+46H      ; Lines number
      58/       0 : =604AH              RINPUT  EQU    WRKSPC+4AH      ; Input reflection
      59/       0 : =604DH              unk_604D	equ WRKSPC+4DH
      60/       0 : =604EH              unk_604E	equ WRKSPC+4EH
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 2 - 2/19/2023 19:38:37


      61/       0 : =6050H              unk_6050	equ WRKSPC+50H
      62/       0 : =6052H              unk_6052	equ WRKSPC+52H
      63/       0 : =6054H              unk_6054	equ WRKSPC+54H
      64/       0 : =6056H              STRSPC  EQU    WRKSPC+56H      ; Bottom of string space
      65/       0 : =6058H              LINEAT  EQU    WRKSPC+58H      ; Current line number
      66/       0 : =605AH              BASTXT  EQU    WRKSPC+5AH      ; Pointer to start of program
      67/       0 : =605DH              BUFFER  EQU    WRKSPC+5DH      ; Input buffer
      68/       0 : =6062H              STACK   EQU    WRKSPC+62H      ; Initial stack
      69/       0 : =60A6H              unk_60A6	equ WRKSPC+0A6H
      70/       0 : =60A7H              CURPOS  EQU    WRKSPC+0A7H     ; <<<< Character position on line ** Top of TEMPSTACK **
      71/       0 : =60A8H              LCRFLG  EQU    WRKSPC+0A8H     ; Locate/Create flag
      72/       0 : =60A9H              TYPE    EQU    WRKSPC+0A9H     ; Data type flag
      73/       0 : =60AAH              DATFLG  EQU    WRKSPC+0AAH     ; Literal statement flag
      74/       0 : =60ABH              LSTRAM  EQU    WRKSPC+0ABH     ; Last available RAM
      75/       0 : =60ADH              TMSTPT  EQU    WRKSPC+0ADH     ; Temporary string pointer
      76/       0 : =60AFH              TMSTPL  EQU    WRKSPC+0AFH     ; Temporary string pool
      77/       0 : =60BBH              TMPSTR  EQU    WRKSPC+0BBH     ; Temporary string
      78/       0 : =60BFH              STRBOT  EQU    WRKSPC+0BFH     ; Bottom of string space
      79/       0 : =60C1H              CUROPR  EQU    WRKSPC+0C1H     ; Current operator in EVAL
      80/       0 : =60C3H              LOOPST  EQU    WRKSPC+0C3H     ; First statement of loop
      81/       0 : =60C5H              DATLIN  EQU    WRKSPC+0C5H     ; Line of current DATA item
      82/       0 : =60C7H              FORFLG  EQU    WRKSPC+0C7H     ; "FOR" loop flag
      83/       0 : =60C8H              LSTBIN  EQU    WRKSPC+0C8H     ; Last byte entered
      84/       0 : =60C9H              READFG  EQU    WRKSPC+0C9H     ; Read/Input flag
      85/       0 : =60CAH              BRKLIN  EQU    WRKSPC+0CAH     ; Line of break
      86/       0 : =60CCH              NXTOPR  EQU    WRKSPC+0CCH     ; Next operator in EVAL
      87/       0 : =60CEH              ERRLIN  EQU    WRKSPC+0CEH     ; Line of error
      88/       0 : =60D0H              CONTAD  EQU    WRKSPC+0D0H     ; Where to CONTinue
      89/       0 : =60D2H              PROGND  EQU    WRKSPC+0D2H     ; End of program
      90/       0 : =60D4H              VAREND  EQU    WRKSPC+0D4H     ; End of variables
      91/       0 : =60D6H              ARREND  EQU    WRKSPC+0D6H     ; End of arrays
      92/       0 : =60D8H              NXTDAT  EQU    WRKSPC+0D8H     ; Next data item
      93/       0 : =60DAH              FNRGNM  EQU    WRKSPC+0DAH     ; Name of FN argument
      94/       0 : =60DCH              FNARG   EQU    WRKSPC+0DCH     ; FN argument value
      95/       0 : =60DEH              unk_60DE	equ WRKSPC+0DEH
      96/       0 : =60E0H              FPREG   EQU    WRKSPC+0E0H     ; Floating point register
      97/       0 : =60E3H              FPEXP   EQU    FPREG+3         ; Floating point exponent
      98/       0 : =60E4H              SGNRES  EQU    WRKSPC+0E4H     ; Sign of result
      99/       0 : =60E5H              PBUFF   EQU    WRKSPC+0E5H     ; Number print buffer
     100/       0 : =60F2H              MULVAL  EQU    WRKSPC+0F2H     ; Multiplier
     101/       0 : =60F6H              PROGST  EQU    WRKSPC+0F6H     ; Start of program text area
     102/       0 : =615BH              STLOOK  EQU    WRKSPC+15BH     ; Start of memory test
     103/       0 :                     
     104/       0 :                     ; BASIC ERROR CODE VALUES
     105/       0 :                     
     106/       0 : =0H                 NF      EQU    00H             ; NEXT without FOR
     107/       0 : =2H                 SN      EQU    02H             ; Syntax error
     108/       0 : =4H                 RG      EQU    04H             ; RETURN without GOSUB
     109/       0 : =6H                 OD      EQU    06H             ; Out of DATA
     110/       0 : =8H                 FC      EQU    08H             ; Function call error
     111/       0 : =0AH                OV      EQU    0AH             ; Overflow
     112/       0 : =0CH                OM      EQU    0CH             ; Out of memory
     113/       0 : =0EH                UL      EQU    0EH             ; Undefined line number
     114/       0 : =10H                BS      EQU    10H             ; Bad subscript
     115/       0 : =12H                DD      EQU    12H             ; Re-DIMensioned array
     116/       0 : =14H                DZ      EQU    14H             ; Division by zero (/0)
     117/       0 : =16H                ID      EQU    16H             ; Illegal direct
     118/       0 : =18H                TM      EQU    18H             ; Type miss-match
     119/       0 : =1AH                OS      EQU    1AH             ; Out of string space
     120/       0 : =1CH                LS      EQU    1CH             ; String too long
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 3 - 2/19/2023 19:38:37


     121/       0 : =1EH                ST      EQU    1EH             ; String formula too complex
     122/       0 : =20H                CN      EQU    20H             ; Can't CONTinue
     123/       0 : =22H                UF      EQU    22H             ; UnDEFined FN function
     124/       0 : =19H                MO      EQU    19H             ; Missing operand
     125/       0 :                     
     126/    4000 :                     		org 4000h
     127/    4000 :                     
     128/    4000 :                     
     129/    4000 : 21 00 40            COLD:		ld	hl, loc_5CFD	; NMI-Routine
     130/    4003 : 22 03 40            		ld	(unk_1818), hl	; nmi-sprungadr
     131/    4006 : 21 06 40            		ld	hl, unk_5FE0	; Funktionstasten
     132/    4009 : 11 09 40            		ld	de, unk_1F80	; vorbelegen
     133/    400C : 01 20 00            		ld	bc, 20h
     134/    400F : ED B0               		ldir
     135/    4011 : EB                  		ex	de, hl
     136/    4012 : 21 12 40            		ld	hl, INITAB
     137/    4015 : 0E 5F               		ld	c, 5Fh ; b ist noch 0
     138/    4017 : ED B0               		ldir
     139/    4019 : EB                  		ex	de, hl
     140/    401A : F9                  		ld	sp, hl
     141/    401B : CD 1B 40            		call	CLREG
     142/    401E : 32 A6 60            		ld	(unk_60A6), a	; ?
     143/    4021 : 32 F6 60            		ld	(PROGST), a	; Start	of program text	area
     144/    4024 : 21 24 40            		ld	hl, MEMMSG	; Point to message
     145/    4027 : CD 27 40            		call	PRS		; Output
     146/    402A : 11 BE FF            		ld	de, 0FFBEh
     147/    402D : 21 FF 5F            msiz1:		ld	hl, 5FFFh	; default memory end
     148/    4030 : 23                  MLOOP:		inc	hl
     149/    4031 : CD 31 40            		call	CPDEHL
     150/    4034 : 28 FE               		Jr      Z,SETTOP        ; Yes - 64K RAM
     151/    4036 : 7E                  		LD      A,(HL)          ; Get contents
     152/    4037 : 47                  		LD      B,A             ; Save it
     153/    4038 : 2F                  		CPL                     ; Flip all bits
     154/    4039 : 77                  		LD      (HL),A          ; Put it back
     155/    403A : BE                  		CP      (HL)            ; RAM there if same
     156/    403B : 70                  		LD      (HL),B          ; Restore old contents
     157/    403C : 28 F2               		Jr      Z,MLOOP         ; If RAM - test next byte
     158/    403E : 2B                  		DEC     HL              ; Back one byte
     159/    403F :                     
     160/    403F : 11 CE FF            SETTOP:		LD      DE,0-50         ; 50 Bytes string space
     161/    4042 : 22 AB 60            		LD      (LSTRAM),HL     ; Save last available RAM
     162/    4045 : 19                  		ADD     HL,DE           ; Allocate string space
     163/    4046 : 22 56 60            		LD      (STRSPC),HL     ; Save string space
     164/    4049 : CD 49 40            		CALL    CLRPTR          ; Clear program area
     165/    404C : 2A 56 60            		LD      HL,(STRSPC)     ; Get end of memory
     166/    404F : 11 F9 9E            		LD      DE,-PROGST-17         ; Offset for free bytes
     167/    4052 : 19                  		ADD     HL,DE           ; Adjust HL
     168/    4053 : CD 53 40            		CALL    PRNTHL          ; Output amount of free memory
     169/    4056 : 21 56 40            		LD      HL,BFREE        ; " Bytes free" message
     170/    4059 : CD 59 40            		CALL    PRS             ; Output string
     171/    405C :                     
     172/    405C : 31 62 60            WARMST: 	LD      SP,STACK        ; Temporary stack
     173/    405F : CD 5F 40            BRKRET: 	CALL    CLREG           ; Clear registers and stack
     174/    4062 : C3 62 40            		JP      PRNTOK          ; Go to get command line
     175/    4065 :                     
     176/    4065 : =>TRUE              		if basver = 0
     177/    4065 : 0C 0D 20 2A 20 2A   MEMMSG:		db 0Ch,0Dh," * * AC1 * * GRAFIK/SOUND-BASIC V.3.2 * (C)1978 Micr"
                    20 41 43 31 20 2A 
                    20 2A 20 47 52 41 
                    46 49 4B 2F 53 4F 
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 4 - 2/19/2023 19:38:37


                    55 4E 44 2D 42 41 
                    53 49 43 20 56 2E 
                    33 2E 32 20 2A 20 
                    28 43 29 31 39 37 
                    38 20 4D 69 63 72 
     178/    409B : 6F 73 6F 66 74 20   		db "osoft & * *",0Dh,0Fh," * * (C)1988 E.Ludwig * * ",0
                    26 20 2A 20 2A 0D 
                    0F 20 2A 20 2A 20 
                    28 43 29 31 39 38 
                    38 20 45 2E 4C 75 
                    64 77 69 67 20 2A 
                    20 2A 20 00       
     179/    40C3 : =>FALSE             		else
     180/    40C3 :                     MEMMSG:		db 0Ch,0Dh," ** AC1 * GRAFIK/SOUND-ROM-BASIC V.3.2 * (C)1978 Mic"
     181/    40C3 :                     		db "rosoft & **",0Dh,0Fh," * * (C)1988 E.Ludwig * * ",0
     182/    40C3 : [176]               		endif
     183/    40C3 :                     
     184/    40C3 : 20 42 79 74 65 73   BFREE:		db " Bytes free *",0Dh,0
                    20 66 72 65 65 20 
                    2A 0D 00          
     185/    40D2 :                     
     186/    40D2 :                     ; INITIALISATION TABLE -------------------------------------------------------
     187/    40D2 :                     
     188/    40D2 : C3 5C 40            INITAB: JP      WARMST          ; Warm start jump
     189/    40D5 : C3 D5 40            	JP      FCERR           ; "USR (X)" jump (Set to Error)
     190/    40D8 : 00                  		db    0
     191/    40D9 : 00                  		db    0
     192/    40DA : 00                  		db    0
     193/    40DB : 02                  		db    2
     194/    40DC : 00                  		db    0
     195/    40DD : D6 00               	SUB     0               ; Division support routine
     196/    40DF : 6F                  	LD      L,A
     197/    40E0 : 7C                  	LD      A,H
     198/    40E1 : DE 00               	SBC     A,0
     199/    40E3 : 67                  	LD      H,A
     200/    40E4 : 78                  	LD      A,B
     201/    40E5 : DE 00               	SBC     A,0
     202/    40E7 : 47                  	LD      B,A
     203/    40E8 : 3E 00               	LD      A,0
     204/    40EA : C9                  	RET
     205/    40EB : 00 00 00            	DB   0,0,0                   ; Random number seed table used by RND
     206/    40EE : 35 4A CA 99         	DB   035H,04AH,0CAH,099H     ;-2.65145E+07
     207/    40F2 : 39 1C 76 98         	DB   039H,01CH,076H,098H     ; 1.61291E+07
     208/    40F6 : 22 95 B3 98         	DB   022H,095H,0B3H,098H     ;-1.17691E+07
     209/    40FA : 0A DD 47 98         	DB   00AH,0DDH,047H,098H     ; 1.30983E+07
     210/    40FE : 53 D1 99 99         	DB   053H,0D1H,099H,099H     ;-2-01612E+07
     211/    4102 : 0A 1A 9F 98         	DB   00AH,01AH,09FH,098H     ;-1.04269E+07
     212/    4106 : 65 BC CD 98         	DB   065H,0BCH,0CDH,098H     ;-1.34831E+07
     213/    410A : D6 77 3E 98         	DB   0D6H,077H,03EH,098H     ; 1.24825E+07
     214/    410E : 52 C7 4F 80         	DB   052H,0C7H,04FH,080H     ; Last random number
     215/    4112 :                     ;--
     216/    4112 : 01                  	DB   1               ; POS (x) number (1)
     217/    4113 : FF                  	DB   0FFh            ; Terminal width (255 = no auto CRLF)
     218/    4114 : 2A                  	DB   42              ; Width for commas (3 columns)
     219/    4115 : 00                  	db    0
     220/    4116 : 14 00               	DW   20              ; Initial lines counter
     221/    4118 : 14 00               	DW   20              ; Initial lines number
     222/    411A : 00                  	db    0
     223/    411B : 00                  	db    0
     224/    411C : C3 1C 41            	JP    unk_4577          ; Input reflection (set to TTY)
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 5 - 2/19/2023 19:38:37


     225/    411F : 00                  	db    0
     226/    4120 : 00                  	db    0
     227/    4121 : 00                  	db    0
     228/    4122 : 00                  	db    0
     229/    4123 : 00                  	db    0
     230/    4124 : 00                  	db    0
     231/    4125 : 00                  	db    0
     232/    4126 : 00                  	db    0
     233/    4127 : 00                  	db    0
     234/    4128 : 5B 61               	DW   STLOOK          ; Temp string space
     235/    412A : FE FF               	DW   -2              ; Current line number (cold)
     236/    412C : F7 60               	DW   PROGST+1        ; Start of program text
     237/    412E :                     INITBE:
     238/    412E :                     
     239/    412E :                     ; END OF INITIALISATION TABLE ---------------------------------------------------
     240/    412E :                     
     241/    412E :                     ; RESERVED WORD LIST
     242/    412E :                     
     243/    412E : C5 4E 44            WORDS:  DB   'E'+80H,"ND"
     244/    4131 : C6 4F 52            	DB   'F'+80H,"OR"
     245/    4134 : CE 45 58 54         	DB   'N'+80H,"EXT"
     246/    4138 : C4 41 54 41         	DB   'D'+80H,"ATA"
     247/    413C : C9 4E 50 55 54      	DB   'I'+80H,"NPUT"
     248/    4141 : C4 49 4D            	DB   'D'+80H,"IM"
     249/    4144 : D2 45 41 44         	DB   'R'+80H,"EAD"
     250/    4148 : CC 45 54            	DB   'L'+80H,"ET"
     251/    414B : C7 4F 54 4F         	DB   'G'+80H,"OTO"
     252/    414F : D2 55 4E            	DB   'R'+80H,"UN"
     253/    4152 : C9 46               	DB   'I'+80H,"F"
     254/    4154 : D2 45 53 54 4F 52   	DB   'R'+80H,"ESTORE"
                    45                
     255/    415B : C7 4F 53 55 42      	DB   'G'+80H,"OSUB"
     256/    4160 : D2 45 54 55 52 4E   	DB   'R'+80H,"ETURN"
     257/    4166 : D2 45 4D            	DB   'R'+80H,"EM"
     258/    4169 : D3 54 4F 50         	DB   'S'+80H,"TOP"
     259/    416D : CF 55 54            	DB   'O'+80H,"UT"
     260/    4170 : CF 4E               	DB   'O'+80H,"N"
     261/    4172 : CE 55 4C 4C         	DB   'N'+80H,"ULL"
     262/    4176 : D7 41 49 54         	DB   'W'+80H,"AIT"
     263/    417A : C4 45 46            	DB   'D'+80H,"EF"
     264/    417D : D0 4F 4B 45         	DB   'P'+80H,"OKE"
     265/    4181 : C4 4F 4B 45         	DB   'D'+80H,"OKE"
     266/    4185 : C1 55 54 4F         	db   'A'+80H,"UTO"
     267/    4189 : CC 49 4E 45 53      	DB   'L'+80H,"INES"
     268/    418E : C3 4C 53            	DB   'C'+80H,"LS"
     269/    4191 : D7 49 44 54 48      	DB   'W'+80H,"IDTH"
     270/    4196 : C2 59 45            	db   'B'+80H,"YE"
     271/    4199 : CB 45 59            	db   'K'+80H,"EY"
     272/    419C : C3 41 4C 4C         	db   'C'+80H,"ALL"
     273/    41A0 : D0 52 49 4E 54      	DB   'P'+80H,"RINT"
     274/    41A5 : C3 4F 4E 54         	DB   'C'+80H,"ONT"
     275/    41A9 : CC 49 53 54         	DB   'L'+80H,"IST"
     276/    41AD : C3 4C 45 41 52      	DB   'C'+80H,"LEAR"
     277/    41B2 : C3 4C 4F 41 44      	DB   'C'+80H,"LOAD"
     278/    41B7 : C3 53 41 56 45      	DB   'C'+80H,"SAVE"
     279/    41BC : CE 45 57            	DB   'N'+80H,"EW"
     280/    41BF :                     
     281/    41BF : D4 41 42 28         	DB   'T'+80H,"AB("
     282/    41C3 : D4 4F               	DB   'T'+80H,"O"
     283/    41C5 : C6 4E               	DB   'F'+80H,"N"
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 6 - 2/19/2023 19:38:37


     284/    41C7 : D3 50 43 28         	DB   'S'+80H,"PC("
     285/    41CB : D4 48 45 4E         	DB   'T'+80H,"HEN"
     286/    41CF : CE 4F 54            	DB   'N'+80H,"OT"
     287/    41D2 : D3 54 45 50         	DB   'S'+80H,"TEP"
     288/    41D6 :                     
     289/    41D6 : AB                  	DB   '+'+80H
     290/    41D7 : AD                  	DB   '-'+80H
     291/    41D8 : AA                  	DB   '*'+80H
     292/    41D9 : AF                  	DB   '/'+80H
     293/    41DA : DE                  	DB   '^'+80H
     294/    41DB : C1 4E 44            	DB   'A'+80H,"ND"
     295/    41DE : CF 52               	DB   'O'+80H,"R"
     296/    41E0 : BE                  	DB   '>'+80H
     297/    41E1 : BD                  	DB   '='+80H
     298/    41E2 : BC                  	DB   '<'+80H
     299/    41E3 :                     
     300/    41E3 : D3 47 4E            	DB   'S'+80H,"GN"
     301/    41E6 : C9 4E 54            	DB   'I'+80H,"NT"
     302/    41E9 : C1 42 53            	DB   'A'+80H,"BS"
     303/    41EC : D5 53 52            	DB   'U'+80H,"SR"
     304/    41EF : C6 52 45            	DB   'F'+80H,"RE"
     305/    41F2 : C9 4E 50            	DB   'I'+80H,"NP"
     306/    41F5 : D0 4F 53            	DB   'P'+80H,"OS"
     307/    41F8 : D3 51 52            	DB   'S'+80H,"QR"
     308/    41FB : D2 4E 44            	DB   'R'+80H,"ND"
     309/    41FE : CC 4E               	db   'L'+80H,'N'
     310/    4200 : C5 58 50            	DB   'E'+80H,"XP"
     311/    4203 : C3 4F 53            	DB   'C'+80H,"OS"
     312/    4206 : D3 49 4E            	DB   'S'+80H,"IN"
     313/    4209 : D4 41 4E            	DB   'T'+80H,"AN"
     314/    420C : C1 54 4E            	DB   'A'+80H,"TN"
     315/    420F : D0 45 45 4B         	DB   'P'+80H,"EEK"
     316/    4213 : C4 45 45 4B         	DB   'D'+80H,"EEK"
     317/    4217 : D0 4F 49 4E 54      	DB   'P'+80H,"OINT"
     318/    421C : CC 45 4E            	DB   'L'+80H,"EN"
     319/    421F : D3 54 52 24         	DB   'S'+80H,"TR$"
     320/    4223 : D6 41 4C            	DB   'V'+80H,"AL"
     321/    4226 : C1 53 43            	DB   'A'+80H,"SC"
     322/    4229 : C3 48 52 24         	DB   'C'+80H,"HR$"
     323/    422D :                     
     324/    422D : CC 45 46 54 24      	DB   'L'+80H,"EFT$"
     325/    4232 : D2 49 47 48 54 24   	DB   'R'+80H,"IGHT$"
     326/    4238 : CD 49 44 24         	DB   'M'+80H,"ID$"
     327/    423C :                     
     328/    423C : D3 45 54            	db   'S'+80H,"ET"
     329/    423F : D2 45 53 45 54      	db   'R'+80H,"ESET"
     330/    4244 : D2 45 4E 55 4D 42   	db   'R'+80H,"ENUMBER"
                    45 52             
     331/    424C : CC 4F 43 41 54 45   	db   'L'+80H,"OCATE"
     332/    4252 : D3 4F 55 4E 44      	db   'S'+80H,"OUND"
     333/    4257 : C9 4E 4B 45 59      	db   'I'+80H,"NKEY"
     334/    425C : CD 4F 44 45         	db   'M'+80H,"ODE"
     335/    4260 : D4 52 4F 4E         	db   'T'+80H,"RON"
     336/    4264 : D4 52 4F 46 46      	db   'T'+80H,"ROFF"
     337/    4269 :                     	
     338/    4269 : 80                  	DB   80H             ; End of list marker
     339/    426A :                     
     340/    426A : 00 00 80            	db	0,0,80h	; frei
     341/    426D :                     
     342/    426D :                     ; KEYWORD ADDRESS TABLE
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 7 - 2/19/2023 19:38:37


     343/    426D :                     
     344/    426D : 6D 42               WORDTB:	dw PEND
     345/    426F : 6F 42               	dw FOR
     346/    4271 : 71 42               	dw NEXT
     347/    4273 : 73 42               	dw DATA
     348/    4275 : 75 42               	dw INPUT
     349/    4277 : 77 42               	dw DIM
     350/    4279 : 79 42               	dw READ
     351/    427B : 7B 42               	dw LET
     352/    427D : 7D 42               	dw GOTO
     353/    427F : 7F 42               	dw RUN
     354/    4281 : 81 42               	dw IF
     355/    4283 : 83 42               	dw RESTOR
     356/    4285 : 85 42               	dw GOSUB
     357/    4287 : 87 42               	dw RETURN
     358/    4289 : 89 42               	dw REM
     359/    428B : 8B 42               	dw STOP
     360/    428D : 8D 42               	dw POUT
     361/    428F : 8F 42               	dw ON
     362/    4291 : 91 42               	dw NULL
     363/    4293 : 93 42               	dw WAIT
     364/    4295 : 95 42               	dw DEF
     365/    4297 : 97 42               	dw POKE
     366/    4299 : 99 42               	dw DOKE
     367/    429B : 9B 42               	dw AUTO
     368/    429D : 9D 42               	dw LINES
     369/    429F : 9F 42               	dw CLS
     370/    42A1 : A1 42               	dw WIDTH
     371/    42A3 : =>TRUE              	if basver=0 
     372/    42A3 : A3 42               	dw unk_71	; BYE
     373/    42A5 : =>FALSE             	else
     374/    42A5 :                     	dw 006Eh
     375/    42A5 : [371]               	endif
     376/    42A5 : A5 42               	dw KEY
     377/    42A7 : A7 42               	dw PCALL
     378/    42A9 : A9 42               	dw PRINT
     379/    42AB : AB 42               	dw CONT
     380/    42AD : AD 42               	dw LIST
     381/    42AF : AF 42               	dw CLEAR
     382/    42B1 : B1 42               	dw CLOAD
     383/    42B3 : B3 42               	dw CSAVE
     384/    42B5 : B5 42               	dw NEW
     385/    42B7 :                     ;---
     386/    42B7 : B7 42               	dw PSET
     387/    42B9 : B9 42               	dw PRESET
     388/    42BB : BB 42               	dw RENUM
     389/    42BD : BD 42               	dw LOCATE
     390/    42BF : BF 42               	dw SOUND
     391/    42C1 : C1 42               	dw INKEY
     392/    42C3 : C3 42               	dw MODE
     393/    42C5 : C5 42               	dw TRON
     394/    42C7 : C7 42               	dw TROFF
     395/    42C9 :                     
     396/    42C9 : C9 42               FNCTAB:	dw SGN
     397/    42CB : CB 42               	dw INT
     398/    42CD : CD 42               	dw ABS
     399/    42CF : 03 60               	dw USR
     400/    42D1 : D1 42               	dw FRE
     401/    42D3 : D3 42               	dw INP
     402/    42D5 : D5 42               	dw POS
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 8 - 2/19/2023 19:38:37


     403/    42D7 : D7 42               	dw SQR
     404/    42D9 : D9 42               	dw RND
     405/    42DB : DB 42               	dw LOG
     406/    42DD : DD 42               	dw EXP
     407/    42DF : DF 42               	dw COS
     408/    42E1 : E1 42               	dw SIN
     409/    42E3 : E3 42               	dw TAN
     410/    42E5 : E5 42               	dw ATN
     411/    42E7 : E7 42               	dw PEEK
     412/    42E9 : E9 42               	dw DEEK
     413/    42EB : EB 42               	dw POINT0
     414/    42ED : ED 42               	dw LEN
     415/    42EF : EF 42               	dw STR
     416/    42F1 : F1 42               	dw VAL
     417/    42F3 : F3 42               	dw ASC
     418/    42F5 : F5 42               	dw CHR
     419/    42F7 : F7 42               	dw LEFT
     420/    42F9 : F9 42               	dw RIGHT
     421/    42FB : FB 42               	dw MID
     422/    42FD :                     
     423/    42FD :                     ; RESERVED WORD TOKEN VALUES
     424/    42FD :                     
     425/    42FD : =80H                ZEND    EQU    080H            ; END
     426/    42FD : =81H                ZFOR    EQU    081H            ; FOR
     427/    42FD : =83H                ZDATA   EQU    083H            ; DATA
     428/    42FD : =88H                ZGOTO   EQU    088H            ; GOTO
     429/    42FD : =8CH                ZGOSUB  EQU    08CH            ; GOSUB
     430/    42FD : =8EH                ZREM    EQU    08EH            ; REM
     431/    42FD : =9EH                ZPRINT  EQU    09EH            ; PRINT
     432/    42FD : =0A4H               ZNEW    EQU    0A4H            ; NEW
     433/    42FD :                     
     434/    42FD : =0A5H               ZTAB    EQU    0A5H            ; TAB
     435/    42FD : =0A6H               ZTO     EQU    0A6H            ; TO
     436/    42FD : =0A7H               ZFN     EQU    0A7H            ; FN
     437/    42FD : =0A8H               ZSPC    EQU    0A8H            ; SPC
     438/    42FD : =0A9H               ZTHEN   EQU    0A9H            ; THEN
     439/    42FD : =0AAH               ZNOT    EQU    0AAH            ; NOT
     440/    42FD : =0ABH               ZSTEP   EQU    0ABH            ; STEP
     441/    42FD :                     
     442/    42FD : =0ACH               ZPLUS   EQU    0ACH            ; +
     443/    42FD : =0ADH               ZMINUS  EQU    0ADH            ; -
     444/    42FD : =0AEH               ZTIMES  EQU    0AEH            ; *
     445/    42FD : =0AFH               ZDIV    EQU    0AFH            ; /
     446/    42FD : =0B2H               ZOR     EQU    0B2H            ; OR
     447/    42FD : =0B3H               ZGTR    EQU    0B3H            ; >
     448/    42FD : =0B4H               ZEQUAL  EQU    0B4H            ; M
     449/    42FD : =0B5H               ZLTH    EQU    0B5H            ; <
     450/    42FD : =0B6H               ZSGN    EQU    0B6H            ; SGN
     451/    42FD : =0C7H               ZPOINT  EQU    0C7H            ; POINT
     452/    42FD : =0CFH               ZLEFT   EQU    0CDH +2         ; LEFT$
     453/    42FD :                     
     454/    42FD :                     ; ARITHMETIC PRECEDENCE TABLE
     455/    42FD :                     
     456/    42FD : 79                  PRITAB: DB   79H             ; Precedence value
     457/    42FE : FE 42               	DW   PADD            ; FPREG = <last> + FPREG
     458/    4300 :                     
     459/    4300 : 79                  	DB   79H             ; Precedence value
     460/    4301 : 01 43               	DW   PSUB            ; FPREG = <last> - FPREG
     461/    4303 :                     
     462/    4303 : 7C                  	DB   7CH             ; Precedence value
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 9 - 2/19/2023 19:38:37


     463/    4304 : 04 43               	DW   MULT            ; PPREG = <last> * FPREG
     464/    4306 :                     
     465/    4306 : 7C                  	DB   7CH             ; Precedence value
     466/    4307 : 07 43               	DW   DIV             ; FPREG = <last> / FPREG
     467/    4309 :                     
     468/    4309 : 7F                  	DB   7FH             ; Precedence value
     469/    430A : 0A 43               	DW   POWER           ; FPREG = <last> ^ FPREG
     470/    430C :                     
     471/    430C : 50                  	DB   50H             ; Precedence value
     472/    430D : 0D 43               	DW   PAND            ; FPREG = <last> AND FPREG
     473/    430F :                     
     474/    430F : 46                  	DB   46H             ; Precedence value
     475/    4310 : 10 43               	DW   POR             ; FPREG = <last> OR FPREG
     476/    4312 :                     
     477/    4312 :                     ; BASIC ERROR CODE LIST
     478/    4312 :                     
     479/    4312 : 4E 46               ERRORS: DB   "NF"            ; NEXT without FOR
     480/    4314 : 53 4E               	DB   "SN"            ; Syntax error
     481/    4316 : 52 47               	DB   "RG"            ; RETURN without GOSUB
     482/    4318 : 4F 44               	DB   "OD"            ; Out of DATA
     483/    431A : 46 43               	DB   "FC"            ; Illegal function call
     484/    431C : 4F 56               	DB   "OV"            ; Overflow error
     485/    431E : 4F 4D               	DB   "OM"            ; Out of memory
     486/    4320 : 55 4C               	DB   "UL"            ; Undefined line
     487/    4322 : 42 53               	DB   "BS"            ; Bad subscript
     488/    4324 : 44 44               	DB   "DD"            ; Re-DIMensioned array
     489/    4326 : 2F 30               	DB   "/0"            ; Division by zero
     490/    4328 : 49 44               	DB   "ID"            ; Illegal direct
     491/    432A : 54 4D               	DB   "TM"            ; Type mis-match
     492/    432C : 4F 53               	DB   "OS"            ; Out of string space
     493/    432E : 4C 53               	DB   "LS"            ; String too long
     494/    4330 : 53 54               	DB   "ST"            ; String formula too complex
     495/    4332 : 43 4E               	DB   "CN"            ; Can't CONTinue
     496/    4334 : 55 46               	DB   "UF"            ; Undefined FN function
     497/    4336 : 4C 44               	DB   "LD"            ; Load Fehler infolge RAM-Fehler
     498/    4338 :                     
     499/    4338 : 20 45 72 72 6F 72   ERRMSG: DB   " Error",0
                    00                
     500/    433F : 20 69 6E 20 00      INMSG:  DB   " in ",0
     501/    4344 : =4343H              ZERBYT  EQU    $-1             ; A zero byte
     502/    4344 : 6F 6B 0D 06 00      OKMSG:  DB   "ok",CR,6,0
     503/    4349 : 42 72 65 61 6B 00   BRKMSG: DB   "Break",0
     504/    434F :                     
     505/    434F : E5                  CHKSTK: PUSH    HL              ; Save code string address
     506/    4350 : 2A D6 60            	LD      HL,(ARREND)     ; Lowest free memory
     507/    4353 : 06 00               	LD      B,0             ; BC = Number of levels to test
     508/    4355 : 09                  	ADD     HL,BC           ; 2 Bytes for each level
     509/    4356 : 09                  	ADD     HL,BC
     510/    4357 : 3E                  	DB   3EH             ; Skip "PUSH HL"
     511/    4358 :                     
     512/    4358 : E5                  ENFMEM: PUSH    HL              ; Save code string address
     513/    4359 : 3E D0               	LD      A,0D0H ;LOW -48 ; 48 Bytes minimum RAM
     514/    435B : 95                  	SUB     L
     515/    435C : 6F                  	LD      L,A
     516/    435D : 3E FF               	LD      A,0FFH; HIGH (-48) ; 48 Bytes minimum RAM
     517/    435F : 9C                  	SBC     A,H
     518/    4360 : 38 FE               	Jr      C,OMERR         ; Not enough - ?OM Error
     519/    4362 : 67                  	LD      H,A
     520/    4363 : 39                  	ADD     HL,SP           ; Test if stack is overflowed
     521/    4364 : E1                  	POP     HL              ; Restore code string address
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 10 - 2/19/2023 19:38:37


     522/    4365 : D8                  	RET     C               ; Return if enough mmory
     523/    4366 : 1E 0C               OMERR:  LD      E,OM            ; ?OM Error
     524/    4368 : 18 FE               	Jr      ERROR
     525/    436A :                     
     526/    436A : 2A C5 60            DATSNR: LD      HL,(DATLIN)     ; Get line of current DATA item
     527/    436D : 22 58 60            	LD      (LINEAT),HL     ; Save as current line
     528/    4370 : 1E 02               SNERR:  LD      E,SN            ; ?SN Error
     529/    4372 : 01                  	DB   01H             ; Skip "LD E,DZ"
     530/    4373 : 1E 14               DZERR:  LD      E,DZ            ; ?/0 Error
     531/    4375 : 01                  	DB   01H             ; Skip "LD E,NF"
     532/    4376 : 1E 00               NFERR:  LD      E,NF            ; ?NF Error
     533/    4378 : 01                  	DB   01H             ; Skip "LD E,DD"
     534/    4379 : 1E 12               DDERR:  LD      E,DD            ; ?DD Error
     535/    437B : 01                  	DB   01H             ; Skip "LD E,UF"
     536/    437C : 1E 22               UFERR:  LD      E,UF            ; ?UF Error
     537/    437E : 01                  	DB   01H             ; Skip "LD E,OV
     538/    437F : 1E 0A               OVERR:  LD      E,OV            ; ?OV Error
     539/    4381 : 01                  	DB   01H             ; Skip "LD E,TM"
     540/    4382 : 1E 18               TMERR:  LD      E,TM            ; ?TM Error
     541/    4384 :                     
     542/    4384 : CD 84 43            ERROR:  CALL    CLREG           ; Clear registers and stack
     543/    4387 : 32 43 60            	LD      (CTLOFG),A      ; Enable output (A is 0)
     544/    438A : CD 8A 43            	CALL    STTLIN          ; Start new line
     545/    438D : 21 12 43            	LD      HL,ERRORS       ; Point to error codes
     546/    4390 : 57                  	LD      D,A             ; D = 0 (A is 0)
     547/    4391 : 3E 3F               	LD      A,'?'
     548/    4393 : CD 93 43            	CALL    OUTC            ; Output '?'
     549/    4396 : 19                  	ADD     HL,DE           ; Offset to correct error code
     550/    4397 : 7E                  	LD      A,(HL)          ; First character
     551/    4398 : CD 98 43            	CALL    OUTC            ; Output it
     552/    439B : CD 9B 43            	CALL    GETCHR          ; Get next character
     553/    439E : CD 9E 43            	CALL    OUTC            ; Output it
     554/    43A1 : 21 38 43            	LD      HL,ERRMSG       ; "Error" message
     555/    43A4 : CD A4 43            ERRIN:  CALL    PRS             ; Output message
     556/    43A7 : 2A 58 60            	LD      HL,(LINEAT)     ; Get line of error
     557/    43AA : 11 FE FF            	LD      DE,-2           ; Cold start error if -2
     558/    43AD : CD AD 43            	CALL    CPDEHL          ; See if cold start error
     559/    43B0 : CA 00 40            	JP      Z,COLD          ; Cold start error - Restart
     560/    43B3 : 7C                  	LD      A,H             ; Was it a direct error?
     561/    43B4 : A5                  	AND     L               ; Line = -1 if direct error
     562/    43B5 : 3C                  	INC     A
     563/    43B6 : C4 B6 43            	CALL    NZ,LINEIN       ; No - output line of error
     564/    43B9 : 3E                  	DB   3EH             ; Skip "POP BC"
     565/    43BA : C1                  POPNOK: POP     BC              ; Drop address in input buffer
     566/    43BB :                     
     567/    43BB : AF                  PRNTOK: XOR     A               ; Output "Ok" and get command
     568/    43BC : 32 43 60            	LD      (CTLOFG),A      ; Enable output
     569/    43BF : CD BF 43            	CALL    STTLIN          ; Start new line
     570/    43C2 : 21 44 43            	LD      HL,OKMSG        ; "Ok" message
     571/    43C5 : CD C5 43            	CALL    PRS             ; Output "Ok"
     572/    43C8 : 37                  	scf
     573/    43C9 : 21 FF FF            GETCMD: LD      HL,-1           ; Flag direct mode
     574/    43CC : 22 58 60            	LD      (LINEAT),HL     ; Save as current line
     575/    43CF :                     ;---
     576/    43CF : 3A 4D 60            	ld	a, (unk_604D)
     577/    43D2 : B7                  	or	a
     578/    43D3 : 28 FE               	jr	z, getcmd4
     579/    43D5 : 2A 4E 60            	ld	hl, (unk_604E)
     580/    43D8 : E5                  	push	hl
     581/    43D9 : CD D9 43            	call	PRNTHL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 11 - 2/19/2023 19:38:37


     582/    43DC : D1                  	pop	de
     583/    43DD : D5                  	push	de
     584/    43DE : CD DE 43            	call	SRCHLN
     585/    43E1 : 3E 2A               	ld	a, '*'
     586/    43E3 : 38 FE               	jr	c, getcmd1
     587/    43E5 : 3E 20               	ld	a, ' '
     588/    43E7 :                     getcmd1:
     589/    43E7 : CD E7 43            	call	OUTC
     590/    43EA : CD EA 43            	call	TTYLIN
     591/    43ED : D1                  	pop	de
     592/    43EE : 30 FE               	jr	nc, getcmd3
     593/    43F0 :                     getcmd2:
     594/    43F0 : AF                  	xor	a
     595/    43F1 : 32 4D 60            	ld	(unk_604D), a
     596/    43F4 : 18 C5               	jr	PRNTOK
     597/    43F6 :                     getcmd3:
     598/    43F6 : 2A 50 60            	ld	hl, (unk_6050)
     599/    43F9 : 19                  	add	hl, de
     600/    43FA : 38 F4               	jr	c, getcmd2
     601/    43FC : D5                  	push	de
     602/    43FD : 11 F9 FF            	ld	de, 0FFF9h
     603/    4400 : CD 00 44            	call	CPDEHL
     604/    4403 : D1                  	pop	de
     605/    4404 : 30 EA               	jr	nc, getcmd2
     606/    4406 : 22 4E 60            	ld	(unk_604E), hl
     607/    4409 : 21 5D 60            	ld	hl, BUFFER
     608/    440C : F5                  	push	af
     609/    440D : 18 FE               	jr	getcmd5
     610/    440F :                     getcmd4:
     611/    440F : 3E 06               	ld	a, 6
     612/    4411 : CD 11 44            	call	OUTC
     613/    4414 : CD 14 44            	call	TTYLIN
     614/    4417 :                     ;---
     615/    4417 : 38 B0               	Jr      C,GETCMD        ; Get line again if break
     616/    4419 : CD 19 44            	CALL    GETCHR          ; Get first character
     617/    441C : 3C                  	INC     A               ; Test if end of line
     618/    441D : 3D                  	DEC     A               ; Without affecting Carry
     619/    441E : 28 A9               	Jr      Z,GETCMD        ; Nothing entered - Get another
     620/    4420 : F5                  	PUSH    AF              ; Save Carry status
     621/    4421 : CD 21 44            	CALL    ATOH            ; Get line number into DE
     622/    4424 :                     getcmd5:
     623/    4424 : D5                  	PUSH    DE              ; Save line number
     624/    4425 : CD 25 44            	CALL    CRUNCH          ; Tokenise rest of line
     625/    4428 : 47                  	LD      B,A             ; Length of tokenised line
     626/    4429 : D1                  	POP     DE              ; Restore line number
     627/    442A : F1                  	POP     AF              ; Restore Carry
     628/    442B : D2 2B 44            	JP      NC,EXCUTE       ; No line number - Direct mode
     629/    442E : D5                  	PUSH    DE              ; Save line number
     630/    442F : C5                  	PUSH    BC              ; Save length of tokenised line
     631/    4430 : AF                  	XOR     A
     632/    4431 : 32 C8 60            	LD      (LSTBIN),A      ; Clear last byte input
     633/    4434 : CD 34 44            	CALL    GETCHR          ; Get next character
     634/    4437 : B7                  	OR      A               ; Set flags
     635/    4438 : F5                  	PUSH    AF              ; And save them
     636/    4439 : CD 39 44            	CALL    SRCHLN          ; Search for line number in DE
     637/    443C : 38 FE               	Jr      C,LINFND        ; Jump if line found
     638/    443E : F1                  	POP     AF              ; Get status
     639/    443F : F5                  	PUSH    AF              ; And re-save
     640/    4440 : CA 40 44            	JP      Z,ULERR         ; Nothing after number - Error
     641/    4443 : B7                  	OR      A               ; Clear Carry
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 12 - 2/19/2023 19:38:37


     642/    4444 : C5                  LINFND: PUSH    BC              ; Save address of line in prog
     643/    4445 : 30 FE               	Jr      NC,INEWLN       ; Line not found - Insert new
     644/    4447 : EB                  	EX      DE,HL           ; Next line address in DE
     645/    4448 : 2A D2 60            	LD      HL,(PROGND)     ; End of program
     646/    444B : 1A                  SFTPRG: LD      A,(DE)          ; Shift rest of program down
     647/    444C : 02                  	LD      (BC),A
     648/    444D : 03                  	INC     BC              ; Next destination
     649/    444E : 13                  	INC     DE              ; Next source
     650/    444F : CD 4F 44            	CALL    CPDEHL          ; All done?
     651/    4452 : 20 F7               	Jr      NZ,SFTPRG       ; More to do
     652/    4454 : 60                  	LD      H,B             ; HL - New end of program
     653/    4455 : 69                  	LD      L,C
     654/    4456 : 22 D2 60            	LD      (PROGND),HL     ; Update end of program
     655/    4459 :                     
     656/    4459 : D1                  INEWLN: POP     DE              ; Get address of line,
     657/    445A : F1                  	POP     AF              ; Get status
     658/    445B : 28 FE               	Jr      Z,SETPTR        ; No text - Set up pointers
     659/    445D : 2A D2 60            	LD      HL,(PROGND)     ; Get end of program
     660/    4460 : E3                  	EX      (SP),HL         ; Get length of input line
     661/    4461 : C1                  	POP     BC              ; End of program to BC
     662/    4462 : 09                  	ADD     HL,BC           ; Find new end
     663/    4463 : E5                  	PUSH    HL              ; Save new end
     664/    4464 : CD 64 44            	CALL    MOVUP           ; Make space for line
     665/    4467 : E1                  	POP     HL              ; Restore new end
     666/    4468 : 22 D2 60            	LD      (PROGND),HL     ; Update end of program pointer
     667/    446B : EB                  	EX      DE,HL           ; Get line to move up in HL
     668/    446C : 36 FF               	LD      (HL), 0ffh          ; Save MSB
     669/    446E : D1                  	POP     DE              ; Get new line number
     670/    446F : 23                  	INC     HL              ; Skip pointer
     671/    4470 : 23                  	INC     HL
     672/    4471 : 73                  	LD      (HL),E          ; Save LSB of line number
     673/    4472 : 23                  	INC     HL
     674/    4473 : 72                  	LD      (HL),D          ; Save MSB of line number
     675/    4474 : 23                  	INC     HL              ; To first byte in line
     676/    4475 : 11 5D 60            	LD      DE,BUFFER       ; Copy buffer to program
     677/    4478 : 1A                  MOVBUF: LD      A,(DE)          ; Get source
     678/    4479 : 77                  	LD      (HL),A          ; Save destinations
     679/    447A : 23                  	INC     HL              ; Next source
     680/    447B : 13                  	INC     DE              ; Next destination
     681/    447C : B7                  	OR      A               ; Done?
     682/    447D : 20 F9               	Jr      NZ,MOVBUF       ; No - Repeat
     683/    447F : CD 7F 44            SETPTR: CALL    RUNFST          ; Set line pointers
     684/    4482 : 23                  	INC     HL              ; To LSB of pointer
     685/    4483 : EB                  	EX      DE,HL           ; Address to DE
     686/    4484 : 21 C9 43            	ld	hl, GETCMD
     687/    4487 : E5                  	push	hl
     688/    4488 : 62                  PTRLP:  LD      H,D             ; Address to HL
     689/    4489 : 6B                  	LD      L,E
     690/    448A : 7E                  	LD      A,(HL)          ; Get LSB of pointer
     691/    448B : 23                  	INC     HL              ; To MSB of pointer
     692/    448C : B6                  	OR      (HL)            ; Compare with MSB pointer
     693/    448D : C8                  	ret	z       ; Get command line if end
     694/    448E : 23                  	INC     HL              ; To LSB of line number
     695/    448F : 7E                  	ld	a, (hl)
     696/    4490 : 23                  	INC     HL              ; Skip line number
     697/    4491 : A6                  	and	(hl)
     698/    4492 : 3C                  	inc	a
     699/    4493 : C8                  	ret	z       ; Get command line if end
     700/    4494 : 23                  	INC     HL              ; Point to first byte in line
     701/    4495 : AF                  	XOR     A               ; Looking for 00 byte
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 13 - 2/19/2023 19:38:37


     702/    4496 : BE                  FNDEND: CP      (HL)            ; Found end of line?
     703/    4497 : 23                  	INC     HL              ; Move to next byte
     704/    4498 : 20 FC               	Jr      NZ,FNDEND       ; No - Keep looking
     705/    449A : EB                  	EX      DE,HL           ; Next line address to HL
     706/    449B : 73                  	LD      (HL),E          ; Save LSB of pointer
     707/    449C : 23                  	INC     HL
     708/    449D : 72                  	LD      (HL),D          ; Save MSB of pointer
     709/    449E : 18 E8               	Jr      PTRLP           ; Do next line
     710/    44A0 :                     
     711/    44A0 : CD 58 43            MOVUP:  CALL    ENFMEM          ; See if enough memory
     712/    44A3 : C5                  MOVSTR: PUSH    BC              ; Save end of source
     713/    44A4 : E3                  	EX      (SP),HL         ; Swap source and dest" end
     714/    44A5 : C1                  	POP     BC              ; Get end of destination
     715/    44A6 : CD A6 44            MOVLP:  CALL    CPDEHL          ; See if list moved
     716/    44A9 : 7E                  	LD      A,(HL)          ; Get byte
     717/    44AA : 02                  	LD      (BC),A          ; Move it
     718/    44AB : C8                  	RET     Z               ; Exit if all done
     719/    44AC : 0B                  	DEC     BC              ; Next byte to move to
     720/    44AD : 2B                  	DEC     HL              ; Next byte to move
     721/    44AE : 18 F6               	Jr      MOVLP           ; Loop until all bytes moved
     722/    44B0 :                     
     723/    44B0 : 2A 5A 60            SRCHLN: LD      HL,(BASTXT)     ; Start of program text
     724/    44B3 : 44                  SRCHLP: LD      B,H             ; BC = Address to look at
     725/    44B4 : 4D                  	LD      C,L
     726/    44B5 : 7E                  	LD      A,(HL)          ; Get address of next line
     727/    44B6 : 23                  	INC     HL
     728/    44B7 : B6                  	OR      (HL)            ; End of program found?
     729/    44B8 : 2B                  	DEC     HL
     730/    44B9 : C8                  	RET     Z               ; Yes - Line not found
     731/    44BA : 23                  	INC     HL
     732/    44BB : 23                  	INC     HL
     733/    44BC : 7E                  	LD      A,(HL)          ; Get LSB of line number
     734/    44BD : 23                  	INC     HL
     735/    44BE : 66                  	LD      H,(HL)          ; Get MSB of line number
     736/    44BF : 6F                  	LD      L,A
     737/    44C0 : CD C0 44            	CALL    CPDEHL          ; Compare with line in DE
     738/    44C3 : 60                  	LD      H,B             ; HL = Start of this line
     739/    44C4 : 69                  	LD      L,C
     740/    44C5 : 7E                  	LD      A,(HL)          ; Get LSB of next line address
     741/    44C6 : 23                  	INC     HL
     742/    44C7 : 66                  	LD      H,(HL)          ; Get MSB of next line address
     743/    44C8 : 6F                  	LD      L,A             ; Next line to HL
     744/    44C9 : 3F                  	CCF
     745/    44CA : C8                  	RET     Z               ; Lines found - Exit
     746/    44CB : 3F                  	CCF
     747/    44CC : D0                  	RET     NC              ; Line not found,at line after
     748/    44CD : 18 E4               	Jr      SRCHLP          ; Keep looking
     749/    44CF :                     
     750/    44CF : AF                  CRUNCH: XOR     A               ; Tokenise line @ HL to BUFFER
     751/    44D0 : 32 AA 60            	LD      (DATFLG),A      ; Reset literal flag
     752/    44D3 : 0E 05               	LD      C,2+3           ; 2 byte number and 3 nulls
     753/    44D5 : 11 5D 60            	LD      DE,BUFFER       ; Start of input buffer
     754/    44D8 : 7E                  CRNCLP: LD      A,(HL)          ; Get byte
     755/    44D9 : FE 20               	CP      ' '             ; Is it a space?
     756/    44DB : 28 FE               	Jr      Z,MOVDIR        ; Yes - Copy direct
     757/    44DD : 47                  	LD      B,A             ; Save character
     758/    44DE : FE 22               	CP      '"'             ; Is it a quote?
     759/    44E0 : CA E0 44            	JP      Z,CPYLIT        ; Yes - Copy literal string
     760/    44E3 : B7                  	OR      A               ; Is it end of buffer?
     761/    44E4 : CA E4 44            	JP      Z,ENDBUF        ; Yes - End buffer
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 14 - 2/19/2023 19:38:37


     762/    44E7 : 3A AA 60            	LD      A,(DATFLG)      ; Get data type
     763/    44EA : B7                  	OR      A               ; Literal?
     764/    44EB : 7E                  	LD      A,(HL)          ; Get byte to copy
     765/    44EC : 20 FE               	Jr      NZ,MOVDIR       ; Literal - Copy direct
     766/    44EE : FE 3F               	CP      '?'             ; Is it '?' short for PRINT
     767/    44F0 : 3E 9E               	LD      A,ZPRINT        ; "PRINT" token
     768/    44F2 : 28 FE               	Jr      Z,MOVDIR        ; Yes - replace it
     769/    44F4 : 7E                  	LD      A,(HL)          ; Get byte again
     770/    44F5 : FE 30               	CP      '0'             ; Is it less than '0'
     771/    44F7 : 38 FE               	Jr      C,FNDWRD        ; Yes - Look for reserved words
     772/    44F9 : FE 3C               	CP      60; ";"+1           ; Is it "0123456789:;" ?
     773/    44FB : 38 FE               	Jr      C,MOVDIR        ; Yes - copy it direct
     774/    44FD : D5                  FNDWRD: PUSH    DE              ; Look for reserved words
     775/    44FE : 11 2D 41            	LD      DE,WORDS-1      ; Point to table
     776/    4501 : C5                  	PUSH    BC              ; Save count
     777/    4502 : 01 02 45            	LD      BC,RETNAD       ; Where to return to
     778/    4505 : C5                  	PUSH    BC              ; Save return address
     779/    4506 : 06 7F               	LD      B,ZEND-1        ; First token value -1
     780/    4508 : 7E                  	LD      A,(HL)          ; Get byte
     781/    4509 : FE 61               	CP      'a'             ; Less than 'a' ?
     782/    450B : 38 FE               	Jr      C,SEARCH        ; Yes - search for words
     783/    450D : FE 7B               	CP      'z'+1           ; Greater than 'z' ?
     784/    450F : 30 FE               	Jr      NC,SEARCH       ; Yes - search for words
     785/    4511 : E6 5F               	AND     01011111B       ; Force upper case
     786/    4513 : 77                  	LD      (HL),A          ; Replace byte
     787/    4514 : 4E                  SEARCH: LD      C,(HL)          ; Search for a word
     788/    4515 : EB                  	EX      DE,HL
     789/    4516 : 23                  GETNXT: INC     HL              ; Get next reserved word
     790/    4517 : B6                  	OR      (HL)            ; Start of word?
     791/    4518 : F2 16 45            	JP      P,GETNXT        ; No - move on
     792/    451B : 04                  	INC     B               ; Increment token value
     793/    451C : 7E                  	LD      A, (HL)         ; Get byte from table
     794/    451D : E6 7F               	AND     01111111B       ; Strip bit 7
     795/    451F : C8                  	RET     Z               ; Return if end of list
     796/    4520 : B9                  	CP      C               ; Same character as in buffer?
     797/    4521 : 20 F3               	Jr      NZ,GETNXT       ; No - get next word
     798/    4523 : EB                  	EX      DE,HL
     799/    4524 : E5                  	PUSH    HL              ; Save start of word
     800/    4525 :                     
     801/    4525 : 13                  NXTBYT: INC     DE              ; Look through rest of word
     802/    4526 : 1A                  	LD      A,(DE)          ; Get byte from table
     803/    4527 : B7                  	OR      A               ; End of word ?
     804/    4528 : FA 28 45            	JP      M,MATCH         ; Yes - Match found
     805/    452B : 4F                  	LD      C,A             ; Save it
     806/    452C : 78                  	LD      A,B             ; Get token value
     807/    452D : FE 88               	CP      ZGOTO           ; Is it "GOTO" token ?
     808/    452F : 20 FE               	Jr      NZ,NOSPC        ; No - Don't allow spaces
     809/    4531 : CD 31 45            	CALL    GETCHR          ; Get next character
     810/    4534 : 2B                  	DEC     HL              ; Cancel increment from GETCHR
     811/    4535 : 23                  NOSPC:  INC     HL              ; Next byte
     812/    4536 : 7E                  	LD      A,(HL)          ; Get byte
     813/    4537 : FE 61               	CP      'a'             ; Less than 'a' ?
     814/    4539 : 38 FE               	Jr      C,NOCHNG        ; Yes - don't change
     815/    453B : E6 5F               	AND     01011111B       ; Make upper case
     816/    453D : B9                  NOCHNG: CP      C               ; Same as in buffer ?
     817/    453E : 28 E5               	Jr      Z,NXTBYT        ; Yes - keep testing
     818/    4540 : E1                  	POP     HL              ; Get back start of word
     819/    4541 : 18 D1               	Jr      SEARCH          ; Look at next word
     820/    4543 :                     
     821/    4543 : 48                  MATCH:  LD      C,B             ; Word found - Save token value
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 15 - 2/19/2023 19:38:37


     822/    4544 : F1                  	POP     AF              ; Throw away return
     823/    4545 : EB                  	EX      DE,HL
     824/    4546 : C9                  	RET                     ; Return to "RETNAD"
     825/    4547 : EB                  RETNAD: EX      DE,HL           ; Get address in string
     826/    4548 : 79                  	LD      A,C             ; Get token value
     827/    4549 : C1                  	POP     BC              ; Restore buffer length
     828/    454A : D1                  	POP     DE              ; Get destination address
     829/    454B : 23                  MOVDIR: INC     HL              ; Next source in buffer
     830/    454C : 12                  	LD      (DE),A          ; Put byte in buffer
     831/    454D : 13                  	INC     DE              ; Move up buffer
     832/    454E : 0C                  	INC     C               ; Increment length of buffer
     833/    454F : D6 3A               	SUB     ':'             ; End of statement?
     834/    4551 : 28 FE               	Jr      Z,SETLIT        ; Jump if multi-statement line
     835/    4553 : FE 49               	CP      ZDATA-3AH       ; Is it DATA statement ?
     836/    4555 : 20 FE               	Jr      NZ,TSTREM       ; No - see if REM
     837/    4557 : 32 AA 60            SETLIT: LD      (DATFLG),A      ; Set literal flag
     838/    455A : D6 54               TSTREM: SUB     ZREM-3AH        ; Is it REM?
     839/    455C : C2 D8 44            	JP      NZ,CRNCLP       ; No - Leave flag
     840/    455F : 47                  	LD      B,A             ; Copy rest of buffer
     841/    4560 : 7E                  NXTCHR: LD      A,(HL)          ; Get byte
     842/    4561 : B7                  	OR      A               ; End of line ?
     843/    4562 : 28 FE               	Jr      Z,ENDBUF        ; Yes - Terminate buffer
     844/    4564 : B8                  	CP      B               ; End of statement ?
     845/    4565 : 28 E4               	Jr      Z,MOVDIR        ; Yes - Get next one
     846/    4567 : 23                  CPYLIT: INC     HL              ; Move up source string
     847/    4568 : 12                  	LD      (DE),A          ; Save in destination
     848/    4569 : 0C                  	INC     C               ; Increment length
     849/    456A : 13                  	INC     DE              ; Move up destination
     850/    456B : 18 F3               	Jr      NXTCHR          ; Repeat
     851/    456D :                     
     852/    456D : 21 5C 60            ENDBUF: LD      HL,BUFFER-1     ; Point to start of buffer
     853/    4570 : 12                  	LD      (DE),A          ; Mark end of buffer (A = 00)
     854/    4571 : 13                  	INC     DE
     855/    4572 : 12                  	LD      (DE),A          ; A = 00
     856/    4573 : 13                  	INC     DE
     857/    4574 : 12                  	LD      (DE),A          ; A = 00
     858/    4575 : C9                  	RET
     859/    4576 :                     ;vvv---
     860/    4576 : 01                  TTYLIN:		db	1	; ldc bc, ...
     861/    4577 : 0E 01               unk_4577:	ld	c,1
     862/    4579 : 21 5D 60            		ld	hl, BUFFER
     863/    457C : 06 01               		ld	b, 1
     864/    457E : CD 7E 45            loc_457E:	call	unk_8	; inch
     865/    4581 : FE 14               		cp	14h
     866/    4583 : 38 FE               		jr	c, loc_4589
     867/    4585 : FE 1C               		cp	1Ch
     868/    4587 : 38 FE               		jr	c, loc_45DF
     869/    4589 : CD 89 45            loc_4589:	call	sub_5CCF
     870/    458C : 20 F0               loc_458C:	jr	nz, loc_457E
     871/    458E : D8                  		ret	c
     872/    458F : D5                  		push	de
     873/    4590 : ED 5B 90 45         		ld	de, (cupos)
     874/    4594 : 7B                  		ld	a, e
     875/    4595 : F6 3F               		or	3Fh ; '?'
     876/    4597 : 5F                  		ld	e, a
     877/    4598 : 3A 4D 60            		ld	a, (unk_604D)
     878/    459B : A7                  		and	a
     879/    459C : 28 FE               		jr	z, loc_45A8
     880/    459E : 1A                  loc_459E:	ld	a, (de)
     881/    459F : 1B                  		dec	de
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 16 - 2/19/2023 19:38:37


     882/    45A0 : FE 20               		cp	' '
     883/    45A2 : 28 FE               		jr	z, loc_45BA
     884/    45A4 : FE 2A               		cp	'*'
     885/    45A6 : 20 F6               		jr	nz, loc_459E
     886/    45A8 : 0D                  loc_45A8:	dec	c
     887/    45A9 : 20 FE               		jr	nz, loc_45BA
     888/    45AB : 1A                  loc_45AB:	ld	a, (de)
     889/    45AC : 1D                  		dec	e
     890/    45AD : FE 3F               		cp	3Fh ; '?'
     891/    45AF : 28 FE               		jr	z, loc_45BA
     892/    45B1 : 7B                  		ld	a, e
     893/    45B2 : E6 3F               		and	3Fh ; '?'
     894/    45B4 : 20 F5               		jr	nz, loc_45AB
     895/    45B6 : 7B                  		ld	a, e
     896/    45B7 : F6 3F               		or	3Fh ; '?'
     897/    45B9 : 5F                  		ld	e, a
     898/    45BA : 1A                  loc_45BA:	ld	a, (de)
     899/    45BB : 1B                  		dec	de
     900/    45BC : CD BC 45            		call	sub_46BB
     901/    45BF : A7                  		and	a
     902/    45C0 : 79                  		ld	a, c
     903/    45C1 : 28 FE               		jr	z, loc_45CB
     904/    45C3 : FE E1               		cp	0E1h ; 'á'
     905/    45C5 : 38 FE               		jr	c, loc_45CF
     906/    45C7 : D6 E0               		sub	0E0h ; 'à'
     907/    45C9 : 18 FE               		jr	loc_45CF
     908/    45CB : FE 20               loc_45CB:	cp	20h ; ' '
     909/    45CD : 28 FE               		jr	z, loc_45D5
     910/    45CF : 77                  loc_45CF:		ld	(hl), a
     911/    45D0 : 32 C8 60            		ld	(LSTBIN), a
     912/    45D3 : 23                  		inc	hl
     913/    45D4 : 04                  		inc	b
     914/    45D5 : 7B                  loc_45D5:	ld	a, e
     915/    45D6 : F6 C0               		or	0C0h ; 'À'
     916/    45D8 : 3C                  		inc	a
     917/    45D9 : 20 DF               		jr	nz, loc_45BA
     918/    45DB : D1                  		pop	de
     919/    45DC : C3 DC 45            		jp	ENDINP
     920/    45DF : E5                  loc_45DF:	push	hl
     921/    45E0 : 21 E0 45            		ld	hl, unk_1F80	; Funktionstasten
     922/    45E3 : D6 13               		sub	13h
     923/    45E5 : 47                  		ld	b, a
     924/    45E6 : 7E                  loc_45E6:	ld	a, (hl)
     925/    45E7 : 23                  		inc	hl
     926/    45E8 : A7                  		and	a
     927/    45E9 : 20 FB               		jr	nz, loc_45E6
     928/    45EB : 10 F9               		djnz	loc_45E6
     929/    45ED : 7E                  loc_45ED:	ld	a, (hl)
     930/    45EE : 23                  		inc	hl
     931/    45EF : A7                  		and	a
     932/    45F0 : 28 FE               		jr	z, loc_45FA
     933/    45F2 : CD F2 45            		call	sub_5CCF
     934/    45F5 : 20 F6               		jr	nz, loc_45ED
     935/    45F7 : E1                  loc_45F7:	pop	hl
     936/    45F8 : 18 92               		jr	loc_458C
     937/    45FA : 3C                  loc_45FA:	inc	a
     938/    45FB : 18 FA               		jr	loc_45F7
     939/    45FD : FF                  		db 0FFh
     940/    45FE : FF                  		db 0FFh
     941/    45FF : FF                  		db 0FFh
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 17 - 2/19/2023 19:38:37


     942/    4600 :                     ;^^^---
     943/    4600 :                     
     944/    4600 : 11 0A 00            AUTO:		ld	de, 10
     945/    4603 : D5                  		push	de
     946/    4604 : 28 FE               		jr	z, auto2
     947/    4606 : CD 06 46            		call	ATOH
     948/    4609 : EB                  		ex	de, hl
     949/    460A : E3                  		ex	(sp), hl
     950/    460B : 28 FE               		jr	z, auto3
     951/    460D : EB                  		ex	de, hl
     952/    460E : CD 0E 46            		call	CHKSYN
     953/    4611 : 2C                  		db	','
     954/    4612 : ED 5B 50 60         		ld	de, (unk_6050)
     955/    4616 : 28 FE               auto1:		jr	z, auto2
     956/    4618 : CD 18 46            		call	ATOH
     957/    461B : C2 70 43            		jp	nz, SNERR
     958/    461E : EB                  auto2:		ex	de, hl
     959/    461F : 7D                  auto3:		ld	a, l
     960/    4620 : B4                  		or	h
     961/    4621 : CA 21 46            		jp	z, FCERR
     962/    4624 : 22 50 60            		ld	(unk_6050), hl
     963/    4627 : 32 4D 60            		ld	(unk_604D), a
     964/    462A : E1                  		pop	hl
     965/    462B : 22                  		db  22h	; "
     966/    462C : 4E                  		db  4Eh	; N
     967/    462D : 60                  loc_462D:	ld	h, b
     968/    462E : C1                  		pop	bc
     969/    462F : C3 C9 43            		jp	GETCMD
     970/    4632 :                     ;---
     971/    4632 :                     
     972/    4632 : C0                  NEW:    RET     NZ              ; Return if any more on line
     973/    4633 : 2A 5A 60            CLRPTR: LD      HL,(BASTXT)     ; Point to start of program
     974/    4636 : AF                  	XOR     A               ; Set program area to empty
     975/    4637 : 77                  	LD      (HL),A          ; Save LSB = 00
     976/    4638 : 23                  	INC     HL
     977/    4639 : 77                  	LD      (HL),A          ; Save MSB = 00
     978/    463A : 23                  	INC     HL
     979/    463B : 22 D2 60            	LD      (PROGND),HL     ; Set program end
     980/    463E :                     
     981/    463E : 2A 5A 60            RUNFST: LD      HL,(BASTXT)     ; Clear all variables
     982/    4641 : 2B                  	DEC     HL
     983/    4642 :                     
     984/    4642 : 22 CA 60            INTVAR: LD      (BRKLIN),HL     ; Initialise RUN variables
     985/    4645 : 2A AB 60            	LD      HL,(LSTRAM)     ; Get end of RAM
     986/    4648 : 22 BF 60            	LD      (STRBOT),HL     ; Clear string space
     987/    464B : AF                  	XOR     A
     988/    464C : CD 4C 46            	CALL    RESTOR          ; Reset DATA pointers
     989/    464F : 2A D2 60            	LD      HL,(PROGND)     ; Get end of program
     990/    4652 : 22 D4 60            	LD      (VAREND),HL     ; Clear variables
     991/    4655 : 22 D6 60            	LD      (ARREND),HL     ; Clear arrays
     992/    4658 :                     
     993/    4658 : C1                  CLREG:  POP     BC              ; Save return address
     994/    4659 : ED 7B 56 60         	LD      SP,(STRSPC)     ; Set stack end of working RAN
     995/    465D : 21 AF 60            	LD      HL,TMSTPL       ; Temporary string pool
     996/    4660 : 22 AD 60            	LD      (TMSTPT),HL     ; Reset temporary string ptr
     997/    4663 : AF                  	XOR     A               ; A = 00
     998/    4664 : 6F                  	LD      L,A             ; HL = 0000
     999/    4665 : 67                  	LD      H,A
    1000/    4666 : 22 D0 60            	LD      (CONTAD),HL     ; No CONTinue
    1001/    4669 : 32 C7 60            	LD      (FORFLG),A      ; Clear FOR flag
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 18 - 2/19/2023 19:38:37


    1002/    466C : 22 DA 60            	LD      (FNRGNM),HL     ; Clear FN argument
    1003/    466F : E5                  	PUSH    HL              ; HL = 0000
    1004/    4670 : C5                  	PUSH    BC              ; Put back return
    1005/    4671 : 2A CA 60            DOAGN:  LD      HL,(BRKLIN)     ; Get address of code to RUN
    1006/    4674 : C9                  	RET                     ; Return to execution driver
    1007/    4675 :                     
    1008/    4675 : 7C                  CPDEHL: LD      A,H             ; Get H
    1009/    4676 : 92                  	SUB     D               ; Compare with D
    1010/    4677 : C0                  	RET     NZ              ; Different - Exit
    1011/    4678 : 7D                  	LD      A,L             ; Get L
    1012/    4679 : 93                  	SUB     E               ; Compare with E
    1013/    467A : C9                  	RET                     ; Return status
    1014/    467B :                     
    1015/    467B : 7E                  CHKSYN: LD      A,(HL)          ; Check syntax of character
    1016/    467C : E3                  	EX      (SP),HL         ; Address of test byte
    1017/    467D : BE                  	CP      (HL)            ; Same as in code string?
    1018/    467E : 23                  	INC     HL              ; Return address
    1019/    467F : E3                  	EX      (SP),HL         ; Put it back
    1020/    4680 : CA 80 46            	JP      Z,GETCHR        ; Yes - Get next character
    1021/    4683 : C3 70 43            	JP      SNERR           ; Different - ?SN Error
    1022/    4686 :                     
    1023/    4686 : 7E                  CHKLTR: LD      A,(HL)          ; Get byte
    1024/    4687 : FE 41               	CP      'A'             ; < 'a' ?
    1025/    4689 : D8                  	RET     C               ; Carry set if not letter
    1026/    468A : FE 5B               	CP      'Z'+1           ; > 'z' ?
    1027/    468C : 3F                  	CCF
    1028/    468D : C9                  	RET                     ; Carry set if not letter
    1029/    468E :                     
    1030/    468E : F5                  OUTC:   PUSH    AF              ; Save character
    1031/    468F : C5                  	push	bc
    1032/    4690 : CD 90 46            	call	sub_46BB
    1033/    4693 : A7                  	and	a
    1034/    4694 : 79                  	ld	a, c
    1035/    4695 : 28 FE               	jr	z, loc_469E
    1036/    4697 : FE 20               	cp	20h ; ' '
    1037/    4699 : 30 FE               	jr	nc, loc_469E
    1038/    469B : C6 E0               	add	a, 0E0h	; 'à'
    1039/    469D : 4F                  	ld	c, a
    1040/    469E :                     loc_469E:
    1041/    469E : FE 20               	CP      ' '             ; Is it a control code?
    1042/    46A0 : 38 FE               	Jr      C,DINPOS        ; Yes - Don't INC POS(X)
    1043/    46A2 : 3A 41 60            	LD      A,(LWIDTH)      ; Get line width
    1044/    46A5 : 47                  	LD      B,A             ; To B
    1045/    46A6 : 3C                  	inc	a		; Width 255?
    1046/    46A7 : 3A A7 60            	LD      A,(CURPOS)      ; Get cursor position
    1047/    46AA : 28 FE               	Jr      Z,INCLEN        ; Yes - No width limit
    1048/    46AC : B8                  	CP      B               ; At end of line?
    1049/    46AD : CC AD 46            	CALL    Z,PRNTCRLF      ; Yes - output CRLF
    1050/    46B0 : 3C                  INCLEN: INC     A               ; Move on one character
    1051/    46B1 : 32 A7 60            	LD      (CURPOS),A      ; Save new position
    1052/    46B4 : 79                  DINPOS: ld	a, c            ; Restore character
    1053/    46B5 : CD B5 46            	CALL    MONOUT          ; Send it
    1054/    46B8 : C1                  POPAF:  pop	bc
    1055/    46B9 : F1                  	POP     AF              ; Throw away status push
    1056/    46BA : C9                  	RET
    1057/    46BB :                     
    1058/    46BB :                     sub_46BB:
    1059/    46BB : 4F                  	ld	c,a
    1060/    46BC : FE 22               	cp      22h ; '"'
    1061/    46BE : 3A 43 60            	LD      A,(CTLOFG)      ; Get flag
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 19 - 2/19/2023 19:38:37


    1062/    46C1 : C0                  	ret	nz
    1063/    46C2 : 2F                  	CPL                     ; Flip it
    1064/    46C3 : 32 43 60            	LD      (CTLOFG),A      ; Put it back
    1065/    46C6 : C9                  	RET
    1066/    46C7 :                     
    1067/    46C7 : DF                  PROMPT: rst     18h
    1068/    46C8 : 3F A0               	db	'?',' '+80h
    1069/    46CA : C3 4A 60            	JP      RINPUT          ; Get input line
    1070/    46CD :                     
    1071/    46CD : 1A                  sub_46CD:	ld	a, (de)
    1072/    46CE : 13                  		inc	de
    1073/    46CF : CB 7F               		bit	7, a
    1074/    46D1 : C9                  		ret
    1075/    46D2 :                     
    1076/    46D2 : CD D2 46            LINES:  CALL    GETNUM          ; Get a number
    1077/    46D5 : CD D5 46            	CALL    DEINT           ; Get integer -32768 to 32767
    1078/    46D8 : ED 53 44 60         	LD      (LINESC),DE     ; Set lines counter
    1079/    46DC : ED 53 46 60         	LD      (LINESN),DE     ; Set lines number
    1080/    46E0 : C9                  	RET
    1081/    46E1 :                     
    1082/    46E1 : CD E1 46            LIST:   CALL    ATOH            ; ASCII number to DE
    1083/    46E4 : C0                  	RET     NZ              ; Return if anything extra
    1084/    46E5 : C1                  	POP     BC              ; Rubbish - Not needed
    1085/    46E6 : CD B0 44            	CALL    SRCHLN          ; Search for line number in DE
    1086/    46E9 : C5                  	PUSH    BC              ; Save address of line
    1087/    46EA : CD EA 46            	CALL    SETLIN          ; Set up lines counter
    1088/    46ED : E1                  LISTLP: POP     HL              ; Restore address of line
    1089/    46EE : 4E                  	LD      C,(HL)          ; Get LSB of next line
    1090/    46EF : 23                  	INC     HL
    1091/    46F0 : 46                  	LD      B,(HL)          ; Get MSB of next line
    1092/    46F1 : 23                  	INC     HL
    1093/    46F2 : 78                  	LD      A,B             ; BC = 0 (End of program)?
    1094/    46F3 : B1                  	OR      C
    1095/    46F4 : 28 FE               	Jr      Z,loc_473C        ; Yes - Go to command mode
    1096/    46F6 : CD F6 46            	CALL    COUNT           ; Count lines
    1097/    46F9 : CD F9 46            	CALL    TSTBRK          ; Test for break key
    1098/    46FC : C5                  	PUSH    BC              ; Save address of next line
    1099/    46FD : CD FD 46            	CALL    PRNTCRLF        ; Output CRLF
    1100/    4700 : 5E                  	LD      E,(HL)          ; Get LSB of line number
    1101/    4701 : 23                  	INC     HL
    1102/    4702 : 56                  	LD      D,(HL)          ; Get MSB of line number
    1103/    4703 : 23                  	INC     HL
    1104/    4704 : E5                  	PUSH    HL              ; Save address of line start
    1105/    4705 : EB                  	EX      DE,HL           ; Line number to HL
    1106/    4706 : CD 06 47            	CALL    PRNTHL          ; Output line number in decimal
    1107/    4709 : 3E 20               	LD      A,' '           ; Space after line number
    1108/    470B : E1                  	pop	hl
    1109/    470C :                     
    1110/    470C : CD 8E 46            loc_470C:	call	OUTC
    1111/    470F : 7E                  loc_470F:	ld	a, (hl)
    1112/    4710 : B7                  		or	a
    1113/    4711 : 23                  		inc	hl
    1114/    4712 : 28 D9               		jr	z, LISTLP
    1115/    4714 : F2 0C 47            		jp	p, loc_470C
    1116/    4717 : CD BB 46            		call	sub_46BB
    1117/    471A : A7                  		and	a
    1118/    471B : 79                  		ld	a, c
    1119/    471C : 20 EE               		jr	nz, loc_470C
    1120/    471E : D6 7F               		sub	7Fh ; ''
    1121/    4720 : 47                  		ld	b, a
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 20 - 2/19/2023 19:38:37


    1122/    4721 : 11 2E 41            		ld	de, WORDS
    1123/    4724 : CD CD 46            loc_4724:	call	sub_46CD
    1124/    4727 : 28 FB               		jr	z, loc_4724
    1125/    4729 : 10 F9               		djnz	loc_4724
    1126/    472B : D7                  loc_472B:	rst	10h
    1127/    472C : CD CD 46            		call	sub_46CD
    1128/    472F : 28 FA               		jr	z, loc_472B
    1129/    4731 : 18 DC               		jr	loc_470F
    1130/    4733 :                     
    1131/    4733 : E5                  SETLIN: PUSH    HL              ; Set up LINES counter
    1132/    4734 : 2A 46 60            	LD      HL,(LINESN)     ; Get LINES number
    1133/    4737 : 22 44 60            	LD      (LINESC),HL     ; Save in LINES counter
    1134/    473A : E1                  	POP     HL
    1135/    473B : C9                  	RET
    1136/    473C :                     
    1137/    473C : 18 FE               loc_473C:	jr	loc_4741
    1138/    473E : CD 3E 47            		call	PRNTCRLF
    1139/    4741 : C3 5F 40            loc_4741:	jp	BRKRET
    1140/    4744 :                     
    1141/    4744 : E5                  COUNT:		push	hl
    1142/    4745 : D5                  		push	de
    1143/    4746 : 2A 44 60            		ld	hl, (LINESC)
    1144/    4749 : 11 FF FF            		ld	de, 0FFFFh
    1145/    474C : ED 5A               		adc	hl, de
    1146/    474E : 22 44 60            		ld	(LINESC), hl
    1147/    4751 : D1                  		pop	de
    1148/    4752 : E1                  		pop	hl
    1149/    4753 : F0                  		ret	p
    1150/    4754 : CD 33 47            		call	SETLIN
    1151/    4757 : CD 57 47            		call	unk_8	; inch
    1152/    475A : FE 13               		cp	13h
    1153/    475C : 28 DE               		jr	z, loc_473C
    1154/    475E : 18 E4               		jr	COUNT
    1155/    4760 :                     ;^^^---
    1156/    4760 :                     
    1157/    4760 : 3E                  TRON:	db  3Eh	; ld a,..
    1158/    4761 : AF                  TROFF:	xor	a
    1159/    4762 : 32 0A 60            	ld	(TRFLAG), a
    1160/    4765 : C9                  	ret
    1161/    4766 :                     
    1162/    4766 : 21 04 00            BAKSTK: LD      HL,4            ; Look for "FOR" block with
    1163/    4769 : 39                  	ADD     HL,SP           ; same index as specified
    1164/    476A : 7E                  LOKFOR: LD      A,(HL)          ; Get block ID
    1165/    476B : 23                  	INC     HL              ; Point to index address
    1166/    476C : FE 81               	CP      ZFOR            ; Is it a "FOR" token
    1167/    476E : C0                  	RET     NZ              ; No - exit
    1168/    476F : 4E                  	LD      C,(HL)          ; BC = Address of "FOR" index
    1169/    4770 : 23                  	INC     HL
    1170/    4771 : 46                  	LD      B,(HL)
    1171/    4772 : 23                  	INC     HL              ; Point to sign of STEP
    1172/    4773 : E5                  	PUSH    HL              ; Save pointer to sign
    1173/    4774 : 69                  	LD      L,C             ; HL = address of "FOR" index
    1174/    4775 : 60                  	LD      H,B
    1175/    4776 : 7A                  	LD      A,D             ; See if an index was specified
    1176/    4777 : B3                  	OR      E               ; DE = 0 if no index specified
    1177/    4778 : EB                  	EX      DE,HL           ; Specified index into HL
    1178/    4779 : 28 FE               	Jr      Z,INDFND        ; Skip if no index given
    1179/    477B : EB                  	EX      DE,HL           ; Index back into DE
    1180/    477C : CD 75 46            	CALL    CPDEHL          ; Compare index with one given
    1181/    477F : 01 0D 00            INDFND: LD      BC,16-3         ; Offset to next block
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 21 - 2/19/2023 19:38:37


    1182/    4782 : E1                  	POP     HL              ; Restore pointer to sign
    1183/    4783 : C8                  	RET     Z               ; Return if block found
    1184/    4784 : 09                  	ADD     HL,BC           ; Point to next block
    1185/    4785 : 18 E3               	Jr      LOKFOR          ; Keep on looking
    1186/    4787 :                     
    1187/    4787 : 3E 64               FOR:    LD      A,64H           ; Flag "FOR" assignment
    1188/    4789 : 32 C7 60            	LD      (FORFLG),A      ; Save "FOR" flag
    1189/    478C : CD 8C 47            	CALL    LET             ; Set up initial index
    1190/    478F : C1                  	POP     BC              ; Drop RETurn address
    1191/    4790 : E5                  	PUSH    HL              ; Save code string address
    1192/    4791 : CD 91 47            	CALL    DATA            ; Get next statement address
    1193/    4794 : 22 C3 60            	LD      (LOOPST),HL     ; Save it for start of loop
    1194/    4797 : 21 02 00            	LD      HL,2            ; Offset for "FOR" block
    1195/    479A : 39                  	ADD     HL,SP           ; Point to it
    1196/    479B : CD 6A 47            FORSLP: CALL    LOKFOR          ; Look for existing "FOR" block
    1197/    479E : D1                  	POP     DE              ; Get code string address
    1198/    479F : 20 FE               	Jr      NZ,FORFND       ; No nesting found
    1199/    47A1 : 09                  	ADD     HL,BC           ; Move into "FOR" block
    1200/    47A2 : D5                  	PUSH    DE              ; Save code string address
    1201/    47A3 : 2B                  	DEC     HL
    1202/    47A4 : 56                  	LD      D,(HL)          ; Get MSB of loop statement
    1203/    47A5 : 2B                  	DEC     HL
    1204/    47A6 : 5E                  	LD      E,(HL)          ; Get LSB of loop statement
    1205/    47A7 : 23                  	INC     HL
    1206/    47A8 : 23                  	INC     HL
    1207/    47A9 : E5                  	PUSH    HL              ; Save block address
    1208/    47AA : 2A C3 60            	LD      HL,(LOOPST)     ; Get address of loop statement
    1209/    47AD : CD 75 46            	CALL    CPDEHL          ; Compare the FOR loops
    1210/    47B0 : E1                  	POP     HL              ; Restore block address
    1211/    47B1 : 20 E8               	Jr      NZ,FORSLP       ; Different FORs - Find another
    1212/    47B3 : D1                  	POP     DE              ; Restore code string address
    1213/    47B4 : F9                  	LD      SP,HL           ; Remove all nested loops
    1214/    47B5 :                     
    1215/    47B5 : EB                  FORFND: EX      DE,HL           ; Code string address to HL
    1216/    47B6 : 0E 08               	LD      C,8
    1217/    47B8 : CD 4F 43            	CALL    CHKSTK          ; Check for 8 levels of stack
    1218/    47BB : E5                  	PUSH    HL              ; Save code string address
    1219/    47BC : 2A C3 60            	LD      HL,(LOOPST)     ; Get first statement of loop
    1220/    47BF : E3                  	EX      (SP),HL         ; Save and restore code string
    1221/    47C0 : E5                  	PUSH    HL              ; Re-save code string address
    1222/    47C1 : 2A 58 60            	LD      HL,(LINEAT)     ; Get current line number
    1223/    47C4 : E3                  	EX      (SP),HL         ; Save and restore code string
    1224/    47C5 : CD C5 47            	CALL    TSTNUM          ; Make sure it's a number
    1225/    47C8 : CD 7B 46            	CALL    CHKSYN          ; Make sure "TO" is next
    1226/    47CB : A6                  	DB   ZTO          ; "TO" token
    1227/    47CC : CD CC 47            	CALL    GETNUM          ; Get "TO" expression value
    1228/    47CF : E5                  	PUSH    HL              ; Save code string address
    1229/    47D0 : CD D0 47            	CALL    BCDEFP          ; Move "TO" value to BCDE
    1230/    47D3 : E1                  	POP     HL              ; Restore code string address
    1231/    47D4 : C5                  	PUSH    BC              ; Save "TO" value in block
    1232/    47D5 : D5                  	PUSH    DE
    1233/    47D6 : 01 00 81            	LD      BC,8100H        ; BCDE - 1 (default STEP)
    1234/    47D9 : 51                  	LD      D,C             ; C=0
    1235/    47DA : 5A                  	LD      E,D             ; D=0
    1236/    47DB : 7E                  	LD      A,(HL)          ; Get next byte in code string
    1237/    47DC : FE AB               	CP      ZSTEP           ; See if "STEP" is stated
    1238/    47DE : 3E 01               	LD      A,1             ; Sign of step = 1
    1239/    47E0 : 20 FE               	Jr      NZ,SAVSTP       ; No STEP given - Default to 1
    1240/    47E2 : CD E2 47            	CALL    GETCHR          ; Jump over "STEP" token
    1241/    47E5 : CD E5 47            	CALL    GETNUM          ; Get step value
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 22 - 2/19/2023 19:38:37


    1242/    47E8 : E5                  	PUSH    HL              ; Save code string address
    1243/    47E9 : CD E9 47            	CALL    BCDEFP          ; Move STEP to BCDE
    1244/    47EC : CD EC 47            	CALL    TSTSGN          ; Test sign of FPREG
    1245/    47EF : E1                  	POP     HL              ; Restore code string address
    1246/    47F0 : C5                  SAVSTP: PUSH    BC              ; Save the STEP value in block
    1247/    47F1 : D5                  	PUSH    DE
    1248/    47F2 : F5                  	PUSH    AF              ; Save sign of STEP
    1249/    47F3 : 33                  	INC     SP              ; Don't save flags
    1250/    47F4 : E5                  	PUSH    HL              ; Save code string address
    1251/    47F5 : 2A CA 60            	LD      HL,(BRKLIN)     ; Get address of index variable
    1252/    47F8 : E3                  	EX      (SP),HL         ; Save and restore code string
    1253/    47F9 : 06 81               PUTFID: LD      B,ZFOR          ; "FOR" block marker
    1254/    47FB : C5                  	PUSH    BC              ; Save it
    1255/    47FC : 33                  	INC     SP              ; Don't save C
    1256/    47FD :                     
    1257/    47FD : CD FD 47            RUNCNT: CALL    TSTBRK          ; Execution driver - Test break
    1258/    4800 : 22 CA 60            	LD      (BRKLIN),HL     ; Save code address for break
    1259/    4803 : 7E                  	LD      A,(HL)          ; Get next byte in code string
    1260/    4804 : FE 3A               	CP      ':'             ; Multi statement line?
    1261/    4806 : 28 FE               	Jr      Z,EXCUTE        ; Yes - Execute it
    1262/    4808 : B7                  	OR      A               ; End of line?
    1263/    4809 : C2 70 43            	JP      NZ,SNERR        ; No - Syntax error
    1264/    480C : 23                  	INC     HL              ; Point to address of next line
    1265/    480D : 7E                  	LD      A,(HL)          ; Get LSB of line pointer
    1266/    480E : 23                  	INC     HL
    1267/    480F : B6                  	OR      (HL)            ; Is it zero (End of prog)?
    1268/    4810 : CA 10 48            	JP      Z,ENDPRG        ; Yes - Terminate execution
    1269/    4813 : 23                  	INC     HL              ; Point to line number
    1270/    4814 : 5E                  	LD      E,(HL)          ; Get LSB of line number
    1271/    4815 : 23                  	INC     HL
    1272/    4816 : 56                  	LD      D,(HL)          ; Get MSB of line number
    1273/    4817 : EB                  	EX      DE,HL           ; Line number to HL
    1274/    4818 : 22 58 60            	LD      (LINEAT),HL     ; Save as current line number
    1275/    481B : 3A 0A 60            	ld	a, (TRFLAG)
    1276/    481E : B7                  	or	a
    1277/    481F : 28 FE               	jr	z, loc_4830
    1278/    4821 : D5                  	push	de
    1279/    4822 : 3E 3C               	ld	a, '<'
    1280/    4824 : CD 8E 46            	call	OUTC
    1281/    4827 : CD 27 48            	call	PRNTHL
    1282/    482A : 3E 3E               	ld	a, '>'
    1283/    482C : CD 8E 46            	call	OUTC
    1284/    482F : D1                  	pop	de
    1285/    4830 :                     loc_4830:
    1286/    4830 : EB                  	EX      DE,HL           ; Line number back to DE
    1287/    4831 : CD 31 48            EXCUTE: CALL    GETCHR          ; Get key word
    1288/    4834 : 11 FD 47            	LD      DE,RUNCNT       ; Where to RETurn to
    1289/    4837 : D5                  	PUSH    DE              ; Save for RETurn
    1290/    4838 : C8                  IFJMP:  RET     Z               ; Go to RUNCNT if end of STMT
    1291/    4839 : D6 80               ONJMP:  SUB     ZEND            ; Is it a token?
    1292/    483B : DA 3B 48            	JP      C,LET           ; No - try to assign it
    1293/    483E : FE 25               	CP      ZNEW+1-ZEND     ; END to NEW ?
    1294/    4840 : 38 FE               	jr	c, loc_484E
    1295/    4842 : D6 50               	sub	50h ; 'P'
    1296/    4844 : DA 70 43            	jp	c, SNERR
    1297/    4847 : FE 09               	cp	9
    1298/    4849 : D2 70 43            	JP      NC,SNERR        ; Not a key word - ?SN Error
    1299/    484C : C6 25               	add	a, 25h
    1300/    484E :                     loc_484E:
    1301/    484E : 07                  	RLCA                    ; Double it
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 23 - 2/19/2023 19:38:37


    1302/    484F : 4F                  	LD      C,A             ; BC = Offset into table
    1303/    4850 : 06 00               	LD      B,0
    1304/    4852 : EB                  	EX      DE,HL           ; Save code string address
    1305/    4853 : 21 6D 42            	LD      HL,WORDTB       ; Keyword address table
    1306/    4856 : 09                  	ADD     HL,BC           ; Point to routine address
    1307/    4857 : 4E                  	LD      C,(HL)          ; Get LSB of routine address
    1308/    4858 : 23                  	INC     HL
    1309/    4859 : 46                  	LD      B,(HL)          ; Get MSB of routine address
    1310/    485A : C5                  	PUSH    BC              ; Save routine address
    1311/    485B : EB                  	EX      DE,HL           ; Restore code string address
    1312/    485C :                     
    1313/    485C : 23                  GETCHR: INC     HL              ; Point to next character
    1314/    485D : 7E                  	LD      A,(HL)          ; Get next code string byte
    1315/    485E : FE 3A               	CP      ':'             ; Z if ':'
    1316/    4860 : D0                  	RET     NC              ; NC if > "9"
    1317/    4861 : FE 20               	CP      ' '
    1318/    4863 : 28 F7               	Jr      Z,GETCHR        ; Skip over spaces
    1319/    4865 : FE 30               	CP      '0'
    1320/    4867 : 3F                  	CCF                     ; NC if < '0'
    1321/    4868 : 3C                  	INC     A               ; Test for zero - Leave carry
    1322/    4869 : 3D                  	DEC     A               ; Z if Null
    1323/    486A : C9                  	RET
    1324/    486B :                     
    1325/    486B : EB                  RESTOR: EX      DE,HL           ; Save code string address
    1326/    486C : 2A 5A 60            	LD      HL,(BASTXT)     ; Point to start of program
    1327/    486F : 28 FE               	Jr      Z,RESTNL        ; Just RESTORE - reset pointer
    1328/    4871 : EB                  	EX      DE,HL           ; Restore code string address
    1329/    4872 : CD 72 48            	CALL    ATOH            ; Get line number to DE
    1330/    4875 : E5                  	PUSH    HL              ; Save code string address
    1331/    4876 : CD B0 44            	CALL    SRCHLN          ; Search for line number in DE
    1332/    4879 : 60                  	LD      H,B             ; HL = Address of line
    1333/    487A : 69                  	LD      L,C
    1334/    487B : D1                  	POP     DE              ; Restore code string address
    1335/    487C : D2 7C 48            	JP      NC,ULERR        ; ?UL Error if not found
    1336/    487F : 2B                  RESTNL: DEC     HL              ; Byte before DATA statement
    1337/    4880 : 22 D8 60            UPDATA: LD      (NXTDAT),HL     ; Update DATA pointer
    1338/    4883 : EB                  	EX      DE,HL           ; Restore code string address
    1339/    4884 : C9                  	RET
    1340/    4885 :                     
    1341/    4885 : CD 85 48            TSTBRK:		call	sub_5FBF
    1342/    4888 : C8                  		ret	z
    1343/    4889 : FE 13               		cp	13h
    1344/    488B : CC 8B 48            		call	z, unk_8	; inch
    1345/    488E : FE 12               		cp	12h
    1346/    4890 :                     
    1347/    4890 : C0                  STOP:   RET     NZ              ; Exit if anything else
    1348/    4891 : F6                  unk_4891:        DB   0F6H            ; Flag "STOP"
    1349/    4892 : C0                  PEND:   RET     NZ              ; Exit if anything else
    1350/    4893 : 22 CA 60            	LD      (BRKLIN),HL     ; Save point of break
    1351/    4896 : 21                  	DB   21H             ; Skip "OR 11111111B"
    1352/    4897 : F6 FF               INPBRK: OR      11111111B       ; Flag "Break" wanted
    1353/    4899 : C1                  	POP     BC              ; Return not needed and more
    1354/    489A : 2A 58 60            ENDPRG: LD      HL,(LINEAT)     ; Get current line number
    1355/    489D : F5                  	PUSH    AF              ; Save STOP / END status
    1356/    489E : 7D                  	LD      A,L             ; Is it direct break?
    1357/    489F : A4                  	AND     H
    1358/    48A0 : 3C                  	INC     A               ; Line is -1 if direct break
    1359/    48A1 : 28 FE               	Jr      Z,NOLIN         ; Yes - No line number
    1360/    48A3 : 22 CE 60            	LD      (ERRLIN),HL     ; Save line of break
    1361/    48A6 : 2A CA 60            	LD      HL,(BRKLIN)     ; Get point of break
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 24 - 2/19/2023 19:38:37


    1362/    48A9 : 22 D0 60            	LD      (CONTAD),HL     ; Save point to CONTinue
    1363/    48AC : AF                  NOLIN:  XOR     A
    1364/    48AD : 32 43 60            	LD      (CTLOFG),A      ; Enable output
    1365/    48B0 : CD B0 48            	CALL    STTLIN          ; Start a new line
    1366/    48B3 : F1                  	POP     AF              ; Restore STOP / END status
    1367/    48B4 : 21 49 43            	LD      HL,BRKMSG       ; "Break" message
    1368/    48B7 : C2 A4 43            	JP      NZ,ERRIN        ; "in line" wanted?
    1369/    48BA : C3 BB 43            	JP      PRNTOK          ; Go to command mode
    1370/    48BD :                     
    1371/    48BD : 2A D0 60            CONT:   LD      HL,(CONTAD)     ; Get CONTinue address
    1372/    48C0 : 7C                  	LD      A,H             ; Is it zero?
    1373/    48C1 : B5                  	OR      L
    1374/    48C2 : 1E 20               	LD      E,CN            ; ?CN Error
    1375/    48C4 : CA 84 43            	JP      Z,ERROR         ; Yes - output "?CN Error"
    1376/    48C7 : EB                  	EX      DE,HL           ; Save code string address
    1377/    48C8 : 2A CE 60            	LD      HL,(ERRLIN)     ; Get line of last break
    1378/    48CB : 22 58 60            	LD      (LINEAT),HL     ; Set up current line number
    1379/    48CE : EB                  	EX      DE,HL           ; Restore code string address
    1380/    48CF : C9                  	RET                     ; CONTinue where left off
    1381/    48D0 :                     
    1382/    48D0 : CD 5C 48            FPSINT: CALL    GETCHR          ; Get next character
    1383/    48D3 : CD D3 48            POSINT: CALL    GETNUM          ; Get integer 0 to 32767
    1384/    48D6 : CD D6 48            DEPINT: CALL    TSTSGN          ; Test sign of FPREG
    1385/    48D9 : FA D9 48            	JP      M,FCERR         ; Negative - ?FC Error
    1386/    48DC : 3A E3 60            DEINT:  LD      A,(FPEXP)       ; Get integer value to DE
    1387/    48DF : FE 90               	CP      80H+16          ; Exponent in range (16 bits)?
    1388/    48E1 : DA E1 48            	JP      C,FPINT         ; Yes - convert it
    1389/    48E4 : 01 80 90            	LD      BC,9080H        ; BCDE = -32768
    1390/    48E7 : 11 00 00            	LD      DE,0000
    1391/    48EA : E5                  	PUSH    HL              ; Save code string address
    1392/    48EB : CD EB 48            	CALL    CMPNUM          ; Compare FPREG with BCDE
    1393/    48EE : E1                  	POP     HL              ; Restore code string address
    1394/    48EF : 51                  	LD      D,C             ; MSB to D
    1395/    48F0 : C8                  	RET     Z               ; Return if in range
    1396/    48F1 : 1E 08               FCERR:  LD      E,FC            ; ?FC Error
    1397/    48F3 : C3 84 43            	JP      ERROR           ; Output error-
    1398/    48F6 :                     
    1399/    48F6 : 2B                  ATOH:   DEC     HL              ; ASCII number to DE binary
    1400/    48F7 : 11 00 00            GETLN:  LD      DE,0            ; Get number to DE
    1401/    48FA : CD 5C 48            GTLNLP: CALL    GETCHR          ; Get next character
    1402/    48FD : D0                  	RET     NC              ; Exit if not a digit
    1403/    48FE : E5                  	PUSH    HL              ; Save code string address
    1404/    48FF : F5                  	PUSH    AF              ; Save digit
    1405/    4900 : 21 98 19            	LD      HL,65529/10     ; Largest number 65529
    1406/    4903 : CD 75 46            	CALL    CPDEHL          ; Number in range?
    1407/    4906 : DA 70 43            	JP      C,SNERR         ; No - ?SN Error
    1408/    4909 : 62                  	LD      H,D             ; HL = Number
    1409/    490A : 6B                  	LD      L,E
    1410/    490B : 19                  	ADD     HL,DE           ; Times 2
    1411/    490C : 29                  	ADD     HL,HL           ; Times 4
    1412/    490D : 19                  	ADD     HL,DE           ; Times 5
    1413/    490E : 29                  	ADD     HL,HL           ; Times 10
    1414/    490F : F1                  	POP     AF              ; Restore digit
    1415/    4910 : D6 30               	SUB     '0'             ; Make it 0 to 9
    1416/    4912 : 5F                  	LD      E,A             ; DE = Value of digit
    1417/    4913 : 16 00               	LD      D,0
    1418/    4915 : 19                  	ADD     HL,DE           ; Add to number
    1419/    4916 : EB                  	EX      DE,HL           ; Number to DE
    1420/    4917 : E1                  	POP     HL              ; Restore code string address
    1421/    4918 : 18 E0               	Jr      GTLNLP          ; Go to next character
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 25 - 2/19/2023 19:38:37


    1422/    491A :                     
    1423/    491A : CA 42 46            CLEAR:  JP      Z,INTVAR        ; Just "CLEAR" Keep parameters
    1424/    491D : CD D3 48            	CALL    POSINT          ; Get integer 0 to 32767 to DE
    1425/    4920 : 2B                  	DEC     HL              ; Cancel increment
    1426/    4921 : CD 5C 48            	CALL    GETCHR          ; Get next character
    1427/    4924 : E5                  	PUSH    HL              ; Save code string address
    1428/    4925 : 2A AB 60            	LD      HL,(LSTRAM)     ; Get end of RAM
    1429/    4928 : 28 FE               	Jr      Z,STORED        ; No value given - Use stored
    1430/    492A : E1                  	POP     HL              ; Restore code string address
    1431/    492B : CD 7B 46            	CALL    CHKSYN          ; Check for comma
    1432/    492E : 2C                  	DB      ','
    1433/    492F : D5                  	PUSH    DE              ; Save number
    1434/    4930 : CD D3 48            	CALL    POSINT          ; Get integer 0 to 32767
    1435/    4933 : 2B                  	DEC     HL              ; Cancel increment
    1436/    4934 : CD 5C 48            	CALL    GETCHR          ; Get next character
    1437/    4937 : C2 70 43            	JP      NZ,SNERR        ; ?SN Error if more on line
    1438/    493A : E3                  	EX      (SP),HL         ; Save code string address
    1439/    493B : EB                  	EX      DE,HL           ; Number to DE
    1440/    493C : 7D                  STORED: LD      A,L             ; Get LSB of new RAM top
    1441/    493D : 93                  	SUB     E               ; Subtract LSB of string space
    1442/    493E : 5F                  	LD      E,A             ; Save LSB
    1443/    493F : 7C                  	LD      A,H             ; Get MSB of new RAM top
    1444/    4940 : 9A                  	SBC     A,D             ; Subtract MSB of string space
    1445/    4941 : 57                  	LD      D,A             ; Save MSB
    1446/    4942 : DA 66 43            	JP      C,OMERR         ; ?OM Error if not enough mem
    1447/    4945 : E5                  	PUSH    HL              ; Save RAM top
    1448/    4946 : 2A D2 60            	LD      HL,(PROGND)     ; Get program end
    1449/    4949 : 01 28 00            	LD      BC,40           ; 40 Bytes minimum working RAM
    1450/    494C : 09                  	ADD     HL,BC           ; Get lowest address
    1451/    494D : CD 75 46            	CALL    CPDEHL          ; Enough memory?
    1452/    4950 : D2 66 43            	JP      NC,OMERR        ; No - ?OM Error
    1453/    4953 : EB                  	EX      DE,HL           ; RAM top to HL
    1454/    4954 : 22 56 60            	LD      (STRSPC),HL     ; Set new string space
    1455/    4957 : E1                  	POP     HL              ; End of memory to use
    1456/    4958 : 22 AB 60            	LD      (LSTRAM),HL     ; Set new top of RAM
    1457/    495B : E1                  	POP     HL              ; Restore code string address
    1458/    495C : C3 42 46            	JP      INTVAR          ; Initialise variables
    1459/    495F :                     
    1460/    495F : CA 3E 46            RUN:    JP      Z,RUNFST        ; RUN from start if just RUN
    1461/    4962 : CD 42 46            	CALL    INTVAR          ; Initialise variables
    1462/    4965 : 01 FD 47            	LD      BC,RUNCNT       ; Execution driver loop
    1463/    4968 : 18 FE               	Jr      RUNLIN          ; RUN from line number
    1464/    496A :                     
    1465/    496A : 0E 03               GOSUB:  LD      C,3             ; 3 Levels of stack needed
    1466/    496C : CD 4F 43            	CALL    CHKSTK          ; Check for 3 levels of stack
    1467/    496F : C1                  	POP     BC              ; Get return address
    1468/    4970 : E5                  	PUSH    HL              ; Save code string for RETURN
    1469/    4971 : E5                  	PUSH    HL              ; And for GOSUB routine
    1470/    4972 : 2A 58 60            	LD      HL,(LINEAT)     ; Get current line
    1471/    4975 : E3                  	EX      (SP),HL         ; Into stack - Code string out
    1472/    4976 : 3E 8C               	LD      A,ZGOSUB        ; "GOSUB" token
    1473/    4978 : F5                  	PUSH    AF              ; Save token
    1474/    4979 : 33                  	INC     SP              ; Don't save flags
    1475/    497A :                     
    1476/    497A : C5                  RUNLIN: PUSH    BC              ; Save return address
    1477/    497B : CD F6 48            GOTO:   CALL    ATOH            ; ASCII number to DE binary
    1478/    497E : CD 7E 49            	CALL    REM             ; Get end of line
    1479/    4981 : E5                  	PUSH    HL              ; Save end of line
    1480/    4982 : 2A 58 60            	LD      HL,(LINEAT)     ; Get current line
    1481/    4985 : CD 75 46            	CALL    CPDEHL          ; Line after current?
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 26 - 2/19/2023 19:38:37


    1482/    4988 : E1                  	POP     HL              ; Restore end of line
    1483/    4989 : 23                  	INC     HL              ; Start of next line
    1484/    498A : DC B3 44            	CALL    C,SRCHLP        ; Line is after current line
    1485/    498D : D4 B0 44            	CALL    NC,SRCHLN       ; Line is before current line
    1486/    4990 : 60                  	LD      H,B             ; Set up code string address
    1487/    4991 : 69                  	LD      L,C
    1488/    4992 : 2B                  	DEC     HL              ; Incremented after
    1489/    4993 : D8                  	RET     C               ; Line found
    1490/    4994 : 1E 0E               ULERR:  LD      E,UL            ; ?UL Error
    1491/    4996 : C3 84 43            	JP      ERROR           ; Output error message
    1492/    4999 :                     
    1493/    4999 : C0                  RETURN: RET     NZ              ; Return if not just RETURN
    1494/    499A : 16 FF               	LD      D,-1            ; Flag "GOSUB" search
    1495/    499C : CD 66 47            	CALL    BAKSTK          ; Look "GOSUB" block
    1496/    499F : F9                  	LD      SP,HL           ; Kill all FORs in subroutine
    1497/    49A0 : FE 8C               	CP      ZGOSUB          ; Test for "GOSUB" token
    1498/    49A2 : 1E 04               	LD      E,RG            ; ?RG Error
    1499/    49A4 : C2 84 43            	JP      NZ,ERROR        ; Error if no "GOSUB" found
    1500/    49A7 : E1                  	POP     HL              ; Get RETURN line number
    1501/    49A8 : 22 58 60            	LD      (LINEAT),HL     ; Save as current
    1502/    49AB : 23                  	INC     HL              ; Was it from direct statement?
    1503/    49AC : 7C                  	LD      A,H
    1504/    49AD : B5                  	OR      L               ; Return to line
    1505/    49AE : 20 FE               	Jr      NZ,RETLIN       ; No - Return to line
    1506/    49B0 : 3A C8 60            	LD      A,(LSTBIN)      ; Any INPUT in subroutine?
    1507/    49B3 : B7                  	OR      A               ; If so buffer is corrupted
    1508/    49B4 : C2 BA 43            	JP      NZ,POPNOK       ; Yes - Go to command mode
    1509/    49B7 : 21 FD 47            RETLIN: LD      HL,RUNCNT       ; Execution driver loop
    1510/    49BA : E3                  	EX      (SP),HL         ; Into stack - Code string out
    1511/    49BB : 3E                  	DB      3EH             ; Skip "POP HL"
    1512/    49BC : E1                  NXTDTA: POP     HL              ; Restore code string address
    1513/    49BD :                     
    1514/    49BD : 01 3A               DATA:   DB      01H,3AH         ; ':' End of statement
    1515/    49BF : 0E 00               REM:    LD      C,0             ; 00  End of statement
    1516/    49C1 : 06 00               	LD      B,0
    1517/    49C3 : 79                  NXTSTL: LD      A,C             ; Statement and byte
    1518/    49C4 : 48                  	LD      C,B
    1519/    49C5 : 47                  	LD      B,A             ; Statement end byte
    1520/    49C6 : 7E                  NXTSTT: LD      A,(HL)          ; Get byte
    1521/    49C7 : B7                  	OR      A               ; End of line?
    1522/    49C8 : C8                  	RET     Z               ; Yes - Exit
    1523/    49C9 : B8                  	CP      B               ; End of statement?
    1524/    49CA : C8                  	RET     Z               ; Yes - Exit
    1525/    49CB : 23                  	INC     HL              ; Next byte
    1526/    49CC : FE 22               	CP      '"'             ; Literal string?
    1527/    49CE : 28 F3               	Jr      Z,NXTSTL        ; Yes - Look for another '"'
    1528/    49D0 : 18 F4               	Jr      NXTSTT          ; Keep looking
    1529/    49D2 :                     
    1530/    49D2 : CD D2 49            LET:    CALL    GETVAR          ; Get variable name
    1531/    49D5 : CD 7B 46            	CALL    CHKSYN          ; Make sure "=" follows
    1532/    49D8 : B4                  	DB      ZEQUAL          ; "=" token
    1533/    49D9 : D5                  	PUSH    DE              ; Save address of variable
    1534/    49DA : 3A A9 60            	LD      A,(TYPE)        ; Get data type
    1535/    49DD : F5                  	PUSH    AF              ; Save type
    1536/    49DE : CD DE 49            	CALL    EVAL            ; Evaluate expression
    1537/    49E1 : F1                  	POP     AF              ; Restore type
    1538/    49E2 : E3                  	EX      (SP),HL         ; Save code - Get var addr
    1539/    49E3 : 22 CA 60            	LD      (BRKLIN),HL     ; Save address of variable
    1540/    49E6 : 1F                  	RRA                     ; Adjust type
    1541/    49E7 : CD E7 49            	CALL    CHKTYP          ; Check types are the same
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 27 - 2/19/2023 19:38:37


    1542/    49EA : 28 FE               	Jr      Z,LETNUM        ; Numeric - Move value
    1543/    49EC : E5                  LETSTR: PUSH    HL              ; Save address of string var
    1544/    49ED : 2A E0 60            	LD      HL,(FPREG)      ; Pointer to string entry
    1545/    49F0 : E5                  	PUSH    HL              ; Save it on stack
    1546/    49F1 : 23                  	INC     HL              ; Skip over length
    1547/    49F2 : 23                  	INC     HL
    1548/    49F3 : 5E                  	LD      E,(HL)          ; LSB of string address
    1549/    49F4 : 23                  	INC     HL
    1550/    49F5 : 56                  	LD      D,(HL)          ; MSB of string address
    1551/    49F6 : 2A 5A 60            	LD      HL,(BASTXT)     ; Point to start of program
    1552/    49F9 : CD 75 46            	CALL    CPDEHL          ; Is string before program?
    1553/    49FC : 30 FE               	Jr      NC,CRESTR       ; Yes - Create string entry
    1554/    49FE : 2A 56 60            	LD      HL,(STRSPC)     ; Point to string space
    1555/    4A01 : CD 75 46            	CALL    CPDEHL          ; Is string literal in program?
    1556/    4A04 : D1                  	POP     DE              ; Restore address of string
    1557/    4A05 : 30 FE               	Jr      NC,MVSTPT       ; Yes - Set up pointer
    1558/    4A07 : 21 BB 60            	LD      HL,TMPSTR       ; Temporary string pool
    1559/    4A0A : CD 75 46            	CALL    CPDEHL          ; Is string in temporary pool?
    1560/    4A0D : 30 FE               	Jr      NC,MVSTPT       ; No - Set up pointer
    1561/    4A0F : 3E                  	DB   3EH             ; Skip "POP DE"
    1562/    4A10 : D1                  CRESTR: POP     DE              ; Restore address of string
    1563/    4A11 : CD 11 4A            	CALL    BAKTMP          ; Back to last tmp-str entry
    1564/    4A14 : EB                  	EX      DE,HL           ; Address of string entry
    1565/    4A15 : CD 15 4A            	CALL    SAVSTR          ; Save string in string area
    1566/    4A18 : CD 18 4A            MVSTPT: CALL    BAKTMP          ; Back to last tmp-str entry
    1567/    4A1B : E1                  	POP     HL              ; Get string pointer
    1568/    4A1C : CD 1C 4A            	CALL    DETHL4          ; Move string pointer to var
    1569/    4A1F : E1                  	POP     HL              ; Restore code string address
    1570/    4A20 : C9                  	RET
    1571/    4A21 :                     
    1572/    4A21 : E5                  LETNUM: PUSH    HL              ; Save address of variable
    1573/    4A22 : CD 22 4A            	CALL    FPTHL           ; Move value to variable
    1574/    4A25 : D1                  	POP     DE              ; Restore address of variable
    1575/    4A26 : E1                  	POP     HL              ; Restore code string address
    1576/    4A27 : C9                  	RET
    1577/    4A28 :                     
    1578/    4A28 : CD 28 4A            ON:     CALL    GETINT          ; Get integer 0-255
    1579/    4A2B : 7E                  	LD      A,(HL)          ; Get "GOTO" or "GOSUB" token
    1580/    4A2C : 47                  	LD      B,A             ; Save in B
    1581/    4A2D : FE 8C               	CP      ZGOSUB          ; "GOSUB" token?
    1582/    4A2F : 28 FE               	Jr      Z,ONGO          ; Yes - Find line number
    1583/    4A31 : CD 7B 46            	CALL    CHKSYN          ; Make sure it's "GOTO"
    1584/    4A34 : 88                  	DB   ZGOTO           ; "GOTO" token
    1585/    4A35 : 2B                  	DEC     HL              ; Cancel increment
    1586/    4A36 : 4B                  ONGO:   LD      C,E             ; Integer of branch value
    1587/    4A37 : 0D                  ONGOLP: DEC     C               ; Count branches
    1588/    4A38 : 78                  	LD      A,B             ; Get "GOTO" or "GOSUB" token
    1589/    4A39 : CA 39 48            	JP      Z,ONJMP         ; Go to that line if right one
    1590/    4A3C : CD F7 48            	CALL    GETLN           ; Get line number to DE
    1591/    4A3F : FE 2C               	CP      ','             ; Another line number?
    1592/    4A41 : C0                  	RET     NZ              ; No - Drop through
    1593/    4A42 : 18 F3               	Jr      ONGOLP          ; Yes - loop
    1594/    4A44 :                     
    1595/    4A44 : CD 44 4A            IF:     CALL    EVAL            ; Evaluate expression
    1596/    4A47 : 7E                  	LD      A,(HL)          ; Get token
    1597/    4A48 : FE 88               	CP      ZGOTO           ; "GOTO" token?
    1598/    4A4A : 28 FE               	Jr      Z,IFGO          ; Yes - Get line
    1599/    4A4C : CD 7B 46            	CALL    CHKSYN          ; Make sure it's "THEN"
    1600/    4A4F : A9                  	DB      ZTHEN           ; "THEN" token
    1601/    4A50 : 2B                  	DEC     HL              ; Cancel increment
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 28 - 2/19/2023 19:38:37


    1602/    4A51 : CD 51 4A            IFGO:   CALL    TSTNUM          ; Make sure it's numeric
    1603/    4A54 : CD 54 4A            	CALL    TSTSGN          ; Test state of expression
    1604/    4A57 : CA BF 49            	JP      Z,REM           ; False - Drop through
    1605/    4A5A : CD 5C 48            	CALL    GETCHR          ; Get next character
    1606/    4A5D : DA 7B 49            	JP      C,GOTO          ; Number - GOTO that line
    1607/    4A60 : C3 38 48            	JP      IFJMP           ; Otherwise do statement
    1608/    4A63 :                     
    1609/    4A63 : 2B                  MRPRNT: DEC     HL              ; DEC 'cos GETCHR INCs
    1610/    4A64 : CD 5C 48            	CALL    GETCHR          ; Get next character
    1611/    4A67 : 18 FE               	jr	PRINT
    1612/    4A69 : 28 FE               PRINT:  Jr      Z,PRNTCRLF      ; CRLF if just PRINT
    1613/    4A6B : C8                  PRNTLP: RET     Z               ; End of list - Exit
    1614/    4A6C : FE A5               	CP      ZTAB            ; "TAB(" token?
    1615/    4A6E : 28 FE               	Jr      Z,DOTAB         ; Yes - Do TAB routine
    1616/    4A70 : FE A8               	CP      ZSPC            ; "SPC(" token?
    1617/    4A72 : 28 FE               	Jr      Z,DOTAB         ; Yes - Do SPC routine
    1618/    4A74 : E5                  	PUSH    HL              ; Save code string address
    1619/    4A75 : FE 2C               	CP      ','             ; Comma?
    1620/    4A77 : 28 FE               	Jr      Z,DOCOM         ; Yes - Move to next zone
    1621/    4A79 : FE 3B               	CP      59 ;";"         ; Semi-colon?
    1622/    4A7B : CA 7B 4A            	JP      Z,NEXITM        ; Do semi-colon routine
    1623/    4A7E : C1                  	POP     BC              ; Code string address to BC
    1624/    4A7F : CD 7F 4A            	CALL    EVAL            ; Evaluate expression
    1625/    4A82 : E5                  	PUSH    HL              ; Save code string address
    1626/    4A83 : 3A A9 60            	LD      A,(TYPE)        ; Get variable type
    1627/    4A86 : B7                  	OR      A               ; Is it a string variable?
    1628/    4A87 : 20 FE               	Jr      NZ,PRNTST       ; Yes - Output string contents
    1629/    4A89 : CD 89 4A            	CALL    NUMASC          ; Convert number to text
    1630/    4A8C : CD 8C 4A            	CALL    CRTST           ; Create temporary string
    1631/    4A8F : 36 20               	LD      (HL),' '        ; Followed by a space
    1632/    4A91 : 2A E0 60            	LD      HL,(FPREG)      ; Get length of output
    1633/    4A94 : 34                  	INC     (HL)            ; Plus 1 for the space
    1634/    4A95 : 2A E0 60            	LD      HL,(FPREG)      ; < Not needed >
    1635/    4A98 : 3A 41 60            	LD      A,(LWIDTH)      ; Get width of line
    1636/    4A9B : 47                  	LD      B,A             ; To B
    1637/    4A9C : 04                  	INC     B               ; Width 255 (No limit)?
    1638/    4A9D : 28 FE               	Jr      Z,PRNTNB        ; Yes - Output number string
    1639/    4A9F : 04                  	INC     B               ; Adjust it
    1640/    4AA0 : 3A A7 60            	LD      A,(CURPOS)      ; Get cursor position
    1641/    4AA3 : 86                  	ADD     A,(HL)          ; Add length of string
    1642/    4AA4 : 3D                  	DEC     A               ; Adjust it
    1643/    4AA5 : B8                  	CP      B               ; Will output fit on this line?
    1644/    4AA6 : D4 A6 4A            	CALL    NC,PRNTCRLF     ; No - CRLF first
    1645/    4AA9 : CD A9 4A            PRNTNB: CALL    PRS1            ; Output string at (HL)
    1646/    4AAC : AF                  	XOR     A               ; Skip CALL by setting 'z' flag
    1647/    4AAD : C4 AD 4A            PRNTST: CALL    NZ,PRS1         ; Output string at (HL)
    1648/    4AB0 : E1                  	POP     HL              ; Restore code string address
    1649/    4AB1 : 18 B0               	Jr      MRPRNT          ; See if more to PRINT
    1650/    4AB3 :                     
    1651/    4AB3 : 3A A7 60            STTLIN: LD      A,(CURPOS)      ; Make sure on new line
    1652/    4AB6 : B7                  	OR      A               ; Already at start?
    1653/    4AB7 : C8                  	RET     Z               ; Yes - Do nothing
    1654/    4AB8 : 18 FE               	Jr      PRNTCRLF        ; Start a new line
    1655/    4ABA :                     
    1656/    4ABA : 36 00               ENDINP: LD      (HL),0          ; Mark end of buffer
    1657/    4ABC : 21 5C 60            	LD      HL,BUFFER-1     ; Point to buffer
    1658/    4ABF :                     
    1659/    4ABF :                     PRNTCRLF: 
    1660/    4ABF : AF                  	xor	a
    1661/    4AC0 : 32 43 60            	ld      (CTLOFG), a
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 29 - 2/19/2023 19:38:37


    1662/    4AC3 : 3E 0D               	LD    A,CR            ; Load a CR
    1663/    4AC5 : CD 8E 46            	CALL    OUTC            ; Output character
    1664/    4AC8 : 7F                  DONULL: LD      A,A
    1665/    4AC9 : 97                  	SUB     A               ; Set to position 0
    1666/    4ACA : 32 A7 60            	LD      (CURPOS),A      ; Store it
    1667/    4ACD : 3A 40 60            	LD      A,(NULLS)       ; Get number of nulls
    1668/    4AD0 : 3D                  NULLP:  DEC     A               ; Count them
    1669/    4AD1 : C8                  	RET     Z               ; Return if done
    1670/    4AD2 : 3E 00               	ld     A,0               ; Load a null
    1671/    4AD4 : CD 8E 46            	CALL    OUTC            ; Output it
    1672/    4AD7 : 18 F7               	Jr      NULLP           ; Keep counting
    1673/    4AD9 :                     
    1674/    4AD9 : 00                  	db	0
    1675/    4ADA :                     
    1676/    4ADA : 3A 42 60            DOCOM:  LD      A,(COMMAN)      ; Get comma width
    1677/    4ADD : 47                  	LD      B,A             ; Save in B
    1678/    4ADE : 3A A7 60            	LD      A,(CURPOS)      ; Get current position
    1679/    4AE1 : B8                  	CP      B               ; Within the limit?
    1680/    4AE2 : D4 BF 4A            	CALL    NC,PRNTCRLF     ; No - output CRLF
    1681/    4AE5 : 30 FE               	Jr      NC,NEXITM       ; Get next item
    1682/    4AE7 : D6 0E               ZONELP: SUB     14              ; Next zone of 14 characters
    1683/    4AE9 : 30 FC               	Jr      NC,ZONELP       ; Repeat if more zones
    1684/    4AEB : 2F                  	CPL                     ; Number of spaces to output
    1685/    4AEC : 18 FE               	Jr      ASPCS           ; Output them
    1686/    4AEE :                     
    1687/    4AEE : F5                  DOTAB:  PUSH    AF              ; Save token
    1688/    4AEF : CD EF 4A            	CALL    FNDNUM          ; Evaluate expression
    1689/    4AF2 : CD 7B 46            	CALL    CHKSYN          ; Make sure ")" follows
    1690/    4AF5 : 29                  	DB   ")"
    1691/    4AF6 : 2B                  	DEC     HL              ; Back space on to ")"
    1692/    4AF7 : F1                  	POP     AF              ; Restore token
    1693/    4AF8 : D6 A8               	SUB     ZSPC            ; Was it "SPC(" ?
    1694/    4AFA : E5                  	PUSH    HL              ; Save code string address
    1695/    4AFB : 28 FE               	Jr      Z,DOSPC         ; Yes - Do 'E' spaces
    1696/    4AFD : 3A A7 60            	LD      A,(CURPOS)      ; Get current position
    1697/    4B00 : 2F                  DOSPC:  CPL                     ; Number of spaces to print to
    1698/    4B01 : 83                  	ADD     A,E             ; Total number to print
    1699/    4B02 : 30 FE               	Jr      NC,NEXITM       ; TAB < Current POS(X)
    1700/    4B04 : 3C                  ASPCS:  INC     A               ; Output A spaces
    1701/    4B05 : 47                  	LD      B,A             ; Save number to print
    1702/    4B06 : 3E 20               	LD      A,' '           ; Space
    1703/    4B08 : CD 8E 46            SPCLP:  CALL    OUTC            ; Output character in A
    1704/    4B0B : 10 FB               	djnz	SPCLP        ; Repeat if more
    1705/    4B0D : E1                  NEXITM: POP     HL              ; Restore code string address
    1706/    4B0E : CD 5C 48            	CALL    GETCHR          ; Get next character
    1707/    4B11 : C3 6B 4A            	JP      PRNTLP          ; More to print
    1708/    4B14 :                     
    1709/    4B14 : CD 14 4B            WIDTH:  CALL    GETINT          ; Get integer 0-255
    1710/    4B17 : 7B                  	LD      A,E             ; Width to A
    1711/    4B18 : 32 41 60            	LD      (LWIDTH),A      ; Set width
    1712/    4B1B : C9                  	RET
    1713/    4B1C :                     
    1714/    4B1C : CD 1C 4B            NULL:   CALL    GETINT          ; Get integer 0-255
    1715/    4B1F : C0                  	RET     NZ              ; Return if bad value
    1716/    4B20 : 3C                  	inc	a
    1717/    4B21 : 32 40 60            	LD      (NULLS),A       ; Set nulls number
    1718/    4B24 : C9                  	RET
    1719/    4B25 :                     
    1720/    4B25 : 3F 72 65 64 6F 20   REDO:   DB   "?redo from start",CR,0
                    66 72 6F 6D 20 73 
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 30 - 2/19/2023 19:38:37


                    74 61 72 74 0D 00 
    1721/    4B37 :                     
    1722/    4B37 : 3A C9 60            BADINP: LD      A,(READFG)      ; READ or INPUT?
    1723/    4B3A : B7                  	OR      A
    1724/    4B3B : C2 6A 43            	JP      NZ,DATSNR       ; READ - ?SN Error
    1725/    4B3E : C1                  	POP     BC              ; Throw away code string addr
    1726/    4B3F : 21 25 4B            	LD      HL,REDO         ; "Redo from start" message
    1727/    4B42 : CD 42 4B            	CALL    PRS             ; Output string
    1728/    4B45 : C3 71 46            	JP      DOAGN           ; Do last INPUT again
    1729/    4B48 :                     
    1730/    4B48 : CD 48 4B            INPUT:  CALL    IDTEST          ; Test for illegal direct
    1731/    4B4B : 7E                  	LD      A,(HL)          ; Get character after "INPUT"
    1732/    4B4C : FE 22               	CP      '"'             ; Is there a prompt string?
    1733/    4B4E : 3E 00               	LD      A,0             ; Clear A and leave flags
    1734/    4B50 : 32 43 60            	LD      (CTLOFG),A      ; Enable output
    1735/    4B53 : 20 FE               	Jr      NZ,NOPMPT       ; No prompt - get input
    1736/    4B55 : CD 55 4B            	CALL    QTSTR           ; Get string terminated by '"'
    1737/    4B58 : CD 7B 46            	CALL    CHKSYN          ; Check for ';' after prompt
    1738/    4B5B : 3B                  	DB   ';'
    1739/    4B5C : E5                  	PUSH    HL              ; Save code string address
    1740/    4B5D : CD 5D 4B            	CALL    PRS1            ; Output prompt string
    1741/    4B60 : 3E                  	DB   3EH             ; Skip "PUSH HL"
    1742/    4B61 : E5                  NOPMPT: PUSH    HL              ; Save code string address
    1743/    4B62 : CD C7 46            	CALL    PROMPT          ; Get input with "? " prompt
    1744/    4B65 : C1                  	POP     BC              ; Restore code string address
    1745/    4B66 : DA 97 48            	JP      C,INPBRK        ; Break pressed - Exit
    1746/    4B69 : 23                  	INC     HL              ; Next byte
    1747/    4B6A : 7E                  	LD      A,(HL)          ; Get it
    1748/    4B6B : B7                  	OR      A               ; End of line?
    1749/    4B6C : 2B                  	DEC     HL              ; Back again
    1750/    4B6D : C5                  	PUSH    BC              ; Re-save code string address
    1751/    4B6E : CA BC 49            	JP      Z,NXTDTA        ; Yes - Find next DATA stmt
    1752/    4B71 : 36 2C               	LD      (HL),','        ; Store comma as separator
    1753/    4B73 : 18 FE               	Jr      NXTITM          ; Get next item
    1754/    4B75 :                     
    1755/    4B75 : E5                  READ:   PUSH    HL              ; Save code string address
    1756/    4B76 : 2A D8 60            	LD      HL,(NXTDAT)     ; Next DATA statement
    1757/    4B79 : F6                  	DB   0F6H            ; Flag "READ"
    1758/    4B7A : AF                  NXTITM: XOR     A               ; Flag "INPUT"
    1759/    4B7B : 32 C9 60            	LD      (READFG),A      ; Save "READ"/"INPUT" flag
    1760/    4B7E : E3                  	EX      (SP),HL         ; Get code str' , Save pointer
    1761/    4B7F : 18 FE               	Jr      GTVLUS          ; Get values
    1762/    4B81 :                     
    1763/    4B81 : CD 7B 46            NEDMOR: CALL    CHKSYN          ; Check for comma between items
    1764/    4B84 : 2C                  	DB      ','
    1765/    4B85 : CD 85 4B            GTVLUS: CALL    GETVAR          ; Get variable name
    1766/    4B88 : E3                  	EX      (SP),HL         ; Save code str" , Get pointer
    1767/    4B89 : D5                  	PUSH    DE              ; Save variable address
    1768/    4B8A : 7E                  	LD      A,(HL)          ; Get next "INPUT"/"DATA" byte
    1769/    4B8B : FE 2C               	CP      ','             ; Comma?
    1770/    4B8D : 28 FE               	Jr      Z,ANTVLU        ; Yes - Get another value
    1771/    4B8F : 3A C9 60            	LD      A,(READFG)      ; Is it READ?
    1772/    4B92 : B7                  	OR      A
    1773/    4B93 : 20 FE               	Jr      NZ,FDTLP        ; Yes - Find next DATA stmt
    1774/    4B95 : 3E 3F               	LD      A,'?'           ; More INPUT needed
    1775/    4B97 : CD 8E 46            	CALL    OUTC            ; Output character
    1776/    4B9A : CD C7 46            	CALL    PROMPT          ; Get INPUT with prompt
    1777/    4B9D : D1                  	POP     DE              ; Variable address
    1778/    4B9E : C1                  	POP     BC              ; Code string address
    1779/    4B9F : DA 97 48            	JP      C,INPBRK        ; Break pressed
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 31 - 2/19/2023 19:38:37


    1780/    4BA2 : 23                  	INC     HL              ; Point to next DATA byte
    1781/    4BA3 : 7E                  	LD      A,(HL)          ; Get byte
    1782/    4BA4 : B7                  	OR      A               ; Is it zero (No input) ?
    1783/    4BA5 : 2B                  	DEC     HL              ; Back space INPUT pointer
    1784/    4BA6 : C5                  	PUSH    BC              ; Save code string address
    1785/    4BA7 : CA BC 49            	JP      Z,NXTDTA        ; Find end of buffer
    1786/    4BAA : D5                  	PUSH    DE              ; Save variable address
    1787/    4BAB : 3A A9 60            ANTVLU: LD      A,(TYPE)        ; Check data type
    1788/    4BAE : B7                  	OR      A               ; Is it numeric?
    1789/    4BAF : 28 FE               	Jr      Z,INPBIN        ; Yes - Convert to binary
    1790/    4BB1 : CD 5C 48            	CALL    GETCHR          ; Get next character
    1791/    4BB4 : 57                  	LD      D,A             ; Save input character
    1792/    4BB5 : 47                  	LD      B,A             ; Again
    1793/    4BB6 : FE 22               	CP      '"'             ; Start of literal sting?
    1794/    4BB8 : 28 FE               	Jr      Z,STRENT        ; Yes - Create string entry
    1795/    4BBA : 3A C9 60            	LD      A,(READFG)      ; "READ" or "INPUT" ?
    1796/    4BBD : B7                  	OR      A
    1797/    4BBE : 57                  	LD      D,A             ; Save 00 if "INPUT"
    1798/    4BBF : 28 FE               	Jr      Z,ITMSEP        ; "INPUT" - End with 00
    1799/    4BC1 : 16 3A               	LD      D,':'           ; "DATA" - End with 00 or ':'
    1800/    4BC3 : 06 2C               ITMSEP: LD      B,','           ; Item separator
    1801/    4BC5 : 2B                  	DEC     HL              ; Back space for DTSTR
    1802/    4BC6 : CD C6 4B            STRENT: CALL    DTSTR           ; Get string terminated by D
    1803/    4BC9 : EB                  	EX      DE,HL           ; String address to DE
    1804/    4BCA : 21 CA 4B            	LD      HL,LTSTND       ; Where to go after LETSTR
    1805/    4BCD : E3                  	EX      (SP),HL         ; Save HL , get input pointer
    1806/    4BCE : D5                  	PUSH    DE              ; Save address of string
    1807/    4BCF : C3 EC 49            	JP      LETSTR          ; Assign string to variable
    1808/    4BD2 :                     
    1809/    4BD2 : CD 5C 48            INPBIN: CALL    GETCHR          ; Get next character
    1810/    4BD5 : CD D5 4B            	CALL    ASCTFP          ; Convert ASCII to FP number
    1811/    4BD8 : E3                  	EX      (SP),HL         ; Save input ptr, Get var addr
    1812/    4BD9 : CD D9 4B            	CALL    FPTHL           ; Move FPREG to variable
    1813/    4BDC : E1                  	POP     HL              ; Restore input pointer
    1814/    4BDD : 2B                  LTSTND: DEC     HL              ; DEC 'cos GETCHR INCs
    1815/    4BDE : CD 5C 48            	CALL    GETCHR          ; Get next character
    1816/    4BE1 : 28 FE               	Jr      Z,MORDT         ; End of line - More needed?
    1817/    4BE3 : FE 2C               	CP      ','             ; Another value?
    1818/    4BE5 : C2 37 4B            	JP      NZ,BADINP       ; No - Bad input
    1819/    4BE8 : E3                  MORDT:  EX      (SP),HL         ; Get code string address
    1820/    4BE9 : 2B                  	DEC     HL              ; DEC 'cos GETCHR INCs
    1821/    4BEA : CD 5C 48            	CALL    GETCHR          ; Get next character
    1822/    4BED : 20 92               	Jr      NZ,NEDMOR       ; More needed - Get it
    1823/    4BEF : D1                  	POP     DE              ; Restore DATA pointer
    1824/    4BF0 : 3A C9 60            	LD      A,(READFG)      ; "READ" or "INPUT" ?
    1825/    4BF3 : B7                  	OR      A
    1826/    4BF4 : EB                  	EX      DE,HL           ; DATA pointer to HL
    1827/    4BF5 : C2 80 48            	JP      NZ,UPDATA       ; Update DATA pointer if "READ"
    1828/    4BF8 : D5                  	PUSH    DE              ; Save code string address
    1829/    4BF9 : B6                  	OR      (HL)            ; More input given?
    1830/    4BFA : 21 FA 4B            	LD      HL,EXTIG        ; "?Extra ignored" message
    1831/    4BFD : C4 FD 4B            	CALL    NZ,PRS          ; Output string if extra given
    1832/    4C00 : E1                  	POP     HL              ; Restore code string address
    1833/    4C01 : C9                  	RET
    1834/    4C02 :                     
    1835/    4C02 : 3F 65 78 74 72 61   EXTIG:  DB   "?extra ignored",CR,0
                    20 69 67 6E 6F 72 
                    65 64 0D 00       
    1836/    4C12 :                     
    1837/    4C12 : CD BD 49            FDTLP:  CALL    DATA            ; Get next statement
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 32 - 2/19/2023 19:38:37


    1838/    4C15 : B7                  	OR      A               ; End of line?
    1839/    4C16 : 20 FE               	Jr      NZ,FANDT        ; No - See if DATA statement
    1840/    4C18 : 23                  	INC     HL
    1841/    4C19 : 7E                  	LD      A,(HL)          ; End of program?
    1842/    4C1A : 23                  	INC     HL
    1843/    4C1B : B6                  	OR      (HL)            ; 00 00 Ends program
    1844/    4C1C : 1E 06               	LD      E,OD            ; ?OD Error
    1845/    4C1E : CA 84 43            	JP      Z,ERROR         ; Yes - Out of DATA
    1846/    4C21 : 23                  	INC     HL
    1847/    4C22 : 5E                  	LD      E,(HL)          ; LSB of line number
    1848/    4C23 : 23                  	INC     HL
    1849/    4C24 : 56                  	LD      D,(HL)          ; MSB of line number
    1850/    4C25 : EB                  	EX      DE,HL
    1851/    4C26 : 22 C5 60            	LD      (DATLIN),HL     ; Set line of current DATA item
    1852/    4C29 : EB                  	EX      DE,HL
    1853/    4C2A : CD 5C 48            FANDT:  CALL    GETCHR          ; Get next character
    1854/    4C2D : FE 83               	CP      ZDATA           ; "DATA" token
    1855/    4C2F : 20 E1               	Jr      NZ,FDTLP        ; No "DATA" - Keep looking
    1856/    4C31 : C3 AB 4B            	JP      ANTVLU          ; Found - Convert input
    1857/    4C34 :                     
    1858/    4C34 : 11 00 00            NEXT:   LD      DE,0            ; In case no index given
    1859/    4C37 : C4 37 4C            NEXT1:  CALL    NZ,GETVAR       ; Get index address
    1860/    4C3A : 22 CA 60            	LD      (BRKLIN),HL     ; Save code string address
    1861/    4C3D : CD 66 47            	CALL    BAKSTK          ; Look for "FOR" block
    1862/    4C40 : C2 76 43            	JP      NZ,NFERR        ; No "FOR" - ?NF Error
    1863/    4C43 : F9                  	LD      SP,HL           ; Clear nested loops
    1864/    4C44 : D5                  	PUSH    DE              ; Save index address
    1865/    4C45 : 7E                  	LD      A,(HL)          ; Get sign of STEP
    1866/    4C46 : 23                  	INC     HL
    1867/    4C47 : F5                  	PUSH    AF              ; Save sign of STEP
    1868/    4C48 : D5                  	PUSH    DE              ; Save index address
    1869/    4C49 : CD 49 4C            	CALL    PHLTFP          ; Move index value to FPREG
    1870/    4C4C : E3                  	EX      (SP),HL         ; Save address of TO value
    1871/    4C4D : E5                  	PUSH    HL              ; Save address of index
    1872/    4C4E : CD 4E 4C            	CALL    ADDPHL          ; Add STEP to index value
    1873/    4C51 : E1                  	POP     HL              ; Restore address of index
    1874/    4C52 : CD 52 4C            	CALL    FPTHL           ; Move value to index variable
    1875/    4C55 : E1                  	POP     HL              ; Restore address of TO value
    1876/    4C56 : CD 56 4C            	CALL    LOADFP          ; Move TO value to BCDE
    1877/    4C59 : E5                  	PUSH    HL              ; Save address of line of FOR
    1878/    4C5A : CD 5A 4C            	CALL    CMPNUM          ; Compare index with TO value
    1879/    4C5D : E1                  	POP     HL              ; Restore address of line num
    1880/    4C5E : C1                  	POP     BC              ; Address of sign of STEP
    1881/    4C5F : 90                  	SUB     B               ; Compare with expected sign
    1882/    4C60 : CD 60 4C            	CALL    LOADFP          ; BC = Loop stmt,DE = Line num
    1883/    4C63 : 28 FE               	Jr      Z,KILFOR        ; Loop finished - Terminate it
    1884/    4C65 : EB                  	EX      DE,HL           ; Loop statement line number
    1885/    4C66 : 22 58 60            	LD      (LINEAT),HL     ; Set loop line number
    1886/    4C69 : 69                  	LD      L,C             ; Set code string to loop
    1887/    4C6A : 60                  	LD      H,B
    1888/    4C6B : C3 F9 47            	JP      PUTFID          ; Put back "FOR" and continue
    1889/    4C6E :                     
    1890/    4C6E : F9                  KILFOR: LD      SP,HL           ; Remove "FOR" block
    1891/    4C6F : 2A CA 60            	LD      HL,(BRKLIN)     ; Code string after "NEXT"
    1892/    4C72 : 7E                  	LD      A,(HL)          ; Get next byte in code string
    1893/    4C73 : FE 2C               	CP      ','             ; More NEXTs ?
    1894/    4C75 : C2 FD 47            	JP      NZ,RUNCNT       ; No - Do next statement
    1895/    4C78 : CD 5C 48            	CALL    GETCHR          ; Position to index name
    1896/    4C7B : CD 37 4C            	CALL    NEXT1           ; Re-enter NEXT routine
    1897/    4C7E :                     ; < will not RETurn to here , Exit to RUNCNT or Loop >
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 33 - 2/19/2023 19:38:37


    1898/    4C7E :                     
    1899/    4C7E : CD 7E 4C            GETNUM: CALL    EVAL            ; Get a numeric expression
    1900/    4C81 : F6                  TSTNUM: DB      0F6H            ; Clear carry (numeric)
    1901/    4C82 : 37                  TSTSTR: SCF                     ; Set carry (string)
    1902/    4C83 : 3A A9 60            CHKTYP: LD      A,(TYPE)        ; Check types match
    1903/    4C86 : 8F                  	ADC     A,A             ; Expected + actual
    1904/    4C87 : B7                  	OR      A               ; Clear carry , set parity
    1905/    4C88 : E8                  	RET     PE              ; Even parity - Types match
    1906/    4C89 : C3 82 43            	JP      TMERR           ; Different types - Error
    1907/    4C8C :                     
    1908/    4C8C :                     ;???
    1909/    4C8C : CD 7B 46            	call	CHKSYN
    1910/    4C8F : B4                  	db 0B4h
    1911/    4C90 : C3 90 4C            	jp	EVAL
    1912/    4C93 :                     ;---
    1913/    4C93 :                     
    1914/    4C93 : CD 7B 46            OPNPAR: CALL    CHKSYN          ; Make sure "(" follows
    1915/    4C96 : 28                  	DB   "("
    1916/    4C97 : 2B                  EVAL:   DEC     HL              ; Evaluate expression & save
    1917/    4C98 : 16 00               	LD      D,0             ; Precedence value
    1918/    4C9A : D5                  EVAL1:  PUSH    DE              ; Save precedence
    1919/    4C9B : 0E 01               	LD      C,1
    1920/    4C9D : CD 4F 43            	CALL    CHKSTK          ; Check for 1 level of stack
    1921/    4CA0 : CD A0 4C            	CALL    OPRND           ; Get next expression value
    1922/    4CA3 : 22 CC 60            EVAL2:  LD      (NXTOPR),HL     ; Save address of next operator
    1923/    4CA6 : 2A CC 60            EVAL3:  LD      HL,(NXTOPR)     ; Restore address of next opr
    1924/    4CA9 : C1                  	POP     BC              ; Precedence value and operator
    1925/    4CAA : 78                  	LD      A,B             ; Get precedence value
    1926/    4CAB : FE 78               	CP      78H             ; "AND" or "OR" ?
    1927/    4CAD : D4 81 4C            	CALL    NC,TSTNUM       ; No - Make sure it's a number
    1928/    4CB0 : 7E                  	LD      A,(HL)          ; Get next operator / function
    1929/    4CB1 : 16 00               	LD      D,0             ; Clear Last relation
    1930/    4CB3 : D6 B3               RLTLP:  SUB     ZGTR            ; ">" Token
    1931/    4CB5 : 38 FE               	Jr      C,FOPRND        ; + - * / ^ AND OR - Test it
    1932/    4CB7 : FE 03               	CP      ZLTH+1-ZGTR     ; < = >
    1933/    4CB9 : 30 FE               	Jr      NC,FOPRND       ; Function - Call it
    1934/    4CBB : FE 01               	CP      ZEQUAL-ZGTR     ; "="
    1935/    4CBD : 17                  	RLA                     ; <- Test for legal
    1936/    4CBE : AA                  	XOR     D               ; <- combinations of < = >
    1937/    4CBF : BA                  	CP      D               ; <- by combining last token
    1938/    4CC0 : 57                  	LD      D,A             ; <- with current one
    1939/    4CC1 : DA 70 43            	JP      C,SNERR         ; Error if "<<' '==" or ">>"
    1940/    4CC4 : 22 C1 60            	LD      (CUROPR),HL     ; Save address of current token
    1941/    4CC7 : CD 5C 48            	CALL    GETCHR          ; Get next character
    1942/    4CCA : 18 E7               	Jr      RLTLP           ; Treat the two as one
    1943/    4CCC :                     
    1944/    4CCC : 7A                  FOPRND: LD      A,D             ; < = > found ?
    1945/    4CCD : B7                  	OR      A
    1946/    4CCE : C2 CE 4C            	JP      NZ,TSTRED       ; Yes - Test for reduction
    1947/    4CD1 : 7E                  	LD      A,(HL)          ; Get operator token
    1948/    4CD2 : 22 C1 60            	LD      (CUROPR),HL     ; Save operator address
    1949/    4CD5 : D6 AC               	SUB     ZPLUS           ; Operator or function?
    1950/    4CD7 : D8                  	RET     C               ; Neither - Exit
    1951/    4CD8 : FE 07               	CP      ZOR+1-ZPLUS     ; Is it + - * / ^ AND OR ?
    1952/    4CDA : D0                  	RET     NC              ; No - Exit
    1953/    4CDB : 5F                  	LD      E,A             ; Coded operator
    1954/    4CDC : 3A A9 60            	LD      A,(TYPE)        ; Get data type
    1955/    4CDF : 3D                  	DEC     A               ; FF = numeric , 00 = string
    1956/    4CE0 : B3                  	OR      E               ; Combine with coded operator
    1957/    4CE1 : 7B                  	LD      A,E             ; Get coded operator
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 34 - 2/19/2023 19:38:37


    1958/    4CE2 : CA E2 4C            	JP      Z,CONCAT        ; String concatenation
    1959/    4CE5 : 07                  	RLCA                    ; Times 2
    1960/    4CE6 : 83                  	ADD     A,E             ; Times 3
    1961/    4CE7 : 5F                  	LD      E,A             ; To DE (D is 0)
    1962/    4CE8 : 21 FD 42            	LD      HL,PRITAB       ; Precedence table
    1963/    4CEB : 19                  	ADD     HL,DE           ; To the operator concerned
    1964/    4CEC : 78                  	LD      A,B             ; Last operator precedence
    1965/    4CED : 56                  	LD      D,(HL)          ; Get evaluation precedence
    1966/    4CEE : BA                  	CP      D               ; Compare with eval precedence
    1967/    4CEF : D0                  	RET     NC              ; Exit if higher precedence
    1968/    4CF0 : 23                  	INC     HL              ; Point to routine address
    1969/    4CF1 : CD 81 4C            	CALL    TSTNUM          ; Make sure it's a number
    1970/    4CF4 :                     
    1971/    4CF4 : C5                  STKTHS: PUSH    BC              ; Save last precedence & token
    1972/    4CF5 : 01 A6 4C            	LD      BC,EVAL3        ; Where to go on prec' break
    1973/    4CF8 : C5                  	PUSH    BC              ; Save on stack for return
    1974/    4CF9 : 43                  	LD      B,E             ; Save operator
    1975/    4CFA : 4A                  	LD      C,D             ; Save precedence
    1976/    4CFB : CD FB 4C            	CALL    STAKFP          ; Move value to stack
    1977/    4CFE : 58                  	LD      E,B             ; Restore operator
    1978/    4CFF : 51                  	LD      D,C             ; Restore precedence
    1979/    4D00 : 4E                  	LD      C,(HL)          ; Get LSB of routine address
    1980/    4D01 : 23                  	INC     HL
    1981/    4D02 : 46                  	LD      B,(HL)          ; Get MSB of routine address
    1982/    4D03 : 23                  	INC     HL
    1983/    4D04 : C5                  	PUSH    BC              ; Save routine address
    1984/    4D05 : 2A C1 60            	LD      HL,(CUROPR)     ; Address of current operator
    1985/    4D08 : 18 90               	Jr      EVAL1           ; Loop until prec' break
    1986/    4D0A :                     
    1987/    4D0A : AF                  OPRND:  XOR     A               ; Get operand routine
    1988/    4D0B : 32 A9 60            	LD      (TYPE),A        ; Set numeric expected
    1989/    4D0E : CD 5C 48            	CALL    GETCHR          ; Get next character
    1990/    4D11 : 1E 19               	LD      E,MO            ; ?MO Error
    1991/    4D13 : CA 84 43            	JP      Z,ERROR         ; No operand - Error
    1992/    4D16 : DA 16 4D            	JP      C,ASCTFP        ; Number - Get value
    1993/    4D19 : CD 86 46            	CALL    CHKLTR          ; See if a letter
    1994/    4D1C : 30 FE               	Jr      NC,CONVAR       ; Letter - Find variable
    1995/    4D1E : FE AC               	CP      ZPLUS           ; '+' Token ?
    1996/    4D20 : 28 E8               	Jr      Z,OPRND         ; Yes - Look for operand
    1997/    4D22 : FE 2E               	CP      '.'             ; '.' ?
    1998/    4D24 : CA 24 4D            	JP      Z,ASCTFP        ; Yes - Create FP number
    1999/    4D27 : FE AD               	CP      ZMINUS          ; '-' Token ?
    2000/    4D29 : 28 FE               	Jr      Z,MINUS         ; Yes - Do minus
    2001/    4D2B : FE 22               	CP      '"'             ; Literal string ?
    2002/    4D2D : CA 2D 4D            	JP      Z,QTSTR         ; Get string terminated by '"'
    2003/    4D30 : FE AA               	CP      ZNOT            ; "NOT" Token ?
    2004/    4D32 : CA 32 4D            	JP      Z,EVNOT         ; Yes - Eval NOT expression
    2005/    4D35 : FE A7               	CP      ZFN             ; "FN" Token ?
    2006/    4D37 : CA 37 4D            	JP      Z,DOFN          ; Yes - Do FN routine
    2007/    4D3A : D6 B6               	SUB     ZSGN            ; Is it a function?
    2008/    4D3C : 30 FE               	Jr      NC,FNOFST       ; Yes - Evaluate function
    2009/    4D3E : CD 93 4C            EVLPAR: CALL    OPNPAR          ; Evaluate expression in "()"
    2010/    4D41 : CD 7B 46            	CALL    CHKSYN          ; Make sure ")" follows
    2011/    4D44 : 29                  	DB   ")"
    2012/    4D45 : C9                  	RET
    2013/    4D46 :                     
    2014/    4D46 : 16 7D               MINUS:  LD      D,7DH           ; '-' precedence
    2015/    4D48 : CD 9A 4C            	CALL    EVAL1           ; Evaluate until prec' break
    2016/    4D4B : 2A CC 60            	LD      HL,(NXTOPR)     ; Get next operator address
    2017/    4D4E : E5                  	PUSH    HL              ; Save next operator address
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 35 - 2/19/2023 19:38:37


    2018/    4D4F : CD 4F 4D            	CALL    INVSGN          ; Negate value
    2019/    4D52 : CD 81 4C            RETNUM: CALL    TSTNUM          ; Make sure it's a number
    2020/    4D55 : E1                  	POP     HL              ; Restore next operator address
    2021/    4D56 : C9                  	RET
    2022/    4D57 :                     
    2023/    4D57 : CD 57 4D            CONVAR: CALL    GETVAR          ; Get variable address to DE
    2024/    4D5A : E5                  FRMEVL: PUSH    HL              ; Save code string address
    2025/    4D5B : EB                  	EX      DE,HL           ; Variable address to HL
    2026/    4D5C : 22 E0 60            	LD      (FPREG),HL      ; Save address of variable
    2027/    4D5F : 3A A9 60            	LD      A,(TYPE)        ; Get type
    2028/    4D62 : B7                  	OR      A               ; Numeric?
    2029/    4D63 : CC 63 4D            	CALL    Z,PHLTFP        ; Yes - Move contents to FPREG
    2030/    4D66 : E1                  	POP     HL              ; Restore code string address
    2031/    4D67 : C9                  	RET
    2032/    4D68 :                     
    2033/    4D68 : 06 00               FNOFST: LD      B,0             ; Get address of function
    2034/    4D6A : 07                  	RLCA                    ; Double function offset
    2035/    4D6B : 4F                  	LD      C,A             ; BC = Offset in function table
    2036/    4D6C : C5                  	PUSH    BC              ; Save adjusted token value
    2037/    4D6D : CD 5C 48            	CALL    GETCHR          ; Get next character
    2038/    4D70 : 79                  	LD      A,C             ; Get adjusted token value
    2039/    4D71 : FE 22               	CP      022h		; orig: 2*(ZLEFT-ZSGN)-1; Adj' LEFT$,RIGHT$ or MID$ ?
    2040/    4D73 : CA 73 4D            	jp	z, POINT
    2041/    4D76 : FE 2D               	cp	02Dh
    2042/    4D78 : 38 FE               	Jr      C,FNVAL         ; No - Do function
    2043/    4D7A : CD 93 4C            	CALL    OPNPAR          ; Evaluate expression  (X,...
    2044/    4D7D : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
    2045/    4D80 : 2C                  	DB      ','
    2046/    4D81 : CD 82 4C            	CALL    TSTSTR          ; Make sure it's a string
    2047/    4D84 : EB                  	EX      DE,HL           ; Save code string address
    2048/    4D85 : 2A E0 60            	LD      HL,(FPREG)      ; Get address of string
    2049/    4D88 : E3                  	EX      (SP),HL         ; Save address of string
    2050/    4D89 : E5                  	PUSH    HL              ; Save adjusted token value
    2051/    4D8A : EB                  	EX      DE,HL           ; Restore code string address
    2052/    4D8B : CD 8B 4D            	CALL    GETINT          ; Get integer 0-255
    2053/    4D8E : EB                  	EX      DE,HL           ; Save code string address
    2054/    4D8F : E3                  	EX      (SP),HL         ; Save integer,HL = adj' token
    2055/    4D90 : 18 FE               	Jr      GOFUNC          ; Jump to string function
    2056/    4D92 :                     
    2057/    4D92 : CD 3E 4D            FNVAL:  CALL    EVLPAR          ; Evaluate expression
    2058/    4D95 : E3                  	EX      (SP),HL         ; HL = Adjusted token value
    2059/    4D96 : 11 52 4D            	LD      DE,RETNUM       ; Return number from function
    2060/    4D99 : D5                  	PUSH    DE              ; Save on stack
    2061/    4D9A : 01 C9 42            GOFUNC: LD      BC,FNCTAB       ; Function routine addresses
    2062/    4D9D : 09                  	ADD     HL,BC           ; Point to right address
    2063/    4D9E : 4E                  	LD      C,(HL)          ; Get LSB of address
    2064/    4D9F : 23                  	INC     HL              ;
    2065/    4DA0 : 66                  	LD      H,(HL)          ; Get MSB of address
    2066/    4DA1 : 69                  	LD      L,C             ; Address to HL
    2067/    4DA2 : E9                  	JP      (HL)            ; Jump to function
    2068/    4DA3 :                     
    2069/    4DA3 : 15                  SGNEXP: DEC     D               ; Dee to flag negative exponent
    2070/    4DA4 : FE AD               	CP      ZMINUS          ; '-' token ?
    2071/    4DA6 : C8                  	RET     Z               ; Yes - Return
    2072/    4DA7 : FE 2D               	CP      '-'             ; '-' ASCII ?
    2073/    4DA9 : C8                  	RET     Z               ; Yes - Return
    2074/    4DAA : 14                  	INC     D               ; Inc to flag positive exponent
    2075/    4DAB : FE 2B               	CP      '+'             ; '+' ASCII ?
    2076/    4DAD : C8                  	RET     Z               ; Yes - Return
    2077/    4DAE : FE AC               	CP      ZPLUS           ; '+' token ?
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 36 - 2/19/2023 19:38:37


    2078/    4DB0 : C8                  	RET     Z               ; Yes - Return
    2079/    4DB1 : 2B                  	DEC     HL              ; DEC 'cos GETCHR INCs
    2080/    4DB2 : C9                  	RET                     ; Return "NZ"
    2081/    4DB3 :                     
    2082/    4DB3 : F6                  POR:    DB      0F6H            ; Flag "OR"
    2083/    4DB4 : AF                  PAND:   XOR     A               ; Flag "AND"
    2084/    4DB5 : F5                  	PUSH    AF              ; Save "AND" / "OR" flag
    2085/    4DB6 : CD 81 4C            	CALL    TSTNUM          ; Make sure it's a number
    2086/    4DB9 : CD DC 48            	CALL    DEINT           ; Get integer -32768 to 32767
    2087/    4DBC : F1                  	POP     AF              ; Restore "AND" / "OR" flag
    2088/    4DBD : EB                  	EX      DE,HL           ; <- Get last
    2089/    4DBE : C1                  	POP     BC              ; <-  value
    2090/    4DBF : E3                  	EX      (SP),HL         ; <-  from
    2091/    4DC0 : EB                  	EX      DE,HL           ; <-  stack
    2092/    4DC1 : CD C1 4D            	CALL    FPBCDE          ; Move last value to FPREG
    2093/    4DC4 : F5                  	PUSH    AF              ; Save "AND" / "OR" flag
    2094/    4DC5 : CD DC 48            	CALL    DEINT           ; Get integer -32768 to 32767
    2095/    4DC8 : F1                  	POP     AF              ; Restore "AND" / "OR" flag
    2096/    4DC9 : C1                  	POP     BC              ; Get value
    2097/    4DCA : 79                  	LD      A,C             ; Get LSB
    2098/    4DCB : 21 CB 4D            	LD      HL,ACPASS       ; Address of save AC as current
    2099/    4DCE : 20 FE               	Jr      NZ,POR1         ; Jump if OR
    2100/    4DD0 : A3                  	AND     E               ; "AND" LSBs
    2101/    4DD1 : 4F                  	LD      C,A             ; Save LSB
    2102/    4DD2 : 78                  	LD      A,B             ; Get MBS
    2103/    4DD3 : A2                  	AND     D               ; "AND" MSBs
    2104/    4DD4 : E9                  	JP      (HL)            ; Save AC as current (ACPASS)
    2105/    4DD5 :                     
    2106/    4DD5 : B3                  POR1:   OR      E               ; "OR" LSBs
    2107/    4DD6 : 4F                  	LD      C,A             ; Save LSB
    2108/    4DD7 : 78                  	LD      A,B             ; Get MSB
    2109/    4DD8 : B2                  	OR      D               ; "OR" MSBs
    2110/    4DD9 : E9                  	JP      (HL)            ; Save AC as current (ACPASS)
    2111/    4DDA :                     
    2112/    4DDA : 21 DA 4D            TSTRED: LD      HL,CMPLOG       ; Logical compare routine
    2113/    4DDD : 3A A9 60            	LD      A,(TYPE)        ; Get data type
    2114/    4DE0 : 1F                  	RRA                     ; Carry set = string
    2115/    4DE1 : 7A                  	LD      A,D             ; Get last precedence value
    2116/    4DE2 : 17                  	RLA                     ; Times 2 plus carry
    2117/    4DE3 : 5F                  	LD      E,A             ; To E
    2118/    4DE4 : 16 64               	LD      D,64H           ; Relational precedence
    2119/    4DE6 : 78                  	LD      A,B             ; Get current precedence
    2120/    4DE7 : BA                  	CP      D               ; Compare with last
    2121/    4DE8 : D0                  	RET     NC              ; Eval if last was rel' or log'
    2122/    4DE9 : C3 F4 4C            	JP      STKTHS          ; Stack this one and get next
    2123/    4DEC :                     
    2124/    4DEC : EC 4D               CMPLOG: DW   CMPLG1          ; Compare two values / strings
    2125/    4DEE : 79                  CMPLG1: LD      A,C             ; Get data type
    2126/    4DEF : B7                  	OR      A
    2127/    4DF0 : 1F                  	RRA
    2128/    4DF1 : C1                  	POP     BC              ; Get last expression to BCDE
    2129/    4DF2 : D1                  	POP     DE
    2130/    4DF3 : F5                  	PUSH    AF              ; Save status
    2131/    4DF4 : CD 83 4C            	CALL    CHKTYP          ; Check that types match
    2132/    4DF7 : 21 F7 4D            	LD      HL,CMPRES       ; Result to comparison
    2133/    4DFA : E5                  	PUSH    HL              ; Save for RETurn
    2134/    4DFB : CA FB 4D            	JP      Z,CMPNUM        ; Compare values if numeric
    2135/    4DFE : AF                  	XOR     A               ; Compare two strings
    2136/    4DFF : 32 A9 60            	LD      (TYPE),A        ; Set type to numeric
    2137/    4E02 : D5                  	PUSH    DE              ; Save string name
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 37 - 2/19/2023 19:38:37


    2138/    4E03 : CD 03 4E            	CALL    GSTRCU          ; Get current string
    2139/    4E06 : 7E                  	LD      A,(HL)          ; Get length of string
    2140/    4E07 : 23                  	INC     HL
    2141/    4E08 : 23                  	INC     HL
    2142/    4E09 : 4E                  	LD      C,(HL)          ; Get LSB of address
    2143/    4E0A : 23                  	INC     HL
    2144/    4E0B : 46                  	LD      B,(HL)          ; Get MSB of address
    2145/    4E0C : D1                  	POP     DE              ; Restore string name
    2146/    4E0D : C5                  	PUSH    BC              ; Save address of string
    2147/    4E0E : F5                  	PUSH    AF              ; Save length of string
    2148/    4E0F : CD 0F 4E            	CALL    GSTRDE          ; Get second string
    2149/    4E12 : CD 12 4E            	CALL    LOADFP          ; Get address of second string
    2150/    4E15 : F1                  	POP     AF              ; Restore length of string 1
    2151/    4E16 : 57                  	LD      D,A             ; Length to D
    2152/    4E17 : E1                  	POP     HL              ; Restore address of string 1
    2153/    4E18 : 7B                  CMPSTR: LD      A,E             ; Bytes of string 2 to do
    2154/    4E19 : B2                  	OR      D               ; Bytes of string 1 to do
    2155/    4E1A : C8                  	RET     Z               ; Exit if all bytes compared
    2156/    4E1B : 7A                  	LD      A,D             ; Get bytes of string 1 to do
    2157/    4E1C : D6 01               	SUB     1
    2158/    4E1E : D8                  	RET     C               ; Exit if end of string 1
    2159/    4E1F : AF                  	XOR     A
    2160/    4E20 : BB                  	CP      E               ; Bytes of string 2 to do
    2161/    4E21 : 3C                  	INC     A
    2162/    4E22 : D0                  	RET     NC              ; Exit if end of string 2
    2163/    4E23 : 15                  	DEC     D               ; Count bytes in string 1
    2164/    4E24 : 1D                  	DEC     E               ; Count bytes in string 2
    2165/    4E25 : 0A                  	LD      A,(BC)          ; Byte in string 2
    2166/    4E26 : BE                  	CP      (HL)            ; Compare to byte in string 1
    2167/    4E27 : 23                  	INC     HL              ; Move up string 1
    2168/    4E28 : 03                  	INC     BC              ; Move up string 2
    2169/    4E29 : 28 ED               	Jr      Z,CMPSTR        ; Same - Try next bytes
    2170/    4E2B : 3F                  	CCF                     ; Flag difference (">" or "<")
    2171/    4E2C : C3 2C 4E            	JP      FLGDIF          ; "<" gives -1 , ">" gives +1
    2172/    4E2F :                     
    2173/    4E2F : 3C                  CMPRES: INC     A               ; Increment current value
    2174/    4E30 : 8F                  	ADC     A,A             ; Double plus carry
    2175/    4E31 : C1                  	POP     BC              ; Get other value
    2176/    4E32 : A0                  	AND     B               ; Combine them
    2177/    4E33 : C6 FF               	ADD     A,-1            ; Carry set if different
    2178/    4E35 : 9F                  	SBC     A,A             ; 00 - Equal , FF - Different
    2179/    4E36 : C3 36 4E            	JP      FLGREL          ; Set current value & continue
    2180/    4E39 :                     
    2181/    4E39 : 16 5A               EVNOT:  LD      D,5AH           ; Precedence value for "NOT"
    2182/    4E3B : CD 9A 4C            	CALL    EVAL1           ; Eval until precedence break
    2183/    4E3E : CD 81 4C            	CALL    TSTNUM          ; Make sure it's a number
    2184/    4E41 : CD DC 48            	CALL    DEINT           ; Get integer -32768 - 32767
    2185/    4E44 : 7B                  	LD      A,E             ; Get LSB
    2186/    4E45 : 2F                  	CPL                     ; Invert LSB
    2187/    4E46 : 4F                  	LD      C,A             ; Save "NOT" of LSB
    2188/    4E47 : 7A                  	LD      A,D             ; Get MSB
    2189/    4E48 : 2F                  	CPL                     ; Invert MSB
    2190/    4E49 : CD 49 4E            	CALL    ACPASS          ; Save AC as current
    2191/    4E4C : C1                  	POP     BC              ; Clean up stack
    2192/    4E4D : C3 A6 4C            	JP      EVAL3           ; Continue evaluation
    2193/    4E50 :                     
    2194/    4E50 : 2B                  DIMRET: DEC     HL              ; DEC 'cos GETCHR INCs
    2195/    4E51 : CD 5C 48            	CALL    GETCHR          ; Get next character
    2196/    4E54 : C8                  	RET     Z               ; End of DIM statement
    2197/    4E55 : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 38 - 2/19/2023 19:38:37


    2198/    4E58 : 2C                  	DB      ','
    2199/    4E59 : 01 50 4E            DIM:    LD      BC,DIMRET       ; Return to "DIMRET"
    2200/    4E5C : C5                  	PUSH    BC              ; Save on stack
    2201/    4E5D : F6                  	DB      0F6H            ; Flag "Create" variable
    2202/    4E5E : AF                  GETVAR: XOR     A               ; Find variable address,to DE
    2203/    4E5F : 32 A8 60            	LD      (LCRFLG),A      ; Set locate / create flag
    2204/    4E62 : 46                  	LD      B,(HL)          ; Get First byte of name
    2205/    4E63 : CD 86 46            GTFNAM: CALL    CHKLTR          ; See if a letter
    2206/    4E66 : DA 70 43            	JP      C,SNERR         ; ?SN Error if not a letter
    2207/    4E69 : AF                  	XOR     A
    2208/    4E6A : 4F                  	LD      C,A             ; Clear second byte of name
    2209/    4E6B : 32 A9 60            	LD      (TYPE),A        ; Set type to numeric
    2210/    4E6E : CD 5C 48            	CALL    GETCHR          ; Get next character
    2211/    4E71 : 38 FE               	Jr      C,SVNAM2        ; Numeric - Save in name
    2212/    4E73 : CD 86 46            	CALL    CHKLTR          ; See if a letter
    2213/    4E76 : 38 FE               	Jr      C,CHARTY        ; Not a letter - Check type
    2214/    4E78 : 4F                  SVNAM2: LD      C,A             ; Save second byte of name
    2215/    4E79 : CD 5C 48            ENDNAM: CALL    GETCHR          ; Get next character
    2216/    4E7C : 38 FB               	Jr      C,ENDNAM        ; Numeric - Get another
    2217/    4E7E : CD 86 46            	CALL    CHKLTR          ; See if a letter
    2218/    4E81 : 30 F6               	Jr      NC,ENDNAM       ; Letter - Get another
    2219/    4E83 : D6 24               CHARTY: SUB     '$'             ; String variable?
    2220/    4E85 : 20 FE               	Jr      NZ,NOTSTR       ; No - Numeric variable
    2221/    4E87 : 3C                  	INC     A               ; A = 1 (string type)
    2222/    4E88 : 32 A9 60            	LD      (TYPE),A        ; Set type to string
    2223/    4E8B : 0F                  	RRCA                    ; A = 80H , Flag for string
    2224/    4E8C : 81                  	ADD     A,C             ; 2nd byte of name has bit 7 on
    2225/    4E8D : 4F                  	LD      C,A             ; Resave second byte on name
    2226/    4E8E : CD 5C 48            	CALL    GETCHR          ; Get next character
    2227/    4E91 : 3A C7 60            NOTSTR: LD      A,(FORFLG)      ; Array name needed ?
    2228/    4E94 : 3D                  	DEC     A
    2229/    4E95 : CA 95 4E            	JP      Z,ARLDSV        ; Yes - Get array name
    2230/    4E98 : F2 98 4E            	JP      P,NSCFOR        ; No array with "FOR" or "FN"
    2231/    4E9B : 7E                  	LD      A,(HL)          ; Get byte again
    2232/    4E9C : D6 28               	SUB     '('             ; Subscripted variable?
    2233/    4E9E : 28 FE               	Jr      Z,SBSCPT        ; Yes - Sort out subscript
    2234/    4EA0 :                     
    2235/    4EA0 : AF                  NSCFOR: XOR     A               ; Simple variable
    2236/    4EA1 : 32 C7 60            	LD      (FORFLG),A      ; Clear "FOR" flag
    2237/    4EA4 : E5                  	PUSH    HL              ; Save code string address
    2238/    4EA5 : 50                  	LD      D,B             ; DE = Variable name to find
    2239/    4EA6 : 59                  	LD      E,C
    2240/    4EA7 : 2A DA 60            	LD      HL,(FNRGNM)     ; FN argument name
    2241/    4EAA : CD 75 46            	CALL    CPDEHL          ; Is it the FN argument?
    2242/    4EAD : 11 DC 60            	LD      DE,FNARG        ; Point to argument value
    2243/    4EB0 : CA B0 4E            	JP      Z,POPHRT        ; Yes - Return FN argument value
    2244/    4EB3 : 2A D4 60            	LD      HL,(VAREND)     ; End of variables
    2245/    4EB6 : EB                  	EX      DE,HL           ; Address of end of search
    2246/    4EB7 : 2A D2 60            	LD      HL,(PROGND)     ; Start of variables address
    2247/    4EBA : CD 75 46            FNDVAR: CALL    CPDEHL          ; End of variable list table?
    2248/    4EBD : 28 FE               	Jr      Z,CFEVAL        ; Yes - Called from EVAL?
    2249/    4EBF : 79                  	LD      A,C             ; Get second byte of name
    2250/    4EC0 : 96                  	SUB     (HL)            ; Compare with name in list
    2251/    4EC1 : 23                  	INC     HL              ; Move on to first byte
    2252/    4EC2 : 20 FE               	Jr      NZ,FNTHR        ; Different - Find another
    2253/    4EC4 : 78                  	LD      A,B             ; Get first byte of name
    2254/    4EC5 : 96                  	SUB     (HL)            ; Compare with name in list
    2255/    4EC6 : 23                  FNTHR:  INC     HL              ; Move on to LSB of value
    2256/    4EC7 : 28 FE               	Jr      Z,RETADR        ; Found - Return address
    2257/    4EC9 : 23                  	INC     HL              ; <- Skip
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 39 - 2/19/2023 19:38:37


    2258/    4ECA : 23                  	INC     HL              ; <- over
    2259/    4ECB : 23                  	INC     HL              ; <- F.P.
    2260/    4ECC : 23                  	INC     HL              ; <- value
    2261/    4ECD : 18 EB               	Jr      FNDVAR          ; Keep looking
    2262/    4ECF :                     
    2263/    4ECF : E1                  CFEVAL: POP     HL              ; Restore code string address
    2264/    4ED0 : E3                  	EX      (SP),HL         ; Get return address
    2265/    4ED1 : D5                  	PUSH    DE              ; Save address of variable
    2266/    4ED2 : 11 5A 4D            	LD      DE,FRMEVL       ; Return address in EVAL
    2267/    4ED5 : CD 75 46            	CALL    CPDEHL          ; Called from EVAL ?
    2268/    4ED8 : D1                  	POP     DE              ; Restore address of variable
    2269/    4ED9 : 28 FE               	Jr      Z,RETNUL        ; Yes - Return null variable
    2270/    4EDB : E3                  	EX      (SP),HL         ; Put back return
    2271/    4EDC : E5                  	PUSH    HL              ; Save code string address
    2272/    4EDD : C5                  	PUSH    BC              ; Save variable name
    2273/    4EDE : 01 06 00            	LD      BC,6            ; 2 byte name plus 4 byte data
    2274/    4EE1 : 2A D6 60            	LD      HL,(ARREND)     ; End of arrays
    2275/    4EE4 : E5                  	PUSH    HL              ; Save end of arrays
    2276/    4EE5 : 09                  	ADD     HL,BC           ; Move up 6 bytes
    2277/    4EE6 : C1                  	POP     BC              ; Source address in BC
    2278/    4EE7 : E5                  	PUSH    HL              ; Save new end address
    2279/    4EE8 : CD A0 44            	CALL    MOVUP           ; Move arrays up
    2280/    4EEB : E1                  	POP     HL              ; Restore new end address
    2281/    4EEC : 22 D6 60            	LD      (ARREND),HL     ; Set new end address
    2282/    4EEF : 60                  	LD      H,B             ; End of variables to HL
    2283/    4EF0 : 69                  	LD      L,C
    2284/    4EF1 : 22 D4 60            	LD      (VAREND),HL     ; Set new end address
    2285/    4EF4 :                     
    2286/    4EF4 : 2B                  ZEROLP: DEC     HL              ; Back through to zero variable
    2287/    4EF5 : 36 00               	LD      (HL),0          ; Zero byte in variable
    2288/    4EF7 : CD 75 46            	CALL    CPDEHL          ; Done them all?
    2289/    4EFA : 20 F8               	Jr      NZ,ZEROLP       ; No - Keep on going
    2290/    4EFC : D1                  	POP     DE              ; Get variable name
    2291/    4EFD : 73                  	LD      (HL),E          ; Store second character
    2292/    4EFE : 23                  	INC     HL
    2293/    4EFF : 72                  	LD      (HL),D          ; Store first character
    2294/    4F00 : 23                  	INC     HL
    2295/    4F01 : EB                  RETADR: EX      DE,HL           ; Address of variable in DE
    2296/    4F02 : E1                  	POP     HL              ; Restore code string address
    2297/    4F03 : C9                  	RET
    2298/    4F04 :                     
    2299/    4F04 : 32 E3 60            RETNUL: LD      (FPEXP),A       ; Set result to zero
    2300/    4F07 : 21 43 43            	LD      HL,ZERBYT       ; Also set a null string
    2301/    4F0A : 22 E0 60            	LD      (FPREG),HL      ; Save for EVAL
    2302/    4F0D : E1                  	POP     HL              ; Restore code string address
    2303/    4F0E : C9                  	RET
    2304/    4F0F :                     
    2305/    4F0F : E5                  SBSCPT: PUSH    HL              ; Save code string address
    2306/    4F10 : 2A A8 60            	LD      HL,(LCRFLG)     ; Locate/Create and Type
    2307/    4F13 : E3                  	EX      (SP),HL         ; Save and get code string
    2308/    4F14 : 57                  	LD      D,A             ; Zero number of dimensions
    2309/    4F15 : D5                  SCPTLP: PUSH    DE              ; Save number of dimensions
    2310/    4F16 : C5                  	PUSH    BC              ; Save array name
    2311/    4F17 : CD D0 48            	CALL    FPSINT          ; Get subscript (0-32767)
    2312/    4F1A : C1                  	POP     BC              ; Restore array name
    2313/    4F1B : F1                  	POP     AF              ; Get number of dimensions
    2314/    4F1C : EB                  	EX      DE,HL
    2315/    4F1D : E3                  	EX      (SP),HL         ; Save subscript value
    2316/    4F1E : E5                  	PUSH    HL              ; Save LCRFLG and TYPE
    2317/    4F1F : EB                  	EX      DE,HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 40 - 2/19/2023 19:38:37


    2318/    4F20 : 3C                  	INC     A               ; Count dimensions
    2319/    4F21 : 57                  	LD      D,A             ; Save in D
    2320/    4F22 : 7E                  	LD      A,(HL)          ; Get next byte in code string
    2321/    4F23 : FE 2C               	CP      ','             ; Comma (more to come)?
    2322/    4F25 : 28 EE               	Jr      Z,SCPTLP        ; Yes - More subscripts
    2323/    4F27 : CD 7B 46            	CALL    CHKSYN          ; Make sure ")" follows
    2324/    4F2A : 29                  	DB      ")"
    2325/    4F2B : 22 CC 60            	LD      (NXTOPR),HL     ; Save code string address
    2326/    4F2E : E1                  	POP     HL              ; Get LCRFLG and TYPE
    2327/    4F2F : 22 A8 60            	LD      (LCRFLG),HL     ; Restore Locate/create & type
    2328/    4F32 : 1E 00               	LD      E,0             ; Flag not CSAVE* or CLOAD*
    2329/    4F34 : D5                  	PUSH    DE              ; Save number of dimensions (D)
    2330/    4F35 : 11                  	DB      11H             ; Skip "PUSH HL" and "PUSH AF'
    2331/    4F36 :                     
    2332/    4F36 : E5                  ARLDSV: PUSH    HL              ; Save code string address
    2333/    4F37 : F5                  	PUSH    AF              ; A = 00 , Flags set = Z,N
    2334/    4F38 : 2A D4 60            	LD      HL,(VAREND)     ; Start of arrays
    2335/    4F3B : 3E                  	DB      3EH             ; Skip "ADD HL,DE"
    2336/    4F3C : 19                  FNDARY: ADD     HL,DE           ; Move to next array start
    2337/    4F3D : ED 5B D6 60         	LD      de,(ARREND)     ; End of arrays
    2338/    4F41 : CD 75 46            	CALL    CPDEHL          ; End of arrays found?
    2339/    4F44 : 28 FE               	Jr      Z,CREARY        ; Yes - Create array
    2340/    4F46 : 7E                  	LD      A,(HL)          ; Get second byte of name
    2341/    4F47 : B9                  	CP      C               ; Compare with name given
    2342/    4F48 : 23                  	INC     HL              ; Move on
    2343/    4F49 : 20 FE               	Jr      NZ,NXTARY       ; Different - Find next array
    2344/    4F4B : 7E                  	LD      A,(HL)          ; Get first byte of name
    2345/    4F4C : B8                  	CP      B               ; Compare with name given
    2346/    4F4D : 23                  NXTARY: INC     HL              ; Move on
    2347/    4F4E : 5E                  	LD      E,(HL)          ; Get LSB of next array address
    2348/    4F4F : 23                  	INC     HL
    2349/    4F50 : 56                  	LD      D,(HL)          ; Get MSB of next array address
    2350/    4F51 : 23                  	INC     HL
    2351/    4F52 : 20 E8               	Jr      NZ,FNDARY       ; Not found - Keep looking
    2352/    4F54 : 3A A8 60            	LD      A,(LCRFLG)      ; Found Locate or Create it?
    2353/    4F57 : B7                  	OR      A
    2354/    4F58 : C2 79 43            	JP      NZ,DDERR        ; Create - ?DD Error
    2355/    4F5B : F1                  	POP     AF              ; Locate - Get number of dim'ns
    2356/    4F5C : 44                  	LD      B,H             ; BC Points to array dim'ns
    2357/    4F5D : 4D                  	LD      C,L
    2358/    4F5E : CA 5E 4F            	JP      Z,POPHRT        ; Jump if array load/save
    2359/    4F61 : 96                  	SUB     (HL)            ; Same number of dimensions?
    2360/    4F62 : 28 FE               	Jr      Z,FINDEL        ; Yes - Find element
    2361/    4F64 : 1E 10               BSERR:  LD      E,BS            ; ?BS Error
    2362/    4F66 : C3 84 43            	JP      ERROR           ; Output error
    2363/    4F69 :                     
    2364/    4F69 : 11 04 00            CREARY: LD      DE,4            ; 4 Bytes per entry
    2365/    4F6C : F1                  	POP     AF              ; Array to save or 0 dim'ns?
    2366/    4F6D : CA F1 48            	JP      Z,FCERR         ; Yes - ?FC Error
    2367/    4F70 : 71                  	LD      (HL),C          ; Save second byte of name
    2368/    4F71 : 23                  	INC     HL
    2369/    4F72 : 70                  	LD      (HL),B          ; Save first byte of name
    2370/    4F73 : 23                  	INC     HL
    2371/    4F74 : 4F                  	LD      C,A             ; Number of dimensions to C
    2372/    4F75 : CD 4F 43            	CALL    CHKSTK          ; Check if enough memory
    2373/    4F78 : 23                  	INC     HL              ; Point to number of dimensions
    2374/    4F79 : 23                  	INC     HL
    2375/    4F7A : 22 C1 60            	LD      (CUROPR),HL     ; Save address of pointer
    2376/    4F7D : 71                  	LD      (HL),C          ; Set number of dimensions
    2377/    4F7E : 23                  	INC     HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 41 - 2/19/2023 19:38:37


    2378/    4F7F : 3A A8 60            	LD      A,(LCRFLG)      ; Locate of Create?
    2379/    4F82 : 17                  	RLA                     ; Carry set = Create
    2380/    4F83 : 79                  	LD      A,C             ; Get number of dimensions
    2381/    4F84 : 01 0B 00            CRARLP: LD      BC,10+1         ; Default dimension size 10
    2382/    4F87 : 30 FE               	Jr      NC,DEFSIZ       ; Locate - Set default size
    2383/    4F89 : C1                  	POP     BC              ; Get specified dimension size
    2384/    4F8A : 03                  	INC     BC              ; Include zero element
    2385/    4F8B : 71                  DEFSIZ: LD      (HL),C          ; Save LSB of dimension size
    2386/    4F8C : 23                  	INC     HL
    2387/    4F8D : 70                  	LD      (HL),B          ; Save MSB of dimension size
    2388/    4F8E : 23                  	INC     HL
    2389/    4F8F : F5                  	PUSH    AF              ; Save num' of dim'ns an status
    2390/    4F90 : E5                  	PUSH    HL              ; Save address of dim'n size
    2391/    4F91 : CD 91 4F            	CALL    MLDEBC          ; Multiply DE by BC to find
    2392/    4F94 : EB                  	EX      DE,HL           ; amount of mem needed (to DE)
    2393/    4F95 : E1                  	POP     HL              ; Restore address of dimension
    2394/    4F96 : F1                  	POP     AF              ; Restore number of dimensions
    2395/    4F97 : 3D                  	DEC     A               ; Count them
    2396/    4F98 : 20 EA               	Jr      NZ,CRARLP       ; Do next dimension if more
    2397/    4F9A : F5                  	PUSH    AF              ; Save locate/create flag
    2398/    4F9B : 42                  	LD      B,D             ; MSB of memory needed
    2399/    4F9C : 4B                  	LD      C,E             ; LSB of memory needed
    2400/    4F9D : EB                  	EX      DE,HL
    2401/    4F9E : 19                  	ADD     HL,DE           ; Add bytes to array start
    2402/    4F9F : DA 66 43            	JP      C,OMERR         ; Too big - Error
    2403/    4FA2 : CD 58 43            	CALL    ENFMEM          ; See if enough memory
    2404/    4FA5 : 22 D6 60            	LD      (ARREND),HL     ; Save new end of array
    2405/    4FA8 :                     
    2406/    4FA8 : 2B                  ZERARY: DEC     HL              ; Back through array data
    2407/    4FA9 : 36 00               	LD      (HL),0          ; Set array element to zero
    2408/    4FAB : CD 75 46            	CALL    CPDEHL          ; All elements zeroed?
    2409/    4FAE : 20 F8               	Jr      NZ,ZERARY       ; No - Keep on going
    2410/    4FB0 : 03                  	INC     BC              ; Number of bytes + 1
    2411/    4FB1 : 57                  	LD      D,A             ; A=0
    2412/    4FB2 : 2A C1 60            	LD      HL,(CUROPR)     ; Get address of array
    2413/    4FB5 : 5E                  	LD      E,(HL)          ; Number of dimensions
    2414/    4FB6 : EB                  	EX      DE,HL           ; To HL
    2415/    4FB7 : 29                  	ADD     HL,HL           ; Two bytes per dimension size
    2416/    4FB8 : 09                  	ADD     HL,BC           ; Add number of bytes
    2417/    4FB9 : EB                  	EX      DE,HL           ; Bytes needed to DE
    2418/    4FBA : 2B                  	DEC     HL
    2419/    4FBB : 2B                  	DEC     HL
    2420/    4FBC : 73                  	LD      (HL),E          ; Save LSB of bytes needed
    2421/    4FBD : 23                  	INC     HL
    2422/    4FBE : 72                  	LD      (HL),D          ; Save MSB of bytes needed
    2423/    4FBF : 23                  	INC     HL
    2424/    4FC0 : F1                  	POP     AF              ; Locate / Create?
    2425/    4FC1 : 38 FE               	Jr      C,ENDDIM        ; A is 0 , End if create
    2426/    4FC3 : 47                  FINDEL: LD      B,A             ; Find array element
    2427/    4FC4 : 4F                  	LD      C,A
    2428/    4FC5 : 7E                  	LD      A,(HL)          ; Number of dimensions
    2429/    4FC6 : 23                  	INC     HL
    2430/    4FC7 : 16                  	DB      16H             ; Skip "POP HL"
    2431/    4FC8 : E1                  FNDELP: POP     HL              ; Address of next dim' size
    2432/    4FC9 : 5E                  	LD      E,(HL)          ; Get LSB of dim'n size
    2433/    4FCA : 23                  	INC     HL
    2434/    4FCB : 56                  	LD      D,(HL)          ; Get MSB of dim'n size
    2435/    4FCC : 23                  	INC     HL
    2436/    4FCD : E3                  	EX      (SP),HL         ; Save address - Get index
    2437/    4FCE : F5                  	PUSH    AF              ; Save number of dim'ns
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 42 - 2/19/2023 19:38:37


    2438/    4FCF : CD 75 46            	CALL    CPDEHL          ; Dimension too large?
    2439/    4FD2 : 30 90               	Jr      NC,BSERR        ; Yes - ?BS Error
    2440/    4FD4 : E5                  	PUSH    HL              ; Save index
    2441/    4FD5 : CD D5 4F            	CALL    MLDEBC          ; Multiply previous by size
    2442/    4FD8 : D1                  	POP     DE              ; Index supplied to DE
    2443/    4FD9 : 19                  	ADD     HL,DE           ; Add index to pointer
    2444/    4FDA : F1                  	POP     AF              ; Number of dimensions
    2445/    4FDB : 3D                  	DEC     A               ; Count them
    2446/    4FDC : 44                  	LD      B,H             ; MSB of pointer
    2447/    4FDD : 4D                  	LD      C,L             ; LSB of pointer
    2448/    4FDE : 20 E8               	Jr      NZ,FNDELP       ; More - Keep going
    2449/    4FE0 : 29                  	ADD     HL,HL           ; 4 Bytes per element
    2450/    4FE1 : 29                  	ADD     HL,HL
    2451/    4FE2 : C1                  	POP     BC              ; Start of array
    2452/    4FE3 : 09                  	ADD     HL,BC           ; Point to element
    2453/    4FE4 : EB                  	EX      DE,HL           ; Address of element to DE
    2454/    4FE5 : 2A CC 60            ENDDIM: LD      HL,(NXTOPR)     ; Got code string address
    2455/    4FE8 : C9                  	RET
    2456/    4FE9 :                     
    2457/    4FE9 : 2A D6 60            FRE:    LD      HL,(ARREND)     ; Start of free memory
    2458/    4FEC : EB                  	EX      DE,HL           ; To DE
    2459/    4FED : 21 00 00            	LD      HL,0            ; End of free memory
    2460/    4FF0 : 39                  	ADD     HL,SP           ; Current stack value
    2461/    4FF1 : 3A A9 60            	LD      A,(TYPE)        ; Dummy argument type
    2462/    4FF4 : B7                  	OR      A
    2463/    4FF5 : 28 FE               	Jr      Z,FRENUM        ; Numeric - Free variable space
    2464/    4FF7 : CD F7 4F            	CALL    GSTRCU          ; Current string to pool
    2465/    4FFA : CD FA 4F            	CALL    GARBGE          ; Garbage collection
    2466/    4FFD : 2A 56 60            	LD      HL,(STRSPC)     ; Bottom of string space in use
    2467/    5000 : EB                  	EX      DE,HL           ; To DE
    2468/    5001 : 2A BF 60            	LD      HL,(STRBOT)     ; Bottom of string space
    2469/    5004 : 7D                  FRENUM: LD      A,L             ; Get LSB of end
    2470/    5005 : 93                  	SUB     E               ; Subtract LSB of beginning
    2471/    5006 : 4F                  	LD      C,A             ; Save difference if C
    2472/    5007 : 7C                  	LD      A,H             ; Get MSB of end
    2473/    5008 : 9A                  	SBC     A,D             ; Subtract MSB of beginning
    2474/    5009 : 41                  ACPASS: LD      B,C             ; Return integer AC
    2475/    500A : 50                  ABPASS: LD      D,B             ; Return integer AB
    2476/    500B : 1E 00               	LD      E,0
    2477/    500D : 21 A9 60            	LD      HL,TYPE         ; Point to type
    2478/    5010 : 73                  	LD      (HL),E          ; Set type to numeric
    2479/    5011 : 06 90               	LD      B,80H+16        ; 16 bit integer
    2480/    5013 : C3 13 50            	JP      RETINT          ; Return the integr
    2481/    5016 :                     
    2482/    5016 : 3A A7 60            POS:    LD      A,(CURPOS)      ; Get cursor position
    2483/    5019 : 47                  PASSA:  LD      B,A             ; Put A into AB
    2484/    501A : AF                  	XOR     A               ; Zero A
    2485/    501B : C3 0A 50            	JP      ABPASS          ; Return integer AB
    2486/    501E :                     
    2487/    501E : CD 1E 50            DEF:    CALL    CHEKFN          ; Get "FN" and name
    2488/    5021 : CD 21 50            	CALL    IDTEST          ; Test for illegal direct
    2489/    5024 : 01 BD 49            	LD      BC,DATA         ; To get next statement
    2490/    5027 : C5                  	PUSH    BC              ; Save address for RETurn
    2491/    5028 : D5                  	PUSH    DE              ; Save address of function ptr
    2492/    5029 : CD 7B 46            	CALL    CHKSYN          ; Make sure "(" follows
    2493/    502C : 28                  	DB      "("
    2494/    502D : CD 5E 4E            	CALL    GETVAR          ; Get argument variable name
    2495/    5030 : E5                  	PUSH    HL              ; Save code string address
    2496/    5031 : EB                  	EX      DE,HL           ; Argument address to HL
    2497/    5032 : 2B                  	DEC     HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 43 - 2/19/2023 19:38:37


    2498/    5033 : 56                  	LD      D,(HL)          ; Get first byte of arg name
    2499/    5034 : 2B                  	DEC     HL
    2500/    5035 : 5E                  	LD      E,(HL)          ; Get second byte of arg name
    2501/    5036 : E1                  	POP     HL              ; Restore code string address
    2502/    5037 : CD 81 4C            	CALL    TSTNUM          ; Make sure numeric argument
    2503/    503A : CD 7B 46            	CALL    CHKSYN          ; Make sure ")" follows
    2504/    503D : 29                  	DB      ")"
    2505/    503E : CD 7B 46            	CALL    CHKSYN          ; Make sure "=" follows
    2506/    5041 : B4                  	DB      ZEQUAL          ; "=" token
    2507/    5042 : 44                  	LD      B,H             ; Code string address to BC
    2508/    5043 : 4D                  	LD      C,L
    2509/    5044 : E3                  	EX      (SP),HL         ; Save code str , Get FN ptr
    2510/    5045 : 71                  	LD      (HL),C          ; Save LSB of FN code string
    2511/    5046 : 23                  	INC     HL
    2512/    5047 : 70                  	LD      (HL),B          ; Save MSB of FN code string
    2513/    5048 : C3 48 50            	JP      SVSTAD          ; Save address and do function
    2514/    504B :                     
    2515/    504B : CD 4B 50            DOFN:   CALL    CHEKFN          ; Make sure FN follows
    2516/    504E : D5                  	PUSH    DE              ; Save function pointer address
    2517/    504F : CD 3E 4D            	CALL    EVLPAR          ; Evaluate expression in "()"
    2518/    5052 : CD 81 4C            	CALL    TSTNUM          ; Make sure numeric result
    2519/    5055 : E3                  	EX      (SP),HL         ; Save code str , Get FN ptr
    2520/    5056 : 5E                  	LD      E,(HL)          ; Get LSB of FN code string
    2521/    5057 : 23                  	INC     HL
    2522/    5058 : 56                  	LD      D,(HL)          ; Get MSB of FN code string
    2523/    5059 : 23                  	INC     HL
    2524/    505A : 7A                  	LD      A,D             ; And function DEFined?
    2525/    505B : B3                  	OR      E
    2526/    505C : CA 7C 43            	JP      Z,UFERR         ; No - ?UF Error
    2527/    505F : 7E                  	LD      A,(HL)          ; Get LSB of argument address
    2528/    5060 : 23                  	INC     HL
    2529/    5061 : 66                  	LD      H,(HL)          ; Get MSB of argument address
    2530/    5062 : 6F                  	LD      L,A             ; HL = Arg variable address
    2531/    5063 : E5                  	PUSH    HL              ; Save it
    2532/    5064 : 2A DA 60            	LD      HL,(FNRGNM)     ; Get old argument name
    2533/    5067 : E3                  	EX      (SP),HL ;       ; Save old , Get new
    2534/    5068 : 22 DA 60            	LD      (FNRGNM),HL     ; Set new argument name
    2535/    506B : 2A DE 60            	LD      HL,(FNARG+2)    ; Get LSB,NLSB of old arg value
    2536/    506E : E5                  	PUSH    HL              ; Save it
    2537/    506F : 2A DC 60            	LD      HL,(FNARG)      ; Get MSB,EXP of old arg value
    2538/    5072 : E5                  	PUSH    HL              ; Save it
    2539/    5073 : 21 DC 60            	LD      HL,FNARG        ; HL = Value of argument
    2540/    5076 : D5                  	PUSH    DE              ; Save FN code string address
    2541/    5077 : CD 77 50            	CALL    FPTHL           ; Move FPREG to argument
    2542/    507A : E1                  	POP     HL              ; Get FN code string address
    2543/    507B : CD 7E 4C            	CALL    GETNUM          ; Get value from function
    2544/    507E : 2B                  	DEC     HL              ; DEC 'cos GETCHR INCs
    2545/    507F : CD 5C 48            	CALL    GETCHR          ; Get next character
    2546/    5082 : C2 70 43            	JP      NZ,SNERR        ; Bad character in FN - Error
    2547/    5085 : E1                  	POP     HL              ; Get MSB,EXP of old arg
    2548/    5086 : 22 DC 60            	LD      (FNARG),HL      ; Restore it
    2549/    5089 : E1                  	POP     HL              ; Get LSB,NLSB of old arg
    2550/    508A : 22 DE 60            	LD      (FNARG+2),HL    ; Restore it
    2551/    508D : E1                  	POP     HL              ; Get name of old arg
    2552/    508E : 22 DA 60            	LD      (FNRGNM),HL     ; Restore it
    2553/    5091 : E1                  	POP     HL              ; Restore code string address
    2554/    5092 : C9                  	RET
    2555/    5093 :                     
    2556/    5093 : E5                  IDTEST: PUSH    HL              ; Save code string address
    2557/    5094 : 2A 58 60            	LD      HL,(LINEAT)     ; Get current line number
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 44 - 2/19/2023 19:38:37


    2558/    5097 : 23                  	INC     HL              ; -1 means direct statement
    2559/    5098 : 7C                  	LD      A,H
    2560/    5099 : B5                  	OR      L
    2561/    509A : E1                  	POP     HL              ; Restore code string address
    2562/    509B : C0                  	RET     NZ              ; Return if in program
    2563/    509C : 1E 16               	LD      E,ID            ; ?ID Error
    2564/    509E : C3 84 43            	JP      ERROR
    2565/    50A1 :                     
    2566/    50A1 : CD 7B 46            CHEKFN: CALL    CHKSYN          ; Make sure FN follows
    2567/    50A4 : A7                  	DB      ZFN             ; "FN" token
    2568/    50A5 : 3E 80               	LD      A,80H
    2569/    50A7 : 32 C7 60            	LD      (FORFLG),A      ; Flag FN name to find
    2570/    50AA : B6                  	OR      (HL)            ; FN name has bit 7 set
    2571/    50AB : 47                  	LD      B,A             ; in first byte of name
    2572/    50AC : CD 63 4E            	CALL    GTFNAM          ; Get FN name
    2573/    50AF : C3 81 4C            	JP      TSTNUM          ; Make sure numeric function
    2574/    50B2 :                     
    2575/    50B2 : CD 81 4C            STR:    CALL    TSTNUM          ; Make sure it's a number
    2576/    50B5 : CD B5 50            	CALL    NUMASC          ; Turn number into text
    2577/    50B8 : CD B8 50            STR1:   CALL    CRTST           ; Create string entry for it
    2578/    50BB : CD BB 50            	CALL    GSTRCU          ; Current string to pool
    2579/    50BE : 01 BE 50            	LD      BC,TOPOOL       ; Save in string pool
    2580/    50C1 : C5                  	PUSH    BC              ; Save address on stack
    2581/    50C2 :                     
    2582/    50C2 : 7E                  SAVSTR: LD      A,(HL)          ; Get string length
    2583/    50C3 : 23                  	INC     HL
    2584/    50C4 : 23                  	INC     HL
    2585/    50C5 : E5                  	PUSH    HL              ; Save pointer to string
    2586/    50C6 : CD C6 50            	CALL    TESTR           ; See if enough string space
    2587/    50C9 : E1                  	POP     HL              ; Restore pointer to string
    2588/    50CA : 4E                  	LD      C,(HL)          ; Get LSB of address
    2589/    50CB : 23                  	INC     HL
    2590/    50CC : 46                  	LD      B,(HL)          ; Get MSB of address
    2591/    50CD : CD CD 50            	CALL    CRTMST          ; Create string entry
    2592/    50D0 : E5                  	PUSH    HL              ; Save pointer to MSB of addr
    2593/    50D1 : 6F                  	LD      L,A             ; Length of string
    2594/    50D2 : CD D2 50            	CALL    TOSTRA          ; Move to string area
    2595/    50D5 : D1                  	POP     DE              ; Restore pointer to MSB
    2596/    50D6 : C9                  	RET
    2597/    50D7 :                     
    2598/    50D7 : CD D7 50            MKTMST: CALL    TESTR           ; See if enough string space
    2599/    50DA : 21 BB 60            CRTMST: LD      HL,TMPSTR       ; Temporary string
    2600/    50DD : E5                  	PUSH    HL              ; Save it
    2601/    50DE : 77                  	LD      (HL),A          ; Save length of string
    2602/    50DF : 23                  	INC     HL
    2603/    50E0 : 23                  SVSTAD: INC     HL
    2604/    50E1 : 73                  	LD      (HL),E          ; Save LSB of address
    2605/    50E2 : 23                  	INC     HL
    2606/    50E3 : 72                  	LD      (HL),D          ; Save MSB of address
    2607/    50E4 : E1                  	POP     HL              ; Restore pointer
    2608/    50E5 : C9                  	RET
    2609/    50E6 :                     
    2610/    50E6 : 2B                  CRTST:  DEC     HL              ; DEC - INCed after
    2611/    50E7 : 06 22               QTSTR:  LD      B,'"'           ; Terminating quote
    2612/    50E9 : 50                  	LD      D,B             ; Quote to D
    2613/    50EA : E5                  DTSTR:  PUSH    HL              ; Save start
    2614/    50EB : 0E FF               	LD      C,-1            ; Set counter to -1
    2615/    50ED : 23                  QTSTLP: INC     HL              ; Move on
    2616/    50EE : 7E                  	LD      A,(HL)          ; Get byte
    2617/    50EF : 0C                  	INC     C               ; Count bytes
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 45 - 2/19/2023 19:38:37


    2618/    50F0 : B7                  	OR      A               ; End of line?
    2619/    50F1 : 28 FE               	Jr      Z,CRTSTE        ; Yes - Create string entry
    2620/    50F3 : BA                  	CP      D               ; Terminator D found?
    2621/    50F4 : 28 FE               	Jr      Z,CRTSTE        ; Yes - Create string entry
    2622/    50F6 : B8                  	CP      B               ; Terminator B found?
    2623/    50F7 : 20 F4               	Jr      NZ,QTSTLP       ; No - Keep looking
    2624/    50F9 : FE 22               CRTSTE: CP      '"'             ; End with '"'?
    2625/    50FB : CC 5C 48            	CALL    Z,GETCHR        ; Yes - Get next character
    2626/    50FE : E3                  	EX      (SP),HL         ; Starting quote
    2627/    50FF : 23                  	INC     HL              ; First byte of string
    2628/    5100 : EB                  	EX      DE,HL           ; To DE
    2629/    5101 : 79                  	LD      A,C             ; Get length
    2630/    5102 : CD DA 50            	CALL    CRTMST          ; Create string entry
    2631/    5105 : 11 BB 60            TSTOPL: LD      DE,TMPSTR       ; Temporary string
    2632/    5108 : 2A AD 60            	LD      HL,(TMSTPT)     ; Temporary string pool pointer
    2633/    510B : 22 E0 60            	LD      (FPREG),HL      ; Save address of string ptr
    2634/    510E : 3E 01               	LD      A,1
    2635/    5110 : 32 A9 60            	LD      (TYPE),A        ; Set type to string
    2636/    5113 : CD 13 51            	CALL    DETHL4          ; Move string to pool
    2637/    5116 : CD 75 46            	CALL    CPDEHL          ; Out of string pool?
    2638/    5119 : 22 AD 60            	LD      (TMSTPT),HL     ; Save new pointer
    2639/    511C : E1                  	POP     HL              ; Restore code string address
    2640/    511D : 7E                  	LD      A,(HL)          ; Get next code byte
    2641/    511E : C0                  	RET     NZ              ; Return if pool OK
    2642/    511F : 1E 1E               	LD      E,ST            ; ?ST Error
    2643/    5121 : C3 84 43            	JP      ERROR           ; String pool overflow
    2644/    5124 :                     
    2645/    5124 : 23                  PRNUMS: INC     HL              ; Skip leading space
    2646/    5125 : CD E6 50            PRS:    CALL    CRTST           ; Create string entry for it
    2647/    5128 : CD 28 51            PRS1:   CALL    GSTRCU          ; Current string to pool
    2648/    512B : CD 2B 51            	CALL    LOADFP          ; Move string block to BCDE
    2649/    512E : 1C                  	INC     E               ; Length + 1
    2650/    512F : 1D                  PRSLP:  DEC     E               ; Count characters
    2651/    5130 : C8                  	RET     Z               ; End of string
    2652/    5131 : 0A                  	LD      A,(BC)          ; Get byte to output
    2653/    5132 : CD 8E 46            	CALL    OUTC            ; Output character in A
    2654/    5135 : FE 0D               	CP      CR              ; Return?
    2655/    5137 : CC BF 4A            	CALL    Z,PRNTCRLF      ; Yes
    2656/    513A : 03                  	INC     BC              ; Next byte in string
    2657/    513B : 18 F2               	Jr      PRSLP           ; More characters to output
    2658/    513D :                     
    2659/    513D : B7                  TESTR:  OR      A               ; Test if enough room
    2660/    513E : 0E                  	DB      0EH             ; No garbage collection done
    2661/    513F : F1                  GRBDON: POP     AF              ; Garbage collection done
    2662/    5140 : F5                  	PUSH    AF              ; Save status
    2663/    5141 : ED 5B 56 60         	LD      de,(STRSPC)     ; Bottom of string space in use
    2664/    5145 : 2A BF 60            	LD      HL,(STRBOT)     ; Bottom of string area
    2665/    5148 : 2F                  	CPL                     ; Negate length (Top down)
    2666/    5149 : 4F                  	LD      C,A             ; -Length to BC
    2667/    514A : 06 FF               	LD      B,-1            ; BC = -ve length of string
    2668/    514C : 09                  	ADD     HL,BC           ; Add to bottom of space in use
    2669/    514D : 23                  	INC     HL              ; Plus one for 2's complement
    2670/    514E : CD 75 46            	CALL    CPDEHL          ; Below string RAM area?
    2671/    5151 : 38 FE               	Jr      C,TESTOS        ; Tidy up if not done else err
    2672/    5153 : 22 BF 60            	LD      (STRBOT),HL     ; Save new bottom of area
    2673/    5156 : 23                  	INC     HL              ; Point to first byte of string
    2674/    5157 : EB                  	EX      DE,HL           ; Address to DE
    2675/    5158 : F1                  	POP     AF              ; Throw away status push
    2676/    5159 : C9                  	RET
    2677/    515A :                     
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 46 - 2/19/2023 19:38:37


    2678/    515A : F1                  TESTOS: POP     AF              ; Garbage collect been done?
    2679/    515B : 1E 1A               	LD      E,OS            ; ?OS Error
    2680/    515D : CA 84 43            	JP      Z,ERROR         ; Yes - Not enough string apace
    2681/    5160 : BF                  	CP      A               ; Flag garbage collect done
    2682/    5161 : F5                  	PUSH    AF              ; Save status
    2683/    5162 : 01 3F 51            	LD      BC,GRBDON       ; Garbage collection done
    2684/    5165 : C5                  	PUSH    BC              ; Save for RETurn
    2685/    5166 : 2A AB 60            GARBGE: LD      HL,(LSTRAM)     ; Get end of RAM pointer
    2686/    5169 : 22 BF 60            GARBLP: LD      (STRBOT),HL     ; Reset string pointer
    2687/    516C : 21 00 00            	LD      HL,0
    2688/    516F : E5                  	PUSH    HL              ; Flag no string found
    2689/    5170 : 2A 56 60            	LD      HL,(STRSPC)     ; Get bottom of string space
    2690/    5173 : E5                  	PUSH    HL              ; Save bottom of string space
    2691/    5174 : 21 AF 60            	LD      HL,TMSTPL       ; Temporary string pool
    2692/    5177 : ED 5B AD 60         GRBLP:  LD      de,(TMSTPT)     ; Temporary string pool pointer
    2693/    517B : CD 75 46            	CALL    CPDEHL          ; Temporary string pool done?
    2694/    517E : 01 77 51            	LD      BC,GRBLP        ; Loop until string pool done
    2695/    5181 : 20 FE               	Jr      NZ,STPOOL       ; No - See if in string area
    2696/    5183 : 2A D2 60            	LD      HL,(PROGND)     ; Start of simple variables
    2697/    5186 : ED 5B D4 60         SMPVAR: LD      de,(VAREND)     ; End of simple variables
    2698/    518A : CD 75 46            	CALL    CPDEHL          ; All simple strings done?
    2699/    518D : 28 FE               	Jr      Z,ARRLP         ; Yes - Do string arrays
    2700/    518F : 7E                  	LD      A,(HL)          ; Get type of variable
    2701/    5190 : 23                  	INC     HL
    2702/    5191 : 23                  	INC     HL
    2703/    5192 : B7                  	OR      A               ; "S" flag set if string
    2704/    5193 : CD 93 51            	CALL    STRADD          ; See if string in string area
    2705/    5196 : 18 EE               	Jr      SMPVAR          ; Loop until simple ones done
    2706/    5198 :                     
    2707/    5198 : C1                  GNXARY: POP     BC              ; Scrap address of this array
    2708/    5199 : ED 5B D6 60         ARRLP:  LD      de,(ARREND)     ; End of string arrays
    2709/    519D : CD 75 46            	CALL    CPDEHL          ; All string arrays done?
    2710/    51A0 : 28 FE               	Jr      Z,SCNEND        ; Yes - Move string if found
    2711/    51A2 : CD A2 51            	CALL    LOADFP          ; Get array name to BCDE
    2712/    51A5 : 7B                  	LD      A,E             ; Get type of array
    2713/    51A6 : E5                  	PUSH    HL              ; Save address of num of dim'ns
    2714/    51A7 : 09                  	ADD     HL,BC           ; Start of next array
    2715/    51A8 : B7                  	OR      A               ; Test type of array
    2716/    51A9 : F2 98 51            	JP      P,GNXARY        ; Numeric array - Ignore it
    2717/    51AC : 22 C1 60            	LD      (CUROPR),HL     ; Save address of next array
    2718/    51AF : E1                  	POP     HL              ; Get address of num of dim'ns
    2719/    51B0 : 4E                  	LD      C,(HL)          ; BC = Number of dimensions
    2720/    51B1 : 06 00               	LD      B,0
    2721/    51B3 : 09                  	ADD     HL,BC           ; Two bytes per dimension size
    2722/    51B4 : 09                  	ADD     HL,BC
    2723/    51B5 : 23                  	INC     HL              ; Plus one for number of dim'ns
    2724/    51B6 : ED 5B C1 60         GRBARY: LD      de,(CUROPR)     ; Get address of next array
    2725/    51BA : CD 75 46            	CALL    CPDEHL          ; Is this array finished?
    2726/    51BD : 28 DA               	Jr      Z,ARRLP         ; Yes - Get next one
    2727/    51BF : 01 B6 51            	LD      BC,GRBARY       ; Loop until array all done
    2728/    51C2 :                     
    2729/    51C2 : C5                  STPOOL: PUSH    BC              ; Save return address
    2730/    51C3 : F6 80               	OR      80H             ; Flag string type
    2731/    51C5 : 7E                  STRADD: LD      A,(HL)          ; Get string length
    2732/    51C6 : 23                  	INC     HL
    2733/    51C7 : 23                  	INC     HL
    2734/    51C8 : 5E                  	LD      E,(HL)          ; Get LSB of string address
    2735/    51C9 : 23                  	INC     HL
    2736/    51CA : 56                  	LD      D,(HL)          ; Get MSB of string address
    2737/    51CB : 23                  	INC     HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 47 - 2/19/2023 19:38:37


    2738/    51CC : F0                  	RET     P               ; Not a string - Return
    2739/    51CD : B7                  	OR      A               ; Set flags on string length
    2740/    51CE : C8                  	RET     Z               ; Null string - Return
    2741/    51CF : 44                  	LD      B,H             ; Save variable pointer
    2742/    51D0 : 4D                  	LD      C,L
    2743/    51D1 : 2A BF 60            	LD      HL,(STRBOT)     ; Bottom of new area
    2744/    51D4 : CD 75 46            	CALL    CPDEHL          ; String been done?
    2745/    51D7 : 60                  	LD      H,B             ; Restore variable pointer
    2746/    51D8 : 69                  	LD      L,C
    2747/    51D9 : D8                  	RET     C               ; String done - Ignore
    2748/    51DA : E1                  	POP     HL              ; Return address
    2749/    51DB : E3                  	EX      (SP),HL         ; Lowest available string area
    2750/    51DC : CD 75 46            	CALL    CPDEHL          ; String within string area?
    2751/    51DF : E3                  	EX      (SP),HL         ; Lowest available string area
    2752/    51E0 : E5                  	PUSH    HL              ; Re-save return address
    2753/    51E1 : 60                  	LD      H,B             ; Restore variable pointer
    2754/    51E2 : 69                  	LD      L,C
    2755/    51E3 : D0                  	RET     NC              ; Outside string area - Ignore
    2756/    51E4 : C1                  	POP     BC              ; Get return , Throw 2 away
    2757/    51E5 : F1                  	POP     AF              ;
    2758/    51E6 : F1                  	POP     AF              ;
    2759/    51E7 : E5                  	PUSH    HL              ; Save variable pointer
    2760/    51E8 : D5                  	PUSH    DE              ; Save address of current
    2761/    51E9 : C5                  	PUSH    BC              ; Put back return address
    2762/    51EA : C9                  	RET                     ; Go to it
    2763/    51EB :                     
    2764/    51EB : D1                  SCNEND: POP     DE              ; Addresses of strings
    2765/    51EC : E1                  	POP     HL              ;
    2766/    51ED : 7D                  	LD      A,L             ; HL = 0 if no more to do
    2767/    51EE : B4                  	OR      H
    2768/    51EF : C8                  	RET     Z               ; No more to do - Return
    2769/    51F0 : 2B                  	DEC     HL
    2770/    51F1 : 46                  	LD      B,(HL)          ; MSB of address of string
    2771/    51F2 : 2B                  	DEC     HL
    2772/    51F3 : 4E                  	LD      C,(HL)          ; LSB of address of string
    2773/    51F4 : E5                  	PUSH    HL              ; Save variable address
    2774/    51F5 : 2B                  	DEC     HL
    2775/    51F6 : 2B                  	DEC     HL
    2776/    51F7 : 6E                  	LD      L,(HL)          ; HL = Length of string
    2777/    51F8 : 26 00               	LD      H,0
    2778/    51FA : 09                  	ADD     HL,BC           ; Address of end of string+1
    2779/    51FB : 50                  	LD      D,B             ; String address to DE
    2780/    51FC : 59                  	LD      E,C
    2781/    51FD : 2B                  	DEC     HL              ; Last byte in string
    2782/    51FE : 44                  	LD      B,H             ; Address to BC
    2783/    51FF : 4D                  	LD      C,L
    2784/    5200 : 2A BF 60            	LD      HL,(STRBOT)     ; Current bottom of string area
    2785/    5203 : CD A3 44            	CALL    MOVSTR          ; Move string to new address
    2786/    5206 : E1                  	POP     HL              ; Restore variable address
    2787/    5207 : 71                  	LD      (HL),C          ; Save new LSB of address
    2788/    5208 : 23                  	INC     HL
    2789/    5209 : 70                  	LD      (HL),B          ; Save new MSB of address
    2790/    520A : 69                  	LD      L,C             ; Next string area+1 to HL
    2791/    520B : 60                  	LD      H,B
    2792/    520C : 2B                  	DEC     HL              ; Next string area address
    2793/    520D : C3 69 51            	JP      GARBLP          ; Look for more strings
    2794/    5210 :                     
    2795/    5210 : C5                  CONCAT: PUSH    BC              ; Save prec' opr & code string
    2796/    5211 : E5                  	PUSH    HL              ;
    2797/    5212 : 2A E0 60            	LD      HL,(FPREG)      ; Get first string
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 48 - 2/19/2023 19:38:37


    2798/    5215 : E3                  	EX      (SP),HL         ; Save first string
    2799/    5216 : CD 0A 4D            	CALL    OPRND           ; Get second string
    2800/    5219 : E3                  	EX      (SP),HL         ; Restore first string
    2801/    521A : CD 82 4C            	CALL    TSTSTR          ; Make sure it's a string
    2802/    521D : 7E                  	LD      A,(HL)          ; Get length of second string
    2803/    521E : E5                  	PUSH    HL              ; Save first string
    2804/    521F : 2A E0 60            	LD      HL,(FPREG)      ; Get second string
    2805/    5222 : E5                  	PUSH    HL              ; Save second string
    2806/    5223 : 86                  	ADD     A,(HL)          ; Add length of second string
    2807/    5224 : 1E 1C               	LD      E,LS            ; ?LS Error
    2808/    5226 : DA 84 43            	JP      C,ERROR         ; String too long - Error
    2809/    5229 : CD D7 50            	CALL    MKTMST          ; Make temporary string
    2810/    522C : D1                  	POP     DE              ; Get second string to DE
    2811/    522D : CD 2D 52            	CALL    GSTRDE          ; Move to string pool if needed
    2812/    5230 : E3                  	EX      (SP),HL         ; Get first string
    2813/    5231 : CD 31 52            	CALL    GSTRHL          ; Move to string pool if needed
    2814/    5234 : E5                  	PUSH    HL              ; Save first string
    2815/    5235 : 2A BD 60            	LD      HL,(TMPSTR+2)   ; Temporary string address
    2816/    5238 : EB                  	EX      DE,HL           ; To DE
    2817/    5239 : CD 39 52            	CALL    SSTSA           ; First string to string area
    2818/    523C : CD 3C 52            	CALL    SSTSA           ; Second string to string area
    2819/    523F : 21 A3 4C            	LD      HL,EVAL2        ; Return to evaluation loop
    2820/    5242 : E3                  	EX      (SP),HL         ; Save return,get code string
    2821/    5243 : E5                  	PUSH    HL              ; Save code string address
    2822/    5244 : C3 05 51            	JP      TSTOPL          ; To temporary string to pool
    2823/    5247 :                     
    2824/    5247 : E1                  SSTSA:  POP     HL              ; Return address
    2825/    5248 : E3                  	EX      (SP),HL         ; Get string block,save return
    2826/    5249 : 7E                  	LD      A,(HL)          ; Get length of string
    2827/    524A : 23                  	INC     HL
    2828/    524B : 23                  	INC     HL
    2829/    524C : 4E                  	LD      C,(HL)          ; Get LSB of string address
    2830/    524D : 23                  	INC     HL
    2831/    524E : 46                  	LD      B,(HL)          ; Get MSB of string address
    2832/    524F : 6F                  	LD      L,A             ; Length to L
    2833/    5250 : 2C                  TOSTRA: INC     L               ; INC - DECed after
    2834/    5251 : 2D                  TSALP:  DEC     L               ; Count bytes moved
    2835/    5252 : C8                  	RET     Z               ; End of string - Return
    2836/    5253 : 0A                  	LD      A,(BC)          ; Get source
    2837/    5254 : 12                  	LD      (DE),A          ; Save destination
    2838/    5255 : 03                  	INC     BC              ; Next source
    2839/    5256 : 13                  	INC     DE              ; Next destination
    2840/    5257 : 18 F8               	Jr      TSALP           ; Loop until string moved
    2841/    5259 :                     
    2842/    5259 : CD 82 4C            GETSTR: CALL    TSTSTR          ; Make sure it's a string
    2843/    525C : 2A E0 60            GSTRCU: LD      HL,(FPREG)      ; Get current string
    2844/    525F : EB                  GSTRHL: EX      DE,HL           ; Save DE
    2845/    5260 : CD 60 52            GSTRDE: CALL    BAKTMP          ; Was it last tmp-str?
    2846/    5263 : EB                  	EX      DE,HL           ; Restore DE
    2847/    5264 : C0                  	RET     NZ              ; No - Return
    2848/    5265 : D5                  	PUSH    DE              ; Save string
    2849/    5266 : 50                  	LD      D,B             ; String block address to DE
    2850/    5267 : 59                  	LD      E,C
    2851/    5268 : 1B                  	DEC     DE              ; Point to length
    2852/    5269 : 4E                  	LD      C,(HL)          ; Get string length
    2853/    526A : 2A BF 60            	LD      HL,(STRBOT)     ; Current bottom of string area
    2854/    526D : CD 75 46            	CALL    CPDEHL          ; Last one in string area?
    2855/    5270 : 20 FE               	Jr      NZ,POPHL        ; No - Return
    2856/    5272 : 47                  	LD      B,A             ; Clear B (A=0)
    2857/    5273 : 09                  	ADD     HL,BC           ; Remove string from str' area
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 49 - 2/19/2023 19:38:37


    2858/    5274 : 22 BF 60            	LD      (STRBOT),HL     ; Save new bottom of str' area
    2859/    5277 : E1                  POPHL:  POP     HL              ; Restore string
    2860/    5278 : C9                  	RET
    2861/    5279 :                     
    2862/    5279 : 2A AD 60            BAKTMP: LD      HL,(TMSTPT)     ; Get temporary string pool top
    2863/    527C : 2B                  	DEC     HL              ; Back
    2864/    527D : 46                  	LD      B,(HL)          ; Get MSB of address
    2865/    527E : 2B                  	DEC     HL              ; Back
    2866/    527F : 4E                  	LD      C,(HL)          ; Get LSB of address
    2867/    5280 : 2B                  	DEC     HL              ; Back
    2868/    5281 : 2B                  	DEC     HL              ; Back
    2869/    5282 : CD 75 46            	CALL    CPDEHL          ; String last in string pool?
    2870/    5285 : C0                  	RET     NZ              ; Yes - Leave it
    2871/    5286 : 22 AD 60            	LD      (TMSTPT),HL     ; Save new string pool top
    2872/    5289 : C9                  	RET
    2873/    528A :                     
    2874/    528A : 01 19 50            LEN:    LD      BC,PASSA        ; To return integer A
    2875/    528D : C5                  	PUSH    BC              ; Save address
    2876/    528E : CD 59 52            GETLEN: CALL    GETSTR          ; Get string and its length
    2877/    5291 : AF                  	XOR     A
    2878/    5292 : 57                  	LD      D,A             ; Clear D
    2879/    5293 : 32 A9 60            	LD      (TYPE),A        ; Set type to numeric
    2880/    5296 : 7E                  	LD      A,(HL)          ; Get length of string
    2881/    5297 : B7                  	OR      A               ; Set status flags
    2882/    5298 : C9                  	RET
    2883/    5299 :                     
    2884/    5299 : 01 19 50            ASC:    LD      BC,PASSA        ; To return integer A
    2885/    529C : C5                  	PUSH    BC              ; Save address
    2886/    529D : CD 8E 52            GTFLNM: CALL    GETLEN          ; Get length of string
    2887/    52A0 : CA F1 48            	JP      Z,FCERR         ; Null string - Error
    2888/    52A3 : 23                  	INC     HL
    2889/    52A4 : 23                  	INC     HL
    2890/    52A5 : 5E                  	LD      E,(HL)          ; Get LSB of address
    2891/    52A6 : 23                  	INC     HL
    2892/    52A7 : 56                  	LD      D,(HL)          ; Get MSB of address
    2893/    52A8 : 1A                  	LD      A,(DE)          ; Get first byte of string
    2894/    52A9 : C9                  	RET
    2895/    52AA :                     
    2896/    52AA : 3E 01               CHR:    LD      A,1             ; One character string
    2897/    52AC : CD D7 50            	CALL    MKTMST          ; Make a temporary string
    2898/    52AF : CD AF 52            	CALL    MAKINT          ; Make it integer A
    2899/    52B2 : 2A BD 60            	LD      HL,(TMPSTR+2)   ; Get address of string
    2900/    52B5 : 73                  	LD      (HL),E          ; Save character
    2901/    52B6 : C1                  TOPOOL: POP     BC              ; Clean up stack
    2902/    52B7 : C3 05 51            	JP      TSTOPL          ; Temporary string to pool
    2903/    52BA :                     
    2904/    52BA : CD BA 52            LEFT:   CALL    LFRGNM          ; Get number and ending ")"
    2905/    52BD : AF                  	XOR     A               ; Start at first byte in string
    2906/    52BE : E3                  RIGHT1: EX      (SP),HL         ; Save code string,Get string
    2907/    52BF : 4F                  	LD      C,A             ; Starting position in string
    2908/    52C0 : E5                  MID1:   PUSH    HL              ; Save string block address
    2909/    52C1 : 7E                  	LD      A,(HL)          ; Get length of string
    2910/    52C2 : B8                  	CP      B               ; Compare with number given
    2911/    52C3 : 38 FE               	Jr      C,ALLFOL        ; All following bytes required
    2912/    52C5 : 78                  	LD      A,B             ; Get new length
    2913/    52C6 : 11                  	DB      11H             ; Skip "LD C,0"
    2914/    52C7 : 0E 00               ALLFOL: LD      C,0             ; First byte of string
    2915/    52C9 : C5                  	PUSH    BC              ; Save position in string
    2916/    52CA : CD 3D 51            	CALL    TESTR           ; See if enough string space
    2917/    52CD : C1                  	POP     BC              ; Get position in string
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 50 - 2/19/2023 19:38:37


    2918/    52CE : E1                  	POP     HL              ; Restore string block address
    2919/    52CF : E5                  	PUSH    HL              ; And re-save it
    2920/    52D0 : 23                  	INC     HL
    2921/    52D1 : 23                  	INC     HL
    2922/    52D2 : 46                  	LD      B,(HL)          ; Get LSB of address
    2923/    52D3 : 23                  	INC     HL
    2924/    52D4 : 66                  	LD      H,(HL)          ; Get MSB of address
    2925/    52D5 : 68                  	LD      L,B             ; HL = address of string
    2926/    52D6 : 06 00               	LD      B,0             ; BC = starting address
    2927/    52D8 : 09                  	ADD     HL,BC           ; Point to that byte
    2928/    52D9 : 44                  	LD      B,H             ; BC = source string
    2929/    52DA : 4D                  	LD      C,L
    2930/    52DB : CD DA 50            	CALL    CRTMST          ; Create a string entry
    2931/    52DE : 6F                  	LD      L,A             ; Length of new string
    2932/    52DF : CD 50 52            	CALL    TOSTRA          ; Move string to string area
    2933/    52E2 : D1                  	POP     DE              ; Clear stack
    2934/    52E3 : CD 60 52            	CALL    GSTRDE          ; Move to string pool if needed
    2935/    52E6 : C3 05 51            	JP      TSTOPL          ; Temporary string to pool
    2936/    52E9 :                     
    2937/    52E9 : CD E9 52            RIGHT:  CALL    LFRGNM          ; Get number and ending ")"
    2938/    52EC : D1                  	POP     DE              ; Get string length
    2939/    52ED : D5                  	PUSH    DE              ; And re-save
    2940/    52EE : 1A                  	LD      A,(DE)          ; Get length
    2941/    52EF : 90                  	SUB     B               ; Move back N bytes
    2942/    52F0 : 18 CC               	Jr      RIGHT1          ; Go and get sub-string
    2943/    52F2 :                     
    2944/    52F2 : EB                  MID:    EX      DE,HL           ; Get code string address
    2945/    52F3 : 7E                  	LD      A,(HL)          ; Get next byte ',' or ")"
    2946/    52F4 : CD F4 52            	CALL    MIDNUM          ; Get number supplied
    2947/    52F7 : 04                  	INC     B               ; Is it character zero?
    2948/    52F8 : 05                  	DEC     B
    2949/    52F9 : CA F1 48            	JP      Z,FCERR         ; Yes - Error
    2950/    52FC : C5                  	PUSH    BC              ; Save starting position
    2951/    52FD : 1E FF               	LD      E,255           ; All of string
    2952/    52FF : FE 29               	CP      ')'             ; Any length given?
    2953/    5301 : 28 FE               	Jr      Z,RSTSTR        ; No - Rest of string
    2954/    5303 : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
    2955/    5306 : 2C                  	DB      ','
    2956/    5307 : CD 07 53            	CALL    GETINT          ; Get integer 0-255
    2957/    530A : CD 7B 46            RSTSTR: CALL    CHKSYN          ; Make sure ")" follows
    2958/    530D : 29                  	DB      ")"
    2959/    530E : F1                  	POP     AF              ; Restore starting position
    2960/    530F : E3                  	EX      (SP),HL         ; Get string,8ave code string
    2961/    5310 : 01 C0 52            	LD      BC,MID1         ; Continuation of MID$ routine
    2962/    5313 : C5                  	PUSH    BC              ; Save for return
    2963/    5314 : 3D                  	DEC     A               ; Starting position-1
    2964/    5315 : BE                  	CP      (HL)            ; Compare with length
    2965/    5316 : 06 00               	LD      B,0             ; Zero bytes length
    2966/    5318 : D0                  	RET     NC              ; Null string if start past end
    2967/    5319 : 4F                  	LD      C,A             ; Save starting position-1
    2968/    531A : 7E                  	LD      A,(HL)          ; Get length of string
    2969/    531B : 91                  	SUB     C               ; Subtract start
    2970/    531C : BB                  	CP      E               ; Enough string for it?
    2971/    531D : 47                  	LD      B,A             ; Save maximum length available
    2972/    531E : D8                  	RET     C               ; Truncate string if needed
    2973/    531F : 43                  	LD      B,E             ; Set specified length
    2974/    5320 : C9                  	RET                     ; Go and create string
    2975/    5321 :                     
    2976/    5321 : CD 8E 52            VAL:    CALL    GETLEN          ; Get length of string
    2977/    5324 : CA 24 53            	JP      Z,RESZER        ; Result zero
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 51 - 2/19/2023 19:38:37


    2978/    5327 : 5F                  	LD      E,A             ; Save length
    2979/    5328 : 23                  	INC     HL
    2980/    5329 : 23                  	INC     HL
    2981/    532A : 7E                  	LD      A,(HL)          ; Get LSB of address
    2982/    532B : 23                  	INC     HL
    2983/    532C : 66                  	LD      H,(HL)          ; Get MSB of address
    2984/    532D : 6F                  	LD      L,A             ; HL = String address
    2985/    532E : E5                  	PUSH    HL              ; Save string address
    2986/    532F : 19                  	ADD     HL,DE
    2987/    5330 : 46                  	LD      B,(HL)          ; Get end of string+1 byte
    2988/    5331 : 72                  	LD      (HL),D          ; Zero it to terminate
    2989/    5332 : E3                  	EX      (SP),HL         ; Save string end,get start
    2990/    5333 : C5                  	PUSH    BC              ; Save end+1 byte
    2991/    5334 : 7E                  	LD      A,(HL)          ; Get starting byte
    2992/    5335 : CD 35 53            	CALL    ASCTFP          ; Convert ASCII string to FP
    2993/    5338 : C1                  	POP     BC              ; Restore end+1 byte
    2994/    5339 : E1                  	POP     HL              ; Restore end+1 address
    2995/    533A : 70                  	LD      (HL),B          ; Put back original byte
    2996/    533B : C9                  	RET
    2997/    533C :                     
    2998/    533C : EB                  LFRGNM: EX      DE,HL           ; Code string address to HL
    2999/    533D : CD 7B 46            	CALL    CHKSYN          ; Make sure ")" follows
    3000/    5340 : 29                  	DB      ")"
    3001/    5341 : C1                  MIDNUM: POP     BC              ; Get return address
    3002/    5342 : D1                  	POP     DE              ; Get number supplied
    3003/    5343 : C5                  	PUSH    BC              ; Re-save return address
    3004/    5344 : 43                  	LD      B,E             ; Number to B
    3005/    5345 : C9                  	RET
    3006/    5346 :                     
    3007/    5346 : CD 46 53            INP:    CALL    MAKINT          ; Make it integer A
    3008/    5349 : 4F                  	ld	c, a
    3009/    534A : ED 78               	in	a, (c)
    3010/    534C : C3 19 50            	JP      PASSA           ; Return integer A
    3011/    534F :                     
    3012/    534F : CD 4F 53            POUT:   CALL    SETIO           ; Set up port number
    3013/    5352 : 3A 06 60            	ld	a, (OTPORT)
    3014/    5355 : 4F                  	ld	c, a
    3015/    5356 : 7B                  	ld	a, e
    3016/    5357 : ED 79               	out	(c), a
    3017/    5359 : C9                  	ret
    3018/    535A :                     
    3019/    535A : CD 5A 53            WAIT:   CALL    SETIO           ; Set up port number
    3020/    535D : F5                  	PUSH    AF              ; Save AND mask
    3021/    535E : 1E 00               	LD      E,0             ; Assume zero if none given
    3022/    5360 : 2B                  	DEC     HL              ; DEC 'cos GETCHR INCs
    3023/    5361 : CD 5C 48            	CALL    GETCHR          ; Get next character
    3024/    5364 : 28 FE               	Jr      Z,NOXOR         ; No XOR byte given
    3025/    5366 : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
    3026/    5369 : 2C                  	DB      ','
    3027/    536A : CD 6A 53            	CALL    GETINT          ; Get integer 0-255 to XOR with
    3028/    536D : C1                  NOXOR:  POP     BC              ; Restore AND mask
    3029/    536E : 3A 06 60            	ld	a, (OTPORT)
    3030/    5371 : 4F                  	ld	c, a
    3031/    5372 :                     loc_5372:
    3032/    5372 : ED 78               	in	a, (c)
    3033/    5374 : AB                  	xor	e
    3034/    5375 : A0                  	and	b
    3035/    5376 : 28 FA               	jr	z, loc_5372
    3036/    5378 : C9                  	ret
    3037/    5379 :                     
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 52 - 2/19/2023 19:38:37


    3038/    5379 : CD 79 53            SETIO:  CALL    GETINT          ; Get integer 0-255
    3039/    537C : 32 06 60            	LD      (OTPORT),A      ; Set output port
    3040/    537F : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
    3041/    5382 : 2C                  	DB      ','
    3042/    5383 : 18 FE               	Jr      GETINT          ; Get integer 0-255 and return
    3043/    5385 :                     
    3044/    5385 : CD 5C 48            FNDNUM: CALL    GETCHR          ; Get next character
    3045/    5388 : CD 7E 4C            GETINT: CALL    GETNUM          ; Get a number from 0 to 255
    3046/    538B : CD D6 48            MAKINT: CALL    DEPINT          ; Make sure value 0 - 255
    3047/    538E : 7A                  	LD      A,D             ; Get MSB of number
    3048/    538F : B7                  	OR      A               ; Zero?
    3049/    5390 : C2 F1 48            	JP      NZ,FCERR        ; No - Error
    3050/    5393 : 2B                  	DEC     HL              ; DEC 'cos GETCHR INCs
    3051/    5394 : CD 5C 48            	CALL    GETCHR          ; Get next character
    3052/    5397 : 7B                  	LD      A,E             ; Get number to A
    3053/    5398 : C9                  	RET
    3054/    5399 :                     
    3055/    5399 : CD DC 48            PEEK:   CALL    DEINT           ; Get memory address
    3056/    539C : 1A                  	LD      A,(DE)          ; Get byte in memory
    3057/    539D : C3 19 50            	JP      PASSA           ; Return integer A
    3058/    53A0 :                     
    3059/    53A0 : CD 7E 4C            POKE:   CALL    GETNUM          ; Get memory address
    3060/    53A3 : CD DC 48            	CALL    DEINT           ; Get integer -32768 to 3276
    3061/    53A6 : D5                  	PUSH    DE              ; Save memory address
    3062/    53A7 : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
    3063/    53AA : 2C                  	DB      ','
    3064/    53AB : CD 88 53            	CALL    GETINT          ; Get integer 0-255
    3065/    53AE : D1                  	POP     DE              ; Restore memory address
    3066/    53AF : 12                  	LD      (DE),A          ; Load it into memory
    3067/    53B0 : C9                  	RET
    3068/    53B1 :                     
    3069/    53B1 : CD DC 48            DEEK:   CALL    DEINT           ; Get integer -32768 to 32767
    3070/    53B4 : D5                  	PUSH    DE              ; Save number
    3071/    53B5 : E1                  	POP     HL              ; Number to HL
    3072/    53B6 : 46                  	LD      B,(HL)          ; Get LSB of contents
    3073/    53B7 : 23                  	INC     HL
    3074/    53B8 : 7E                  	LD      A,(HL)          ; Get MSB of contents
    3075/    53B9 : C3 0A 50            	JP      ABPASS          ; Return integer AB
    3076/    53BC :                     
    3077/    53BC : CD 7E 4C            DOKE:   CALL    GETNUM          ; Get a number
    3078/    53BF : CD DC 48            	CALL    DEINT           ; Get integer -32768 to 32767
    3079/    53C2 : D5                  	PUSH    DE              ; Save address
    3080/    53C3 : CD 7B 46            	CALL    CHKSYN          ; Make sure ',' follows
    3081/    53C6 : 2C                  	DB      ','
    3082/    53C7 : CD 7E 4C            	CALL    GETNUM          ; Get a number
    3083/    53CA : CD DC 48            	CALL    DEINT           ; Get integer -32768 to 32767
    3084/    53CD : E3                  	EX      (SP),HL         ; Save value,get address
    3085/    53CE : 73                  	LD      (HL),E          ; Save LSB of value
    3086/    53CF : 23                  	INC     HL
    3087/    53D0 : 72                  	LD      (HL),D          ; Save MSB of value
    3088/    53D1 : E1                  	POP     HL              ; Restore code string address
    3089/    53D2 : C9                  	RET
    3090/    53D3 :                     
    3091/    53D3 : 21 D3 53            ROUND:  LD      HL,HALF         ; Add 0.5 to FPREG
    3092/    53D6 : CD D6 53            ADDPHL: CALL    LOADFP          ; Load FP at (HL) to BCDE
    3093/    53D9 : 18 FE               	Jr      FPADD           ; Add BCDE to FPREG
    3094/    53DB :                     
    3095/    53DB : CD DB 53            SUBPHL: CALL    LOADFP          ; FPREG = -FPREG + number at HL
    3096/    53DE : 21                  	DB      21H             ; Skip "POP BC" and "POP DE"
    3097/    53DF : C1                  PSUB:   POP     BC              ; Get FP number from stack
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 53 - 2/19/2023 19:38:37


    3098/    53E0 : D1                  	POP     DE
    3099/    53E1 : CD E1 53            SUBCDE: CALL    INVSGN          ; Negate FPREG
    3100/    53E4 : 78                  FPADD:  LD      A,B             ; Get FP exponent
    3101/    53E5 : B7                  	OR      A               ; Is number zero?
    3102/    53E6 : C8                  	RET     Z               ; Yes - Nothing to add
    3103/    53E7 : 3A E3 60            	LD      A,(FPEXP)       ; Get FPREG exponent
    3104/    53EA : B7                  	OR      A               ; Is this number zero?
    3105/    53EB : CA EB 53            	JP      Z,FPBCDE        ; Yes - Move BCDE to FPREG
    3106/    53EE : 90                  	SUB     B               ; BCDE number larger?
    3107/    53EF : 30 FE               	Jr      NC,NOSWAP       ; No - Don't swap them
    3108/    53F1 : 2F                  	CPL                     ; Two's complement
    3109/    53F2 : 3C                  	INC     A               ;  FP exponent
    3110/    53F3 : EB                  	EX      DE,HL
    3111/    53F4 : CD F4 53            	CALL    STAKFP          ; Put FPREG on stack
    3112/    53F7 : EB                  	EX      DE,HL
    3113/    53F8 : CD F8 53            	CALL    FPBCDE          ; Move BCDE to FPREG
    3114/    53FB : C1                  	POP     BC              ; Restore number from stack
    3115/    53FC : D1                  	POP     DE
    3116/    53FD : FE 19               NOSWAP: CP      24+1            ; Second number insignificant?
    3117/    53FF : D0                  	RET     NC              ; Yes - First number is result
    3118/    5400 : F5                  	PUSH    AF              ; Save number of bits to scale
    3119/    5401 : CD 01 54            	CALL    SIGNS           ; Set MSBs & sign of result
    3120/    5404 : 67                  	LD      H,A             ; Save sign of result
    3121/    5405 : F1                  	POP     AF              ; Restore scaling factor
    3122/    5406 : CD 06 54            	CALL    SCALE           ; Scale BCDE to same exponent
    3123/    5409 : B4                  	OR      H               ; Result to be positive?
    3124/    540A : 21 E0 60            	LD      HL,FPREG        ; Point to FPREG
    3125/    540D : F2 0D 54            	JP      P,MINCDE        ; No - Subtract FPREG from CDE
    3126/    5410 : CD 10 54            	CALL    PLUCDE          ; Add FPREG to CDE
    3127/    5413 : D2 13 54            	JP      NC,RONDUP       ; No overflow - Round it up
    3128/    5416 : 23                  	INC     HL              ; Point to exponent
    3129/    5417 : 34                  	INC     (HL)            ; Increment it
    3130/    5418 : CA 7F 43            	JP      Z,OVERR         ; Number overflowed - Error
    3131/    541B : 2E 01               	LD      L,1             ; 1 bit to shift right
    3132/    541D : CD 1D 54            	CALL    SHRT1           ; Shift result right
    3133/    5420 : C3 20 54            	JP      RONDUP          ; Round it up
    3134/    5423 :                     
    3135/    5423 : AF                  MINCDE: XOR     A               ; Clear A and carry
    3136/    5424 : 90                  	SUB     B               ; Negate exponent
    3137/    5425 : 47                  	LD      B,A             ; Re-save exponent
    3138/    5426 : 7E                  	LD      A,(HL)          ; Get LSB of FPREG
    3139/    5427 : 9B                  	SBC     A, E            ; Subtract LSB of BCDE
    3140/    5428 : 5F                  	LD      E,A             ; Save LSB of BCDE
    3141/    5429 : 23                  	INC     HL
    3142/    542A : 7E                  	LD      A,(HL)          ; Get NMSB of FPREG
    3143/    542B : 9A                  	SBC     A,D             ; Subtract NMSB of BCDE
    3144/    542C : 57                  	LD      D,A             ; Save NMSB of BCDE
    3145/    542D : 23                  	INC     HL
    3146/    542E : 7E                  	LD      A,(HL)          ; Get MSB of FPREG
    3147/    542F : 99                  	SBC     A,C             ; Subtract MSB of BCDE
    3148/    5430 : 4F                  	LD      C,A             ; Save MSB of BCDE
    3149/    5431 : DC 31 54            CONPOS: CALL    C,COMPL         ; Overflow - Make it positive
    3150/    5434 :                     
    3151/    5434 : 68                  BNORM:  LD      L,B             ; L = Exponent
    3152/    5435 : 63                  	LD      H,E             ; H = LSB
    3153/    5436 : AF                  	XOR     A
    3154/    5437 : 47                  BNRMLP: LD      B,A             ; Save bit count
    3155/    5438 : 79                  	LD      A,C             ; Get MSB
    3156/    5439 : B7                  	OR      A               ; Is it zero?
    3157/    543A : 20 FE               	Jr      NZ,PNORM        ; No - Do it bit at a time
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 54 - 2/19/2023 19:38:37


    3158/    543C : 4A                  	LD      C,D             ; MSB = NMSB
    3159/    543D : 54                  	LD      D,H             ; NMSB= LSB
    3160/    543E : 65                  	LD      H,L             ; LSB = VLSB
    3161/    543F : 6F                  	LD      L,A             ; VLSB= 0
    3162/    5440 : 78                  	LD      A,B             ; Get exponent
    3163/    5441 : D6 08               	SUB     8               ; Count 8 bits
    3164/    5443 : FE E0               	CP      -24-8           ; Was number zero?
    3165/    5445 : 20 F0               	Jr      NZ,BNRMLP       ; No - Keep normalising
    3166/    5447 : AF                  RESZER: XOR     A               ; Result is zero
    3167/    5448 : 32 E3 60            SAVEXP: LD      (FPEXP),A       ; Save result as zero
    3168/    544B : C9                  	RET
    3169/    544C :                     
    3170/    544C : 05                  NORMAL: DEC     B               ; Count bits
    3171/    544D : 29                  	ADD     HL,HL           ; Shift HL left
    3172/    544E : CB 12               	rl	d		; NMSB left with last bit
    3173/    5450 : CB 11               	rl	c		; MSB left with last bit
    3174/    5452 : F2 4C 54            PNORM:  JP      P,NORMAL        ; Not done - Keep going
    3175/    5455 : 78                  	LD      A,B             ; Number of bits shifted
    3176/    5456 : 5C                  	LD      E,H             ; Save HL in EB
    3177/    5457 : 45                  	LD      B,L
    3178/    5458 : B7                  	OR      A               ; Any shifting done?
    3179/    5459 : 28 FE               	Jr      Z,RONDUP        ; No - Round it up
    3180/    545B : 21 E3 60            	LD      HL,FPEXP        ; Point to exponent
    3181/    545E : 86                  	ADD     A,(HL)          ; Add shifted bits
    3182/    545F : 77                  	LD      (HL),A          ; Re-save exponent
    3183/    5460 : 30 E5               	Jr      NC,RESZER       ; Underflow - Result is zero
    3184/    5462 : C8                  	RET     Z               ; Result is zero
    3185/    5463 : 78                  RONDUP: LD      A,B             ; Get VLSB of number
    3186/    5464 : 21 E3 60            RONDB:  LD      HL,FPEXP        ; Point to exponent
    3187/    5467 : B7                  	OR      A               ; Any rounding?
    3188/    5468 : FC 68 54            	CALL    M,FPROND        ; Yes - Round number up
    3189/    546B : 46                  	LD      B,(HL)          ; B = Exponent
    3190/    546C : 23                  	INC     HL
    3191/    546D : 7E                  	LD      A,(HL)          ; Get sign of result
    3192/    546E : E6 80               	AND     10000000B       ; Only bit 7 needed
    3193/    5470 : A9                  	XOR     C               ; Set correct sign
    3194/    5471 : 4F                  	LD      C,A             ; Save correct sign in number
    3195/    5472 : C3 72 54            	JP      FPBCDE          ; Move BCDE to FPREG
    3196/    5475 :                     
    3197/    5475 : 1C                  FPROND: INC     E               ; Round LSB
    3198/    5476 : C0                  	RET     NZ              ; Return if ok
    3199/    5477 : 14                  	INC     D               ; Round NMSB
    3200/    5478 : C0                  	RET     NZ              ; Return if ok
    3201/    5479 : 0C                  	INC     C               ; Round MSB
    3202/    547A : C0                  	RET     NZ              ; Return if ok
    3203/    547B : 0E 80               	LD      C,80H           ; Set normal value
    3204/    547D : 34                  	INC     (HL)            ; Increment exponent
    3205/    547E : C0                  	RET     NZ              ; Return if ok
    3206/    547F : C3 7F 43            	JP      OVERR           ; Overflow error
    3207/    5482 :                     
    3208/    5482 : 7E                  PLUCDE: LD      A,(HL)          ; Get LSB of FPREG
    3209/    5483 : 83                  	ADD     A,E             ; Add LSB of BCDE
    3210/    5484 : 5F                  	LD      E,A             ; Save LSB of BCDE
    3211/    5485 : 23                  	INC     HL
    3212/    5486 : 7E                  	LD      A,(HL)          ; Get NMSB of FPREG
    3213/    5487 : 8A                  	ADC     A,D             ; Add NMSB of BCDE
    3214/    5488 : 57                  	LD      D,A             ; Save NMSB of BCDE
    3215/    5489 : 23                  	INC     HL
    3216/    548A : 7E                  	LD      A,(HL)          ; Get MSB of FPREG
    3217/    548B : 89                  	ADC     A,C             ; Add MSB of BCDE
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 55 - 2/19/2023 19:38:37


    3218/    548C : 4F                  	LD      C,A             ; Save MSB of BCDE
    3219/    548D : C9                  	RET
    3220/    548E :                     
    3221/    548E : 21 E4 60            COMPL:  LD      HL,SGNRES       ; Sign of result
    3222/    5491 : 7E                  	LD      A,(HL)          ; Get sign of result
    3223/    5492 : 2F                  	CPL                     ; Negate it
    3224/    5493 : 77                  	LD      (HL),A          ; Put it back
    3225/    5494 : AF                  	XOR     A
    3226/    5495 : 6F                  	LD      L,A             ; Set L to zero
    3227/    5496 : 90                  	SUB     B               ; Negate exponent,set carry
    3228/    5497 : 47                  	LD      B,A             ; Re-save exponent
    3229/    5498 : 7D                  	LD      A,L             ; Load zero
    3230/    5499 : 9B                  	SBC     A,E             ; Negate LSB
    3231/    549A : 5F                  	LD      E,A             ; Re-save LSB
    3232/    549B : 7D                  	LD      A,L             ; Load zero
    3233/    549C : 9A                  	SBC     A,D             ; Negate NMSB
    3234/    549D : 57                  	LD      D,A             ; Re-save NMSB
    3235/    549E : 7D                  	LD      A,L             ; Load zero
    3236/    549F : 99                  	SBC     A,C             ; Negate MSB
    3237/    54A0 : 4F                  	LD      C,A             ; Re-save MSB
    3238/    54A1 : C9                  	RET
    3239/    54A2 :                     
    3240/    54A2 : 06 00               SCALE:  LD      B,0             ; Clear underflow
    3241/    54A4 : D6 08               SCALLP: SUB     8               ; 8 bits (a whole byte)?
    3242/    54A6 : 38 FE               	Jr      C,SHRITE        ; No - Shift right A bits
    3243/    54A8 : 43                  	LD      B,E             ; <- Shift
    3244/    54A9 : 5A                  	LD      E,D             ; <- right
    3245/    54AA : 51                  	LD      D,C             ; <- eight
    3246/    54AB : 0E 00               	LD      C,0             ; <- bits
    3247/    54AD : 18 F5               	Jr      SCALLP          ; More bits to shift
    3248/    54AF :                     
    3249/    54AF : C6 09               SHRITE: ADD     A,8+1           ; Adjust count
    3250/    54B1 : 6F                  	LD      L,A             ; Save bits to shift
    3251/    54B2 : AF                  SHRLP:  XOR     A               ; Flag for all done
    3252/    54B3 : 2D                  	DEC     L               ; All shifting done?
    3253/    54B4 : C8                  	RET     Z               ; Yes - Return
    3254/    54B5 : 79                  	LD      A,C             ; Get MSB
    3255/    54B6 : 1F                  SHRT1:  RRA                     ; Shift it right
    3256/    54B7 : 4F                  	LD      C,A             ; Re-save
    3257/    54B8 : CB 1A               	rr	d		; NMSB Shift right with last bit
    3258/    54BA : CB 1B               	rr	e		; LSB Shift right with last bit
    3259/    54BC : CB 18               	rr	b		; underflow Shift right with last bit
    3260/    54BE : 18 F2               	Jr      SHRLP           ; More bits to do
    3261/    54C0 :                     
    3262/    54C0 : 00 00 00 81         UNITY:  DB       000H,000H,000H,081H    ; 1.00000
    3263/    54C4 :                     
    3264/    54C4 : 03                  LOGTAB: DB      3                       ; Table used by LOG
    3265/    54C5 : AA 56 19 80         	DB      0AAH,056H,019H,080H     ; 0.59898
    3266/    54C9 : F1 22 76 80         	DB      0F1H,022H,076H,080H     ; 0.96147
    3267/    54CD : 45 AA 38 82         	DB      045H,0AAH,038H,082H     ; 2.88539
    3268/    54D1 :                     
    3269/    54D1 : CD D1 54            LOG:    CALL    TSTSGN          ; Test sign of value
    3270/    54D4 : B7                  	OR      A
    3271/    54D5 : EA F1 48            	JP      PE,FCERR        ; ?FC Error if <= zero
    3272/    54D8 : 21 E3 60            	LD      HL,FPEXP        ; Point to exponent
    3273/    54DB : 7E                  	LD      A,(HL)          ; Get exponent
    3274/    54DC : 01 35 80            	LD      BC,8035H        ; BCDE = SQR(1/2)
    3275/    54DF : 11 F3 04            	LD      DE,04F3H
    3276/    54E2 : 90                  	SUB     B               ; Scale value to be < 1
    3277/    54E3 : F5                  	PUSH    AF              ; Save scale factor
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 56 - 2/19/2023 19:38:37


    3278/    54E4 : 70                  	LD      (HL),B          ; Save new exponent
    3279/    54E5 : D5                  	PUSH    DE              ; Save SQR(1/2)
    3280/    54E6 : C5                  	PUSH    BC
    3281/    54E7 : CD E4 53            	CALL    FPADD           ; Add SQR(1/2) to value
    3282/    54EA : C1                  	POP     BC              ; Restore SQR(1/2)
    3283/    54EB : D1                  	POP     DE
    3284/    54EC : 04                  	INC     B               ; Make it SQR(2)
    3285/    54ED : CD ED 54            	CALL    DVBCDE          ; Divide by SQR(2)
    3286/    54F0 : 21 C0 54            	LD      HL,UNITY        ; Point to 1.
    3287/    54F3 : CD DB 53            	CALL    SUBPHL          ; Subtract FPREG from 1
    3288/    54F6 : 21 C4 54            	LD      HL,LOGTAB       ; Coefficient table
    3289/    54F9 : CD F9 54            	CALL    SUMSER          ; Evaluate sum of series
    3290/    54FC : 01 80 80            	LD      BC,8080H        ; BCDE = -0.5
    3291/    54FF : 11 00 00            	LD      DE,0000H
    3292/    5502 : CD E4 53            	CALL    FPADD           ; Subtract 0.5 from FPREG
    3293/    5505 : F1                  	POP     AF              ; Restore scale factor
    3294/    5506 : CD 06 55            	CALL    RSCALE          ; Re-scale number
    3295/    5509 : 01 31 80            MULLN2: LD      BC,8031H        ; BCDE = Ln(2)
    3296/    550C : 11 18 72            	LD      DE,7218H
    3297/    550F : 21                  	DB      21H             ; Skip "POP BC" and "POP DE"
    3298/    5510 :                     
    3299/    5510 : C1                  MULT:   POP     BC              ; Get number from stack
    3300/    5511 : D1                  	POP     DE
    3301/    5512 : CD 12 55            FPMULT: CALL    TSTSGN          ; Test sign of FPREG
    3302/    5515 : C8                  	RET     Z               ; Return zero if zero
    3303/    5516 : 2E 00               	LD      L,0             ; Flag add exponents
    3304/    5518 : CD 18 55            	CALL    ADDEXP          ; Add exponents
    3305/    551B : 79                  	LD      A,C             ; Get MSB of multiplier
    3306/    551C : 32 F2 60            	LD      (MULVAL),A      ; Save MSB of multiplier
    3307/    551F : EB                  	EX      DE,HL
    3308/    5520 : 22 F3 60            	LD      (MULVAL+1),HL   ; Save rest of multiplier
    3309/    5523 : 01 00 00            	LD      BC,0            ; Partial product (BCDE) = zero
    3310/    5526 : 50                  	LD      D,B
    3311/    5527 : 58                  	LD      E,B
    3312/    5528 : 21 34 54            	LD      HL,BNORM        ; Address of normalise
    3313/    552B : E5                  	PUSH    HL              ; Save for return
    3314/    552C : 21 2C 55            	LD      HL,MULT8        ; Address of 8 bit multiply
    3315/    552F : E5                  	PUSH    HL              ; Save for NMSB,MSB
    3316/    5530 : E5                  	PUSH    HL              ;
    3317/    5531 : 21 E0 60            	LD      HL,FPREG        ; Point to number
    3318/    5534 : 7E                  MULT8:  LD      A,(HL)          ; Get LSB of number
    3319/    5535 : 23                  	INC     HL              ; Point to NMSB
    3320/    5536 : B7                  	OR      A               ; Test LSB
    3321/    5537 : 28 FE               	Jr      Z,BYTSFT        ; Zero - shift to next byte
    3322/    5539 : E5                  	PUSH    HL              ; Save address of number
    3323/    553A : 2E 08               	LD      L,8             ; 8 bits to multiply by
    3324/    553C : 1F                  MUL8LP: RRA                     ; Shift LSB right
    3325/    553D : 67                  	LD      H,A             ; Save LSB
    3326/    553E : 79                  	LD      A,C             ; Get MSB
    3327/    553F : 30 FE               	Jr      NC,NOMADD       ; Bit was zero - Don't add
    3328/    5541 : E5                  	PUSH    HL              ; Save LSB and count
    3329/    5542 : 2A F3 60            	LD      HL,(MULVAL+1)   ; Get LSB and NMSB
    3330/    5545 : 19                  	ADD     HL,DE           ; Add NMSB and LSB
    3331/    5546 : EB                  	EX      DE,HL           ; Leave sum in DE
    3332/    5547 : E1                  	POP     HL              ; Restore MSB and count
    3333/    5548 : 3A F2 60            	LD      A,(MULVAL)      ; Get MSB of multiplier
    3334/    554B : 89                  	ADC     A,C             ; Add MSB
    3335/    554C : 1F                  NOMADD: RRA                     ; Shift MSB right
    3336/    554D : 4F                  	LD      C,A             ; Re-save MSB
    3337/    554E : CB 1A               	rr	d		; Shift NMSB right
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 57 - 2/19/2023 19:38:37


    3338/    5550 : CB 1B               	rr	e		; Shift LSB right
    3339/    5552 : CB 18               	rr	b		; Shift VLSB right
    3340/    5554 : 2D                  	DEC     L               ; Count bits multiplied
    3341/    5555 : 7C                  	LD      A,H             ; Get LSB of multiplier
    3342/    5556 : 20 E4               	Jr      NZ,MUL8LP       ; More - Do it
    3343/    5558 : E1                  POPHRT: POP     HL              ; Restore address of number
    3344/    5559 : C9                  	RET
    3345/    555A :                     
    3346/    555A : 43                  BYTSFT: LD      B,E             ; Shift partial product left
    3347/    555B : 5A                  	LD      E,D
    3348/    555C : 51                  	LD      D,C
    3349/    555D : 4F                  	LD      C,A
    3350/    555E : C9                  	RET
    3351/    555F :                     
    3352/    555F : CD 5F 55            DIV10:  CALL    STAKFP          ; Save FPREG on stack
    3353/    5562 : 01 20 84            	LD      BC,8420H        ; BCDE = 10.
    3354/    5565 : 11 00 00            	LD      DE,0000H
    3355/    5568 : CD 68 55            	CALL    FPBCDE          ; Move 10 to FPREG
    3356/    556B :                     
    3357/    556B : C1                  DIV:    POP     BC              ; Get number from stack
    3358/    556C : D1                  	POP     DE
    3359/    556D : CD 6D 55            DVBCDE: CALL    TSTSGN          ; Test sign of FPREG
    3360/    5570 : CA 73 43            	JP      Z,DZERR         ; Error if division by zero
    3361/    5573 : 2E FF               	LD      L,-1            ; Flag subtract exponents
    3362/    5575 : CD 75 55            	CALL    ADDEXP          ; Subtract exponents
    3363/    5578 : 34                  	INC     (HL)            ; Add 2 to exponent to adjust
    3364/    5579 : 34                  	INC     (HL)
    3365/    557A : 2B                  	DEC     HL              ; Point to MSB
    3366/    557B : 7E                  	LD      A,(HL)          ; Get MSB of dividend
    3367/    557C : 32 14 60            	LD      (DIV3),A        ; Save for subtraction
    3368/    557F : 2B                  	DEC     HL
    3369/    5580 : 7E                  	LD      A,(HL)          ; Get NMSB of dividend
    3370/    5581 : 32 10 60            	LD      (DIV2),A        ; Save for subtraction
    3371/    5584 : 2B                  	DEC     HL
    3372/    5585 : 7E                  	LD      A,(HL)          ; Get MSB of dividend
    3373/    5586 : 32 0C 60            	LD      (DIV1),A        ; Save for subtraction
    3374/    5589 : 41                  	LD      B,C             ; Get MSB
    3375/    558A : EB                  	EX      DE,HL           ; NMSB,LSB to HL
    3376/    558B : AF                  	XOR     A
    3377/    558C : 4F                  	LD      C,A             ; Clear MSB of quotient
    3378/    558D : 57                  	LD      D,A             ; Clear NMSB of quotient
    3379/    558E : 5F                  	LD      E,A             ; Clear LSB of quotient
    3380/    558F : 32 17 60            	LD      (DIV4),A        ; Clear overflow count
    3381/    5592 : E5                  DIVLP:  PUSH    HL              ; Save divisor
    3382/    5593 : C5                  	PUSH    BC
    3383/    5594 : 7D                  	LD      A,L             ; Get LSB of number
    3384/    5595 : CD 0B 60            	CALL    DIVSUP          ; Subt' divisor from dividend
    3385/    5598 : DE 00               	SBC     A,0             ; Count for overflows
    3386/    559A : 3F                  	CCF
    3387/    559B : 30 FE               	Jr      NC,RESDIV       ; Restore divisor if borrow
    3388/    559D : 32 17 60            	LD      (DIV4),A        ; Re-save overflow count
    3389/    55A0 : F1                  	POP     AF              ; Scrap divisor
    3390/    55A1 : F1                  	POP     AF
    3391/    55A2 : 37                  	SCF                     ; Set carry to
    3392/    55A3 : D2                  	DB      0D2H            ; Skip "POP BC" and "POP HL"
    3393/    55A4 :                     
    3394/    55A4 : C1                  RESDIV: POP     BC              ; Restore divisor
    3395/    55A5 : E1                  	POP     HL
    3396/    55A6 : 79                  	LD      A,C             ; Get MSB of quotient
    3397/    55A7 : 3C                  	INC     A
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 58 - 2/19/2023 19:38:37


    3398/    55A8 : 3D                  	DEC     A
    3399/    55A9 : 1F                  	RRA                     ; Bit 0 to bit 7
    3400/    55AA : FA 64 54            	JP      M,RONDB         ; Done - Normalise result
    3401/    55AD : 17                  	RLA                     ; Restore carry
    3402/    55AE : CB 13               	rl	e		; Double LSB of quotient
    3403/    55B0 : CB 12               	rl	d		; Double NMSB of quotient
    3404/    55B2 : CB 11               	rl	c		; Double MSB of quotient
    3405/    55B4 : 29                  	ADD     HL,HL           ; Double NMSB,LSB of divisor
    3406/    55B5 : CB 10               	rl	b		; Double MSB of quotient
    3407/    55B7 : 3A 17 60            	LD      A,(DIV4)        ; Get VLSB of quotient
    3408/    55BA : 17                  	RLA                     ; Double it
    3409/    55BB : 32 17 60            	LD      (DIV4),A        ; Put it back
    3410/    55BE : 79                  	LD      A,C             ; Get MSB of quotient
    3411/    55BF : B2                  	OR      D               ; Merge NMSB
    3412/    55C0 : B3                  	OR      E               ; Merge LSB
    3413/    55C1 : 20 CF               	Jr      NZ,DIVLP        ; Not done - Keep dividing
    3414/    55C3 : E5                  	PUSH    HL              ; Save divisor
    3415/    55C4 : 21 E3 60            	LD      HL,FPEXP        ; Point to exponent
    3416/    55C7 : 35                  	DEC     (HL)            ; Divide by 2
    3417/    55C8 : E1                  	POP     HL              ; Restore divisor
    3418/    55C9 : 20 C7               	Jr      NZ,DIVLP        ; Ok - Keep going
    3419/    55CB : C3 7F 43            	JP      OVERR           ; Overflow error
    3420/    55CE :                     
    3421/    55CE : 78                  ADDEXP: LD      A,B             ; Get exponent of dividend
    3422/    55CF : B7                  	OR      A               ; Test it
    3423/    55D0 : CA D0 55            	JP      Z,OVTST3        ; Zero - Result zero
    3424/    55D3 : 7D                  	LD      A,L             ; Get add/subtract flag
    3425/    55D4 : 21 E3 60            	LD      HL,FPEXP        ; Point to exponent
    3426/    55D7 : AE                  	XOR     (HL)            ; Add or subtract it
    3427/    55D8 : 80                  	ADD     A,B             ; Add the other exponent
    3428/    55D9 : 47                  	LD      B,A             ; Save new exponent
    3429/    55DA : 1F                  	RRA                     ; Test exponent for overflow
    3430/    55DB : A8                  	XOR     B
    3431/    55DC : 78                  	LD      A,B             ; Get exponent
    3432/    55DD : F2 DD 55            	JP      P,OVTST2        ; Positive - Test for overflow
    3433/    55E0 : C6 80               	ADD     A,80H           ; Add excess 128
    3434/    55E2 : 77                  	LD      (HL),A          ; Save new exponent
    3435/    55E3 : CA 58 55            	JP      Z,POPHRT        ; Zero - Result zero
    3436/    55E6 : CD E6 55            	CALL    SIGNS           ; Set MSBs and sign of result
    3437/    55E9 : 77                  	LD      (HL),A          ; Save new exponent
    3438/    55EA : 2B                  	DEC     HL              ; Point to MSB
    3439/    55EB : C9                  	RET
    3440/    55EC :                     
    3441/    55EC : CD EC 55            OVTST1: CALL    TSTSGN          ; Test sign of FPREG
    3442/    55EF : 2F                  	CPL                     ; Invert sign
    3443/    55F0 : E1                  	POP     HL              ; Clean up stack
    3444/    55F1 : B7                  OVTST2: OR      A               ; Test if new exponent zero
    3445/    55F2 : E1                  OVTST3: POP     HL              ; Clear off return address
    3446/    55F3 : F2 47 54            	JP      P,RESZER        ; Result zero
    3447/    55F6 : C3 7F 43            	JP      OVERR           ; Overflow error
    3448/    55F9 :                     
    3449/    55F9 : CD F9 55            MLSP10: CALL    BCDEFP          ; Move FPREG to BCDE
    3450/    55FC : 78                  	LD      A,B             ; Get exponent
    3451/    55FD : B7                  	OR      A               ; Is it zero?
    3452/    55FE : C8                  	RET     Z               ; Yes - Result is zero
    3453/    55FF : C6 02               	ADD     A,2             ; Multiply by 4
    3454/    5601 : DA 7F 43            	JP      C,OVERR         ; Overflow - ?OV Error
    3455/    5604 : 47                  	LD      B,A             ; Re-save exponent
    3456/    5605 : CD E4 53            	CALL    FPADD           ; Add BCDE to FPREG (Times 5)
    3457/    5608 : 21 E3 60            	LD      HL,FPEXP        ; Point to exponent
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 59 - 2/19/2023 19:38:37


    3458/    560B : 34                  	INC     (HL)            ; Double number (Times 10)
    3459/    560C : C0                  	RET     NZ              ; Ok - Return
    3460/    560D : C3 7F 43            	JP      OVERR           ; Overflow error
    3461/    5610 :                     
    3462/    5610 : 3A E3 60            TSTSGN: LD      A,(FPEXP)       ; Get sign of FPREG
    3463/    5613 : B7                  	OR      A
    3464/    5614 : C8                  	RET     Z               ; RETurn if number is zero
    3465/    5615 : 3A E2 60            	LD      A,(FPREG+2)     ; Get MSB of FPREG
    3466/    5618 : FE                  	DB      0FEH            ; Test sign
    3467/    5619 : 2F                  RETREL: CPL                     ; Invert sign
    3468/    561A : 17                  	RLA                     ; Sign bit to carry
    3469/    561B : 9F                  FLGDIF: SBC     A,A             ; Carry to all bits of A
    3470/    561C : C0                  	RET     NZ              ; Return -1 if negative
    3471/    561D : 3C                  	INC     A               ; Bump to +1
    3472/    561E : C9                  	RET                     ; Positive - Return +1
    3473/    561F :                     
    3474/    561F : CD 10 56            SGN:    CALL    TSTSGN          ; Test sign of FPREG
    3475/    5622 : 06 88               FLGREL: LD      B,80H+8         ; 8 bit integer in exponent
    3476/    5624 : 11 00 00            	LD      DE,0            ; Zero NMSB and LSB
    3477/    5627 : 21 E3 60            RETINT: LD      HL,FPEXP        ; Point to exponent
    3478/    562A : 4F                  	LD      C,A             ; CDE = MSB,NMSB and LSB
    3479/    562B : 70                  	LD      (HL),B          ; Save exponent
    3480/    562C : 06 00               	LD      B,0             ; CDE = integer to normalise
    3481/    562E : 23                  	INC     HL              ; Point to sign of result
    3482/    562F : 36 80               	LD      (HL),80H        ; Set sign of result
    3483/    5631 : 17                  	RLA                     ; Carry = sign of integer
    3484/    5632 : C3 31 54            	JP      CONPOS          ; Set sign of result
    3485/    5635 :                     
    3486/    5635 : CD 10 56            ABS:    CALL    TSTSGN          ; Test sign of FPREG
    3487/    5638 : F0                  	RET     P               ; Return if positive
    3488/    5639 : 21 E2 60            INVSGN: LD      HL,FPREG+2      ; Point to MSB
    3489/    563C : 7E                  	LD      A,(HL)          ; Get sign of mantissa
    3490/    563D : EE 80               	XOR     80H             ; Invert sign of mantissa
    3491/    563F : 77                  	LD      (HL),A          ; Re-save sign of mantissa
    3492/    5640 : C9                  	RET
    3493/    5641 :                     
    3494/    5641 : EB                  STAKFP: EX      DE,HL           ; Save code string address
    3495/    5642 : 2A E0 60            	LD      HL,(FPREG)      ; LSB,NLSB of FPREG
    3496/    5645 : E3                  	EX      (SP),HL         ; Stack them,get return
    3497/    5646 : E5                  	PUSH    HL              ; Re-save return
    3498/    5647 : 2A E2 60            	LD      HL,(FPREG+2)    ; MSB and exponent of FPREG
    3499/    564A : E3                  	EX      (SP),HL         ; Stack them,get return
    3500/    564B : E5                  	PUSH    HL              ; Re-save return
    3501/    564C : EB                  	EX      DE,HL           ; Restore code string address
    3502/    564D : C9                  	RET
    3503/    564E :                     
    3504/    564E : CD 4E 56            PHLTFP: CALL    LOADFP          ; Number at HL to BCDE
    3505/    5651 : ED 53 E0 60         FPBCDE: LD      (FPREG),DE      ; Save LSB,NLSB of number
    3506/    5655 : ED 43 E2 60         	LD      (FPREG+2),BC    ; Save MSB and exponent
    3507/    5659 : 50                  	ld	d, b
    3508/    565A : 59                  	ld	e, c
    3509/    565B : C9                  	RET
    3510/    565C :                     
    3511/    565C : 21 E0 60            BCDEFP: LD      HL,FPREG        ; Point to FPREG
    3512/    565F : 5E                  LOADFP: LD      E,(HL)          ; Get LSB of number
    3513/    5660 : 23                  	INC     HL
    3514/    5661 : 56                  	LD      D,(HL)          ; Get NMSB of number
    3515/    5662 : 23                  	INC     HL
    3516/    5663 : 4E                  	LD      C,(HL)          ; Get MSB of number
    3517/    5664 : 23                  	INC     HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 60 - 2/19/2023 19:38:37


    3518/    5665 : 46                  	LD      B,(HL)          ; Get exponent of number
    3519/    5666 : 23                  INCHL:  INC     HL              ; Used for conditional "INC HL"
    3520/    5667 : C9                  	RET
    3521/    5668 :                     
    3522/    5668 : 11 E0 60            FPTHL:  LD      DE,FPREG        ; Point to FPREG
    3523/    566B : 06 04               DETHL4: LD      B,4             ; 4 bytes to move
    3524/    566D : 1A                  DETHLB: LD      A,(DE)          ; Get source
    3525/    566E : 77                  	LD      (HL),A          ; Save destination
    3526/    566F : 13                  	INC     DE              ; Next source
    3527/    5670 : 23                  	INC     HL              ; Next destination
    3528/    5671 : 10 FA               	djnz	DETHLB       ; Loop if more
    3529/    5673 : C9                  	RET
    3530/    5674 :                     
    3531/    5674 : 21 E2 60            SIGNS:  LD      HL,FPREG+2      ; Point to MSB of FPREG
    3532/    5677 : 7E                  	LD      A,(HL)          ; Get MSB
    3533/    5678 : 07                  	RLCA                    ; Old sign to carry
    3534/    5679 : 37                  	SCF                     ; Set MSBit
    3535/    567A : 1F                  	RRA                     ; Set MSBit of MSB
    3536/    567B : 77                  	LD      (HL),A          ; Save new MSB
    3537/    567C : 3F                  	CCF                     ; Complement sign
    3538/    567D : 1F                  	RRA                     ; Old sign to carry
    3539/    567E : 23                  	INC     HL
    3540/    567F : 23                  	INC     HL
    3541/    5680 : 77                  	LD      (HL),A          ; Set sign of result
    3542/    5681 : 79                  	LD      A,C             ; Get MSB
    3543/    5682 : 07                  	RLCA                    ; Old sign to carry
    3544/    5683 : 37                  	SCF                     ; Set MSBit
    3545/    5684 : 1F                  	RRA                     ; Set MSBit of MSB
    3546/    5685 : 4F                  	LD      C,A             ; Save MSB
    3547/    5686 : 1F                  	RRA
    3548/    5687 : AE                  	XOR     (HL)            ; New sign of result
    3549/    5688 : C9                  	RET
    3550/    5689 :                     
    3551/    5689 : 78                  CMPNUM: LD      A,B             ; Get exponent of number
    3552/    568A : B7                  	OR      A
    3553/    568B : CA 10 56            	JP      Z,TSTSGN        ; Zero - Test sign of FPREG
    3554/    568E : 21 19 56            	LD      HL,RETREL       ; Return relation routine
    3555/    5691 : E5                  	PUSH    HL              ; Save for return
    3556/    5692 : CD 10 56            	CALL    TSTSGN          ; Test sign of FPREG
    3557/    5695 : 79                  	LD      A,C             ; Get MSB of number
    3558/    5696 : C8                  	RET     Z               ; FPREG zero - Number's MSB
    3559/    5697 : 21 E2 60            	LD      HL,FPREG+2      ; MSB of FPREG
    3560/    569A : AE                  	XOR     (HL)            ; Combine signs
    3561/    569B : 79                  	LD      A,C             ; Get MSB of number
    3562/    569C : F8                  	RET     M               ; Exit if signs different
    3563/    569D : CD 9D 56            	CALL    CMPFP           ; Compare FP numbers
    3564/    56A0 : 1F                  	RRA                     ; Get carry to sign
    3565/    56A1 : A9                  	XOR     C               ; Combine with MSB of number
    3566/    56A2 : C9                  	RET
    3567/    56A3 :                     
    3568/    56A3 : 23                  CMPFP:  INC     HL              ; Point to exponent
    3569/    56A4 : 78                  	LD      A,B             ; Get exponent
    3570/    56A5 : BE                  	CP      (HL)            ; Compare exponents
    3571/    56A6 : C0                  	RET     NZ              ; Different
    3572/    56A7 : 2B                  	DEC     HL              ; Point to MBS
    3573/    56A8 : 79                  	LD      A,C             ; Get MSB
    3574/    56A9 : BE                  	CP      (HL)            ; Compare MSBs
    3575/    56AA : C0                  	RET     NZ              ; Different
    3576/    56AB : 2B                  	DEC     HL              ; Point to NMSB
    3577/    56AC : 7A                  	LD      A,D             ; Get NMSB
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 61 - 2/19/2023 19:38:37


    3578/    56AD : BE                  	CP      (HL)            ; Compare NMSBs
    3579/    56AE : C0                  	RET     NZ              ; Different
    3580/    56AF : 2B                  	DEC     HL              ; Point to LSB
    3581/    56B0 : 7B                  	LD      A,E             ; Get LSB
    3582/    56B1 : 96                  	SUB     (HL)            ; Compare LSBs
    3583/    56B2 : C0                  	RET     NZ              ; Different
    3584/    56B3 : E1                  	POP     HL              ; Drop RETurn
    3585/    56B4 : E1                  	POP     HL              ; Drop another RETurn
    3586/    56B5 : C9                  	RET
    3587/    56B6 :                     
    3588/    56B6 : 47                  FPINT:  LD      B,A             ; <- Move
    3589/    56B7 : 4F                  	LD      C,A             ; <- exponent
    3590/    56B8 : 57                  	LD      D,A             ; <- to all
    3591/    56B9 : 5F                  	LD      E,A             ; <- bits
    3592/    56BA : B7                  	OR      A               ; Test exponent
    3593/    56BB : C8                  	RET     Z               ; Zero - Return zero
    3594/    56BC : E5                  	PUSH    HL              ; Save pointer to number
    3595/    56BD : CD 5C 56            	CALL    BCDEFP          ; Move FPREG to BCDE
    3596/    56C0 : CD 74 56            	CALL    SIGNS           ; Set MSBs & sign of result
    3597/    56C3 : AE                  	XOR     (HL)            ; Combine with sign of FPREG
    3598/    56C4 : 67                  	LD      H,A             ; Save combined signs
    3599/    56C5 : FC C5 56            	CALL    M,DCBCDE        ; Negative - Decrement BCDE
    3600/    56C8 : 3E 98               	LD      A,80H+24        ; 24 bits
    3601/    56CA : 90                  	SUB     B               ; Bits to shift
    3602/    56CB : CD A2 54            	CALL    SCALE           ; Shift BCDE
    3603/    56CE : 7C                  	LD      A,H             ; Get combined sign
    3604/    56CF : 17                  	RLA                     ; Sign to carry
    3605/    56D0 : DC 75 54            	CALL    C,FPROND        ; Negative - Round number up
    3606/    56D3 : 06 00               	LD      B,0             ; Zero exponent
    3607/    56D5 : DC 8E 54            	CALL    C,COMPL         ; If negative make positive
    3608/    56D8 : E1                  	POP     HL              ; Restore pointer to number
    3609/    56D9 : C9                  	RET
    3610/    56DA :                     
    3611/    56DA : 1B                  DCBCDE: DEC     DE              ; Decrement BCDE
    3612/    56DB : 7A                  	LD      A,D             ; Test LSBs
    3613/    56DC : A3                  	AND     E
    3614/    56DD : 3C                  	INC     A
    3615/    56DE : C0                  	RET     NZ              ; Exit if LSBs not FFFF
    3616/    56DF : 0B                  	DEC     BC              ; Decrement MSBs
    3617/    56E0 : C9                  	RET
    3618/    56E1 :                     
    3619/    56E1 : 21 E3 60            INT:    LD      HL,FPEXP        ; Point to exponent
    3620/    56E4 : 7E                  	LD      A,(HL)          ; Get exponent
    3621/    56E5 : FE 98               	CP      80H+24          ; Integer accuracy only?
    3622/    56E7 : 3A E0 60            	LD      A,(FPREG)       ; Get LSB
    3623/    56EA : D0                  	RET     NC              ; Yes - Already integer
    3624/    56EB : 7E                  	LD      A,(HL)          ; Get exponent
    3625/    56EC : CD B6 56            	CALL    FPINT           ; F.P to integer
    3626/    56EF : 36 98               	LD      (HL),80H+24     ; Save 24 bit integer
    3627/    56F1 : 7B                  	LD      A,E             ; Get LSB of number
    3628/    56F2 : F5                  	PUSH    AF              ; Save LSB
    3629/    56F3 : 79                  	LD      A,C             ; Get MSB of number
    3630/    56F4 : 17                  	RLA                     ; Sign to carry
    3631/    56F5 : CD 31 54            	CALL    CONPOS          ; Set sign of result
    3632/    56F8 : F1                  	POP     AF              ; Restore LSB of number
    3633/    56F9 : C9                  	RET
    3634/    56FA :                     
    3635/    56FA : 21 00 00            MLDEBC: LD      HL,0            ; Clear partial product
    3636/    56FD : 78                  	LD      A,B             ; Test multiplier
    3637/    56FE : B1                  	OR      C
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 62 - 2/19/2023 19:38:37


    3638/    56FF : C8                  	RET     Z               ; Return zero if zero
    3639/    5700 : 3E 10               	LD      A,16            ; 16 bits
    3640/    5702 : 29                  MLDBLP: ADD     HL,HL           ; Shift P.P left
    3641/    5703 : DA 64 4F            	JP      C,BSERR         ; ?BS Error if overflow
    3642/    5706 : EB                  	EX      DE,HL
    3643/    5707 : 29                  	ADD     HL,HL           ; Shift multiplier left
    3644/    5708 : EB                  	EX      DE,HL
    3645/    5709 : 30 FE               	Jr      NC,NOMLAD       ; Bit was zero - No add
    3646/    570B : 09                  	ADD     HL,BC           ; Add multiplicand
    3647/    570C : DA 64 4F            	JP      C,BSERR         ; ?BS Error if overflow
    3648/    570F : 3D                  NOMLAD: DEC     A               ; Count bits
    3649/    5710 : 20 F0               	Jr      NZ,MLDBLP       ; More
    3650/    5712 : C9                  	RET
    3651/    5713 :                     
    3652/    5713 : FE 2D               ASCTFP: CP      '-'             ; Negative?
    3653/    5715 : F5                  	PUSH    AF              ; Save it and flags
    3654/    5716 : 28 FE               	Jr      Z,CNVNUM        ; Yes - Convert number
    3655/    5718 : FE 2B               	CP      '+'             ; Positive?
    3656/    571A : 28 FE               	Jr      Z,CNVNUM        ; Yes - Convert number
    3657/    571C : 2B                  	DEC     HL              ; DEC 'cos GETCHR INCs
    3658/    571D : CD 47 54            CNVNUM: CALL    RESZER          ; Set result to zero
    3659/    5720 : 47                  	LD      B,A             ; Digits after point counter
    3660/    5721 : 57                  	LD      D,A             ; Sign of exponent
    3661/    5722 : 5F                  	LD      E,A             ; Exponent of ten
    3662/    5723 : 2F                  	CPL
    3663/    5724 : 4F                  	LD      C,A             ; Before or after point flag
    3664/    5725 : CD 5C 48            MANLP:  CALL    GETCHR          ; Get next character
    3665/    5728 : 38 FE               	Jr      C,ADDIG         ; Digit - Add to number
    3666/    572A : FE 2E               	CP      '.'
    3667/    572C : 28 FE               	Jr      Z,DPOINT        ; '.' - Flag point
    3668/    572E : FE 45               	CP      'E'
    3669/    5730 : 20 FE               	Jr      NZ,CONEXP       ; Not 'E' - Scale number
    3670/    5732 : CD 5C 48            	CALL    GETCHR          ; Get next character
    3671/    5735 : CD A3 4D            	CALL    SGNEXP          ; Get sign of exponent
    3672/    5738 :                     
    3673/    5738 : CD 5C 48            EXPLP:  CALL    GETCHR          ; Get next character
    3674/    573B : 38 FE               	Jr      C,EDIGIT        ; Digit - Add to exponent
    3675/    573D : 14                  	INC     D               ; Is sign negative?
    3676/    573E : 20 FE               	Jr      NZ,CONEXP       ; No - Scale number
    3677/    5740 : AF                  	XOR     A
    3678/    5741 : 93                  	SUB     E               ; Negate exponent
    3679/    5742 : 5F                  	LD      E,A             ; And re-save it
    3680/    5743 : 0C                  	INC     C               ; Flag end of number
    3681/    5744 : 0C                  DPOINT: INC     C               ; Flag point passed
    3682/    5745 : 28 DE               	Jr      Z,MANLP         ; Zero - Get another digit
    3683/    5747 : E5                  CONEXP: PUSH    HL              ; Save code string address
    3684/    5748 : 7B                  	LD      A,E             ; Get exponent
    3685/    5749 : 90                  	SUB     B               ; Subtract digits after point
    3686/    574A : F4 4A 57            SCALMI: CALL    P,SCALPL        ; Positive - Multiply number
    3687/    574D : F2 4D 57            	JP      P,ENDCON        ; Positive - All done
    3688/    5750 : F5                  	PUSH    AF              ; Save number of times to /10
    3689/    5751 : CD 5F 55            	CALL    DIV10           ; Divide by 10
    3690/    5754 : F1                  	POP     AF              ; Restore count
    3691/    5755 : 3C                  	INC     A               ; Count divides
    3692/    5756 :                     
    3693/    5756 : 20 F2               ENDCON: Jr      NZ,SCALMI       ; More to do
    3694/    5758 : D1                  	POP     DE              ; Restore code string address
    3695/    5759 : F1                  	POP     AF              ; Restore sign of number
    3696/    575A : CC 39 56            	CALL    Z,INVSGN        ; Negative - Negate number
    3697/    575D : EB                  	EX      DE,HL           ; Code string address to HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 63 - 2/19/2023 19:38:37


    3698/    575E : C9                  	RET
    3699/    575F :                     
    3700/    575F : C8                  SCALPL: RET     Z               ; Exit if no scaling needed
    3701/    5760 : F5                  MULTEN: PUSH    AF              ; Save count
    3702/    5761 : CD F9 55            	CALL    MLSP10          ; Multiply number by 10
    3703/    5764 : F1                  	POP     AF              ; Restore count
    3704/    5765 : 3D                  	DEC     A               ; Count multiplies
    3705/    5766 : C9                  	RET
    3706/    5767 :                     
    3707/    5767 : D5                  ADDIG:  PUSH    DE              ; Save sign of exponent
    3708/    5768 : 57                  	LD      D,A             ; Save digit
    3709/    5769 : 78                  	LD      A,B             ; Get digits after point
    3710/    576A : 89                  	ADC     A,C             ; Add one if after point
    3711/    576B : 47                  	LD      B,A             ; Re-save counter
    3712/    576C : C5                  	PUSH    BC              ; Save point flags
    3713/    576D : E5                  	PUSH    HL              ; Save code string address
    3714/    576E : D5                  	PUSH    DE              ; Save digit
    3715/    576F : CD F9 55            	CALL    MLSP10          ; Multiply number by 10
    3716/    5772 : F1                  	POP     AF              ; Restore digit
    3717/    5773 : D6 30               	SUB     '0'             ; Make it absolute
    3718/    5775 : CD 75 57            	CALL    RSCALE          ; Re-scale number
    3719/    5778 : E1                  	POP     HL              ; Restore code string address
    3720/    5779 : C1                  	POP     BC              ; Restore point flags
    3721/    577A : D1                  	POP     DE              ; Restore sign of exponent
    3722/    577B : 18 A8               	Jr      MANLP           ; Get another digit
    3723/    577D :                     
    3724/    577D : CD 41 56            RSCALE: CALL    STAKFP          ; Put number on stack
    3725/    5780 : CD 22 56            	CALL    FLGREL          ; Digit to add to FPREG
    3726/    5783 : C1                  PADD:   POP     BC              ; Restore number
    3727/    5784 : D1                  	POP     DE
    3728/    5785 : C3 E4 53            	JP      FPADD           ; Add BCDE to FPREG and return
    3729/    5788 :                     
    3730/    5788 : 7B                  EDIGIT: LD      A,E             ; Get digit
    3731/    5789 : 07                  	RLCA                    ; Times 2
    3732/    578A : 07                  	RLCA                    ; Times 4
    3733/    578B : 83                  	ADD     A,E             ; Times 5
    3734/    578C : 07                  	RLCA                    ; Times 10
    3735/    578D : 86                  	ADD     A,(HL)          ; Add next digit
    3736/    578E : D6 30               	SUB     '0'             ; Make it absolute
    3737/    5790 : 5F                  	LD      E,A             ; Save new digit
    3738/    5791 : 18 A5               	Jr      EXPLP           ; Look for another digit
    3739/    5793 :                     
    3740/    5793 : E5                  LINEIN: PUSH    HL              ; Save code string address
    3741/    5794 : 21 3F 43            	LD      HL,INMSG        ; Output " in "
    3742/    5797 : CD 25 51            	CALL    PRS             ; Output string at HL
    3743/    579A : E1                  	POP     HL              ; Restore code string address
    3744/    579B : EB                  PRNTHL: EX      DE,HL           ; Code string address to DE
    3745/    579C : AF                  	XOR     A
    3746/    579D : 06 98               	LD      B,80H+24        ; 24 bits
    3747/    579F : CD 27 56            	CALL    RETINT          ; Return the integer
    3748/    57A2 : 21 24 51            	LD      HL,PRNUMS       ; Print number string
    3749/    57A5 : E5                  	PUSH    HL              ; Save for return
    3750/    57A6 : 21 E5 60            NUMASC: LD      HL,PBUFF        ; Convert number to ASCII
    3751/    57A9 : E5                  	PUSH    HL              ; Save for return
    3752/    57AA : CD 10 56            	CALL    TSTSGN          ; Test sign of FPREG
    3753/    57AD : 36 20               	LD      (HL),' '        ; Space at start
    3754/    57AF : F2 AF 57            	JP      P,SPCFST        ; Positive - Space to start
    3755/    57B2 : 36 2D               	LD      (HL),'-'        ; '-' sign at start
    3756/    57B4 : 23                  SPCFST: INC     HL              ; First byte of number
    3757/    57B5 : 36 30               	LD      (HL),'0'        ; '0' if zero
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 64 - 2/19/2023 19:38:37


    3758/    57B7 : CA B7 57            	JP      Z,JSTZER        ; Return '0' if zero
    3759/    57BA : E5                  	PUSH    HL              ; Save buffer address
    3760/    57BB : FC 39 56            	CALL    M,INVSGN        ; Negate FPREG if negative
    3761/    57BE : AF                  	XOR     A               ; Zero A
    3762/    57BF : F5                  	PUSH    AF              ; Save it
    3763/    57C0 : CD C0 57            	CALL    RNGTST          ; Test number is in range
    3764/    57C3 : 01 43 91            SIXDIG: LD      BC,9143H        ; BCDE - 99999.9
    3765/    57C6 : 11 F8 4F            	LD      DE,4FF8H
    3766/    57C9 : CD 89 56            	CALL    CMPNUM          ; Compare numbers
    3767/    57CC : B7                  	OR      A
    3768/    57CD : E2 CD 57            	JP      PO,INRNG        ; > 99999.9 - Sort it out
    3769/    57D0 : F1                  	POP     AF              ; Restore count
    3770/    57D1 : CD 60 57            	CALL    MULTEN          ; Multiply by ten
    3771/    57D4 : F5                  	PUSH    AF              ; Re-save count
    3772/    57D5 : 18 EC               	Jr      SIXDIG          ; Test it again
    3773/    57D7 :                     
    3774/    57D7 : CD 5F 55            GTSIXD: CALL    DIV10           ; Divide by 10
    3775/    57DA : F1                  	POP     AF              ; Get count
    3776/    57DB : 3C                  	INC     A               ; Count divides
    3777/    57DC : F5                  	PUSH    AF              ; Re-save count
    3778/    57DD : CD DD 57            	CALL    RNGTST          ; Test number is in range
    3779/    57E0 : CD D3 53            INRNG:  CALL    ROUND           ; Add 0.5 to FPREG
    3780/    57E3 : 3C                  	INC     A
    3781/    57E4 : CD B6 56            	CALL    FPINT           ; F.P to integer
    3782/    57E7 : CD 51 56            	CALL    FPBCDE          ; Move BCDE to FPREG
    3783/    57EA : 01 06 03            	LD      BC,0306H        ; 1E+06 to 1E-03 range
    3784/    57ED : F1                  	POP     AF              ; Restore count
    3785/    57EE : 81                  	ADD     A,C             ; 6 digits before point
    3786/    57EF : 3C                  	INC     A               ; Add one
    3787/    57F0 : FA F0 57            	JP      M,MAKNUM        ; Do it in 'E' form if < 1E-02
    3788/    57F3 : FE 08               	CP      6+1+1           ; More than 999999 ?
    3789/    57F5 : 30 FE               	Jr      NC,MAKNUM       ; Yes - Do it in 'E' form
    3790/    57F7 : 3C                  	INC     A               ; Adjust for exponent
    3791/    57F8 : 47                  	LD      B,A             ; Exponent of number
    3792/    57F9 : 3E 02               	LD      A,2             ; Make it zero after
    3793/    57FB :                     
    3794/    57FB : 3D                  MAKNUM: DEC     A               ; Adjust for digits to do
    3795/    57FC : 3D                  	DEC     A
    3796/    57FD : E1                  	POP     HL              ; Restore buffer address
    3797/    57FE : F5                  	PUSH    AF              ; Save count
    3798/    57FF : 11 FF 57            	LD      DE,POWERS       ; Powers of ten
    3799/    5802 : 05                  	DEC     B               ; Count digits before point
    3800/    5803 : 20 FE               	Jr      NZ,DIGTXT       ; Not zero - Do number
    3801/    5805 : 36 2E               	LD      (HL),'.'        ; Save point
    3802/    5807 : 23                  	INC     HL              ; Move on
    3803/    5808 : 36 30               	LD      (HL),'0'        ; Save zero
    3804/    580A : 23                  	INC     HL              ; Move on
    3805/    580B : 05                  DIGTXT: DEC     B               ; Count digits before point
    3806/    580C : 36 2E               	LD      (HL),'.'        ; Save point in case
    3807/    580E : CC 66 56            	CALL    Z,INCHL         ; Last digit - move on
    3808/    5811 : C5                  	PUSH    BC              ; Save digits before point
    3809/    5812 : E5                  	PUSH    HL              ; Save buffer address
    3810/    5813 : D5                  	PUSH    DE              ; Save powers of ten
    3811/    5814 : CD 5C 56            	CALL    BCDEFP          ; Move FPREG to BCDE
    3812/    5817 : E1                  	POP     HL              ; Powers of ten table
    3813/    5818 : 06 2F               	LD      B, '0'-1        ; ASCII '0' - 1
    3814/    581A :                     
    3815/    581A : 04                  TRYAGN: INC     B               ; Count subtractions
    3816/    581B : 7B                  	LD      A,E             ; Get LSB
    3817/    581C : 96                  	SUB     (HL)            ; Subtract LSB
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 65 - 2/19/2023 19:38:37


    3818/    581D : 5F                  	LD      E,A             ; Save LSB
    3819/    581E : 23                  	INC     HL
    3820/    581F : 7A                  	LD      A,D             ; Get NMSB
    3821/    5820 : 9E                  	SBC     A,(HL)          ; Subtract NMSB
    3822/    5821 : 57                  	LD      D,A             ; Save NMSB
    3823/    5822 : 23                  	INC     HL
    3824/    5823 : 79                  	LD      A,C             ; Get MSB
    3825/    5824 : 9E                  	SBC     A,(HL)          ; Subtract MSB
    3826/    5825 : 4F                  	LD      C,A             ; Save MSB
    3827/    5826 : 2B                  	DEC     HL              ; Point back to start
    3828/    5827 : 2B                  	DEC     HL
    3829/    5828 : 30 F0               	Jr      NC,TRYAGN       ; No overflow - Try again
    3830/    582A : CD 82 54            	CALL    PLUCDE          ; Restore number
    3831/    582D : 23                  	INC     HL              ; Start of next number
    3832/    582E : CD 51 56            	CALL    FPBCDE          ; Move BCDE to FPREG
    3833/    5831 : EB                  	EX      DE,HL           ; Save point in table
    3834/    5832 : E1                  	POP     HL              ; Restore buffer address
    3835/    5833 : 70                  	LD      (HL),B          ; Save digit in buffer
    3836/    5834 : 23                  	INC     HL              ; And move on
    3837/    5835 : C1                  	POP     BC              ; Restore digit count
    3838/    5836 : 0D                  	DEC     C               ; Count digits
    3839/    5837 : 20 D2               	Jr      NZ,DIGTXT       ; More - Do them
    3840/    5839 : 05                  	DEC     B               ; Any decimal part?
    3841/    583A : 28 FE               	Jr      Z,DOEBIT        ; No - Do 'E' bit
    3842/    583C : 2B                  SUPTLZ: DEC     HL              ; Move back through buffer
    3843/    583D : 7E                  	LD      A,(HL)          ; Get character
    3844/    583E : FE 30               	CP      '0'             ; '0' character?
    3845/    5840 : 28 FA               	Jr      Z,SUPTLZ        ; Yes - Look back for more
    3846/    5842 : FE 2E               	CP      '.'             ; A decimal point?
    3847/    5844 : C4 66 56            	CALL    NZ,INCHL        ; Move back over digit
    3848/    5847 :                     
    3849/    5847 : F1                  DOEBIT: POP     AF              ; Get 'E' flag
    3850/    5848 : 28 FE               	Jr      Z,NOENED        ; No 'E' needed - End buffer
    3851/    584A : 36 45               	LD      (HL),'E'        ; Put 'E' in buffer
    3852/    584C : 23                  	INC     HL              ; And move on
    3853/    584D : 36 2B               	LD      (HL),'+'        ; Put '+' in buffer
    3854/    584F : F2 4F 58            	JP      P,OUTEXP        ; Positive - Output exponent
    3855/    5852 : 36 2D               	LD      (HL),'-'        ; Put '-' in buffer
    3856/    5854 : 2F                  	CPL                     ; Negate exponent
    3857/    5855 : 3C                  	INC     A
    3858/    5856 : 06 2F               OUTEXP: LD      B,'0'-1         ; ASCII '0' - 1
    3859/    5858 : 04                  EXPTEN: INC     B               ; Count subtractions
    3860/    5859 : D6 0A               	SUB     10              ; Tens digit
    3861/    585B : 30 FB               	Jr      NC,EXPTEN       ; More to do
    3862/    585D : C6 3A               	ADD     A,'0'+10        ; Restore and make ASCII
    3863/    585F : 23                  	INC     HL              ; Move on
    3864/    5860 : 70                  	LD      (HL),B          ; Save MSB of exponent
    3865/    5861 : 23                  JSTZER: INC     HL              ;
    3866/    5862 : 77                  	LD      (HL),A          ; Save LSB of exponent
    3867/    5863 : 23                  	INC     HL
    3868/    5864 : 71                  NOENED: LD      (HL),C          ; Mark end of buffer
    3869/    5865 : E1                  	POP     HL              ; Restore code string address
    3870/    5866 : C9                  	RET
    3871/    5867 :                     
    3872/    5867 : 01 74 94            RNGTST: LD      BC,9474H        ; BCDE = 999999.
    3873/    586A : 11 F7 23            	LD      DE,23F7H
    3874/    586D : CD 89 56            	CALL    CMPNUM          ; Compare numbers
    3875/    5870 : B7                  	OR      A
    3876/    5871 : E1                  	POP     HL              ; Return address to HL
    3877/    5872 : E2 D7 57            	JP      PO,GTSIXD       ; Too big - Divide by ten
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 66 - 2/19/2023 19:38:37


    3878/    5875 : E9                  	JP      (HL)            ; Otherwise return to caller
    3879/    5876 :                     
    3880/    5876 : 00 00 00 80         HALF:   DB      00H,00H,00H,80H ; 0.5
    3881/    587A :                     
    3882/    587A : A0 86 01            POWERS: DB      0A0H,086H,001H  ; 100000
    3883/    587D : 10 27 00            	DB      010H,027H,000H  ;  10000
    3884/    5880 : E8 03 00            	DB      0E8H,003H,000H  ;   1000
    3885/    5883 : 64 00 00            	DB      064H,000H,000H  ;    100
    3886/    5886 : 0A 00 00            	DB      00AH,000H,000H  ;     10
    3887/    5889 : 01 00 00            	DB      001H,000H,000H  ;      1
    3888/    588C :                     
    3889/    588C : 21 39 56            NEGAFT: LD  HL,INVSGN           ; Negate result
    3890/    588F : E3                  	EX      (SP),HL         ; To be done after caller
    3891/    5890 : E9                  	JP      (HL)            ; Return to caller
    3892/    5891 :                     
    3893/    5891 : CD 41 56            SQR:    CALL    STAKFP          ; Put value on stack
    3894/    5894 : 21 76 58            	LD      HL,HALF         ; Set power to 1/2
    3895/    5897 : CD 4E 56            	CALL    PHLTFP          ; Move 1/2 to FPREG
    3896/    589A :                     
    3897/    589A : C1                  POWER:  POP     BC              ; Get base
    3898/    589B : D1                  	POP     DE
    3899/    589C : CD 10 56            	CALL    TSTSGN          ; Test sign of power
    3900/    589F : 78                  	LD      A,B             ; Get exponent of base
    3901/    58A0 : CA A0 58            	JP      Z,EXP           ; Make result 1 if zero
    3902/    58A3 : F2 A3 58            	JP      P,POWER1        ; Positive base - Ok
    3903/    58A6 : B7                  	OR      A               ; Zero to negative power?
    3904/    58A7 : CA 73 43            	JP      Z,DZERR         ; Yes - ?/0 Error
    3905/    58AA : B7                  POWER1: OR      A               ; Base zero?
    3906/    58AB : CA 48 54            	JP      Z,SAVEXP        ; Yes - Return zero
    3907/    58AE : D5                  	PUSH    DE              ; Save base
    3908/    58AF : C5                  	PUSH    BC
    3909/    58B0 : 79                  	LD      A,C             ; Get MSB of base
    3910/    58B1 : F6 7F               	OR      01111111B       ; Get sign status
    3911/    58B3 : CD 5C 56            	CALL    BCDEFP          ; Move power to BCDE
    3912/    58B6 : F2 B6 58            	JP      P,POWER2        ; Positive base - Ok
    3913/    58B9 : D5                  	PUSH    DE              ; Save power
    3914/    58BA : C5                  	PUSH    BC
    3915/    58BB : CD E1 56            	CALL    INT             ; Get integer of power
    3916/    58BE : C1                  	POP     BC              ; Restore power
    3917/    58BF : D1                  	POP     DE
    3918/    58C0 : F5                  	PUSH    AF              ; MSB of base
    3919/    58C1 : CD 89 56            	CALL    CMPNUM          ; Power an integer?
    3920/    58C4 : E1                  	POP     HL              ; Restore MSB of base
    3921/    58C5 : 7C                  	LD      A,H             ; but don't affect flags
    3922/    58C6 : 1F                  	RRA                     ; Exponent odd or even?
    3923/    58C7 : E1                  POWER2: POP     HL              ; Restore MSB and exponent
    3924/    58C8 : 22 E2 60            	LD      (FPREG+2),HL    ; Save base in FPREG
    3925/    58CB : E1                  	POP     HL              ; LSBs of base
    3926/    58CC : 22 E0 60            	LD      (FPREG),HL      ; Save in FPREG
    3927/    58CF : DC 8C 58            	CALL    C,NEGAFT        ; Odd power - Negate result
    3928/    58D2 : CC 39 56            	CALL    Z,INVSGN        ; Negative base - Negate it
    3929/    58D5 : D5                  	PUSH    DE              ; Save power
    3930/    58D6 : C5                  	PUSH    BC
    3931/    58D7 : CD D1 54            	CALL    LOG             ; Get LOG of base
    3932/    58DA : C1                  	POP     BC              ; Restore power
    3933/    58DB : D1                  	POP     DE
    3934/    58DC : CD 12 55            	CALL    FPMULT          ; Multiply LOG by power
    3935/    58DF :                     
    3936/    58DF : CD 41 56            EXP:    CALL    STAKFP          ; Put value on stack
    3937/    58E2 : 01 38 81            	LD      BC,08138H       ; BCDE = 1/Ln(2)
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 67 - 2/19/2023 19:38:37


    3938/    58E5 : 11 3B AA            	LD      DE,0AA3BH
    3939/    58E8 : CD 12 55            	CALL    FPMULT          ; Multiply value by 1/LN(2)
    3940/    58EB : 3A E3 60            	LD      A,(FPEXP)       ; Get exponent
    3941/    58EE : FE 88               	CP      80H+8           ; Is it in range?
    3942/    58F0 : D2 EC 55            	JP      NC,OVTST1       ; No - Test for overflow
    3943/    58F3 : CD E1 56            	CALL    INT             ; Get INT of FPREG
    3944/    58F6 : C6 80               	ADD     A,80H           ; For excess 128
    3945/    58F8 : C6 02               	ADD     A,2             ; Exponent > 126?
    3946/    58FA : DA EC 55            	JP      C,OVTST1        ; Yes - Test for overflow
    3947/    58FD : F5                  	PUSH    AF              ; Save scaling factor
    3948/    58FE : 21 C0 54            	LD      HL,UNITY        ; Point to 1.
    3949/    5901 : CD D6 53            	CALL    ADDPHL          ; Add 1 to FPREG
    3950/    5904 : CD 09 55            	CALL    MULLN2          ; Multiply by LN(2)
    3951/    5907 : F1                  	POP     AF              ; Restore scaling factor
    3952/    5908 : C1                  	POP     BC              ; Restore exponent
    3953/    5909 : D1                  	POP     DE
    3954/    590A : F5                  	PUSH    AF              ; Save scaling factor
    3955/    590B : CD E1 53            	CALL    SUBCDE          ; Subtract exponent from FPREG
    3956/    590E : CD 39 56            	CALL    INVSGN          ; Negate result
    3957/    5911 : 21 11 59            	LD      HL,EXPTAB       ; Coefficient table
    3958/    5914 : CD 14 59            	CALL    SMSER1          ; Sum the series
    3959/    5917 : 11 00 00            	LD      DE,0            ; Zero LSBs
    3960/    591A : C1                  	POP     BC              ; Scaling factor
    3961/    591B : 4A                  	LD      C,D             ; Zero MSB
    3962/    591C : C3 12 55            	JP      FPMULT          ; Scale result to correct value
    3963/    591F :                     
    3964/    591F : 08                  EXPTAB: DB      8                       ; Table used by EXP
    3965/    5920 : 40 2E 94 74         	DB      040H,02EH,094H,074H     ; -1/7! (-1/5040)
    3966/    5924 : 70 4F 2E 77         	DB      070H,04FH,02EH,077H     ;  1/6! ( 1/720)
    3967/    5928 : 6E 02 88 7A         	DB      06EH,002H,088H,07AH     ; -1/5! (-1/120)
    3968/    592C : E6 A0 2A 7C         	DB      0E6H,0A0H,02AH,07CH     ;  1/4! ( 1/24)
    3969/    5930 : 50 AA AA 7E         	DB      050H,0AAH,0AAH,07EH     ; -1/3! (-1/6)
    3970/    5934 : FF FF 7F 7F         	DB      0FFH,0FFH,07FH,07FH     ;  1/2! ( 1/2)
    3971/    5938 : 00 00 80 81         	DB      000H,000H,080H,081H     ; -1/1! (-1/1)
    3972/    593C : 00 00 00 81         	DB      000H,000H,000H,081H     ;  1/0! ( 1/1)
    3973/    5940 :                     
    3974/    5940 : CD 41 56            SUMSER: CALL    STAKFP          ; Put FPREG on stack
    3975/    5943 : 11 10 55            	LD      DE,MULT         ; Multiply by "X"
    3976/    5946 : D5                  	PUSH    DE              ; To be done after
    3977/    5947 : E5                  	PUSH    HL              ; Save address of table
    3978/    5948 : CD 5C 56            	CALL    BCDEFP          ; Move FPREG to BCDE
    3979/    594B : CD 12 55            	CALL    FPMULT          ; Square the value
    3980/    594E : E1                  	POP     HL              ; Restore address of table
    3981/    594F : CD 41 56            SMSER1: CALL    STAKFP          ; Put value on stack
    3982/    5952 : 7E                  	LD      A,(HL)          ; Get number of coefficients
    3983/    5953 : 23                  	INC     HL              ; Point to start of table
    3984/    5954 : CD 4E 56            	CALL    PHLTFP          ; Move coefficient to FPREG
    3985/    5957 : 06                  	DB      06H             ; Skip "POP AF"
    3986/    5958 : F1                  SUMLP:  POP     AF              ; Restore count
    3987/    5959 : C1                  	POP     BC              ; Restore number
    3988/    595A : D1                  	POP     DE
    3989/    595B : 3D                  	DEC     A               ; Cont coefficients
    3990/    595C : C8                  	RET     Z               ; All done
    3991/    595D : D5                  	PUSH    DE              ; Save number
    3992/    595E : C5                  	PUSH    BC
    3993/    595F : F5                  	PUSH    AF              ; Save count
    3994/    5960 : E5                  	PUSH    HL              ; Save address in table
    3995/    5961 : CD 12 55            	CALL    FPMULT          ; Multiply FPREG by BCDE
    3996/    5964 : E1                  	POP     HL              ; Restore address in table
    3997/    5965 : CD 5F 56            	CALL    LOADFP          ; Number at HL to BCDE
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 68 - 2/19/2023 19:38:37


    3998/    5968 : E5                  	PUSH    HL              ; Save address in table
    3999/    5969 : CD E4 53            	CALL    FPADD           ; Add coefficient to FPREG
    4000/    596C : E1                  	POP     HL              ; Restore address in table
    4001/    596D : 18 E9               	Jr      SUMLP           ; More coefficients
    4002/    596F :                     
    4003/    596F : CD 10 56            RND:    CALL    TSTSGN          ; Test sign of FPREG
    4004/    5972 : 21 1B 60            	LD      HL,SEED+2       ; Random number seed
    4005/    5975 : FA 75 59            	JP      M,RESEED        ; Negative - Re-seed
    4006/    5978 : 21 3C 60            	LD      HL,LSTRND       ; Last random number
    4007/    597B : CD 4E 56            	CALL    PHLTFP          ; Move last RND to FPREG
    4008/    597E : 21 1B 60            	LD      HL,SEED+2       ; Random number seed
    4009/    5981 : C8                  	RET     Z               ; Return if RND(0)
    4010/    5982 : 86                  	ADD     A,(HL)          ; Add (SEED)+2)
    4011/    5983 : E6 07               	AND     00000111B       ; 0 to 7
    4012/    5985 : 06 00               	LD      B,0
    4013/    5987 : 77                  	LD      (HL),A          ; Re-save seed
    4014/    5988 : 23                  	INC     HL              ; Move to coefficient table
    4015/    5989 : 87                  	ADD     A,A             ; 4 bytes
    4016/    598A : 87                  	ADD     A,A             ; per entry
    4017/    598B : 4F                  	LD      C,A             ; BC = Offset into table
    4018/    598C : 09                  	ADD     HL,BC           ; Point to coefficient
    4019/    598D : CD 5F 56            	CALL    LOADFP          ; Coefficient to BCDE
    4020/    5990 : CD 12 55            	CALL    FPMULT  ;       ; Multiply FPREG by coefficient
    4021/    5993 : 3A 1A 60            	LD      A,(SEED+1)      ; Get (SEED+1)
    4022/    5996 : 3C                  	INC     A               ; Add 1
    4023/    5997 : E6 03               	AND     00000011B       ; 0 to 3
    4024/    5999 : 06 00               	LD      B,0
    4025/    599B : FE 01               	CP      1               ; Is it zero?
    4026/    599D : 88                  	ADC     A,B             ; Yes - Make it 1
    4027/    599E : 32 1A 60            	LD      (SEED+1),A      ; Re-save seed
    4028/    59A1 : 21 9D 59            	LD      HL,RNDTAB-4     ; Addition table
    4029/    59A4 : 87                  	ADD     A,A             ; 4 bytes
    4030/    59A5 : 87                  	ADD     A,A             ; per entry
    4031/    59A6 : 4F                  	LD      C,A             ; BC = Offset into table
    4032/    59A7 : 09                  	ADD     HL,BC           ; Point to value
    4033/    59A8 : CD D6 53            	CALL    ADDPHL          ; Add value to FPREG
    4034/    59AB : CD 5C 56            RND1:   CALL    BCDEFP          ; Move FPREG to BCDE
    4035/    59AE : 7B                  	LD      A,E             ; Get LSB
    4036/    59AF : 59                  	LD      E,C             ; LSB = MSB
    4037/    59B0 : EE 4F               	XOR     01001111B       ; Fiddle around
    4038/    59B2 : 4F                  	LD      C,A             ; New MSB
    4039/    59B3 : 36 80               	LD      (HL),80H        ; Set exponent
    4040/    59B5 : 2B                  	DEC     HL              ; Point to MSB
    4041/    59B6 : 46                  	LD      B,(HL)          ; Get MSB
    4042/    59B7 : 36 80               	LD      (HL),80H        ; Make value -0.5
    4043/    59B9 : 21 19 60            	LD      HL,SEED         ; Random number seed
    4044/    59BC : 34                  	INC     (HL)            ; Count seed
    4045/    59BD : 7E                  	LD      A,(HL)          ; Get seed
    4046/    59BE : D6 AB               	SUB     171             ; Do it modulo 171
    4047/    59C0 : 20 FE               	Jr      NZ,RND2         ; Non-zero - Ok
    4048/    59C2 : 77                  	LD      (HL),A          ; Zero seed
    4049/    59C3 : 0C                  	INC     C               ; Fillde about
    4050/    59C4 : 15                  	DEC     D               ; with the
    4051/    59C5 : 1C                  	INC     E               ; number
    4052/    59C6 : CD 34 54            RND2:   CALL    BNORM           ; Normalise number
    4053/    59C9 : 21 3C 60            	LD      HL,LSTRND       ; Save random number
    4054/    59CC : C3 68 56            	JP      FPTHL           ; Move FPREG to last and return
    4055/    59CF :                     
    4056/    59CF : 77                  RESEED: LD      (HL),A          ; Re-seed random numbers
    4057/    59D0 : 2B                  	DEC     HL
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 69 - 2/19/2023 19:38:37


    4058/    59D1 : 77                  	LD      (HL),A
    4059/    59D2 : 2B                  	DEC     HL
    4060/    59D3 : 77                  	LD      (HL),A
    4061/    59D4 : 18 D5               	Jr      RND1            ; Return RND seed
    4062/    59D6 :                     
    4063/    59D6 : 68 B1 46 68         RNDTAB: DB   068H,0B1H,046H,068H     ; Table used by RND
    4064/    59DA : 99 E9 92 69         	DB   099H,0E9H,092H,069H
    4065/    59DE : 10 D1 75 68         	DB   010H,0D1H,075H,068H
    4066/    59E2 :                     
    4067/    59E2 : 21 E2 59            COS:    LD      HL,HALFPI       ; Point to PI/2
    4068/    59E5 : CD D6 53            	CALL    ADDPHL          ; Add it to PPREG
    4069/    59E8 : CD 41 56            SIN:    CALL    STAKFP          ; Put angle on stack
    4070/    59EB : 01 49 83            	LD      BC,8349H        ; BCDE = 2 PI
    4071/    59EE : 11 DB 0F            	LD      DE,0FDBH
    4072/    59F1 : CD 51 56            	CALL    FPBCDE          ; Move 2 PI to FPREG
    4073/    59F4 : C1                  	POP     BC              ; Restore angle
    4074/    59F5 : D1                  	POP     DE
    4075/    59F6 : CD 6D 55            	CALL    DVBCDE          ; Divide angle by 2 PI
    4076/    59F9 : CD 41 56            	CALL    STAKFP          ; Put it on stack
    4077/    59FC : CD E1 56            	CALL    INT             ; Get INT of result
    4078/    59FF : C1                  	POP     BC              ; Restore number
    4079/    5A00 : D1                  	POP     DE
    4080/    5A01 : CD E1 53            	CALL    SUBCDE          ; Make it 0 <= value < 1
    4081/    5A04 : 21 04 5A            	LD      HL,QUARTR       ; Point to 0.25
    4082/    5A07 : CD DB 53            	CALL    SUBPHL          ; Subtract value from 0.25
    4083/    5A0A : CD 10 56            	CALL    TSTSGN          ; Test sign of value
    4084/    5A0D : 37                  	SCF                     ; Flag positive
    4085/    5A0E : F2 0E 5A            	JP      P,SIN1          ; Positive - Ok
    4086/    5A11 : CD D3 53            	CALL    ROUND           ; Add 0.5 to value
    4087/    5A14 : CD 10 56            	CALL    TSTSGN          ; Test sign of value
    4088/    5A17 : B7                  	OR      A               ; Flag negative
    4089/    5A18 : F5                  SIN1:   PUSH    AF              ; Save sign
    4090/    5A19 : F4 39 56            	CALL    P,INVSGN        ; Negate value if positive
    4091/    5A1C : 21 1C 5A            	LD      HL,QUARTR       ; Point to 0.25
    4092/    5A1F : CD D6 53            	CALL    ADDPHL          ; Add 0.25 to value
    4093/    5A22 : F1                  	POP     AF              ; Restore sign
    4094/    5A23 : D4 39 56            	CALL    NC,INVSGN       ; Negative - Make positive
    4095/    5A26 : 21 26 5A            	LD      HL,SINTAB       ; Coefficient table
    4096/    5A29 : C3 40 59            	JP      SUMSER          ; Evaluate sum of series
    4097/    5A2C :                     
    4098/    5A2C : DB 0F 49 81         HALFPI: DB   0DBH,00FH,049H,081H     ; 1.5708 (PI/2)
    4099/    5A30 :                     
    4100/    5A30 : 00 00 00 7F         QUARTR: DB   000H,000H,000H,07FH     ; 0.25
    4101/    5A34 :                     
    4102/    5A34 : 05                  SINTAB: DB   5                       ; Table used by SIN
    4103/    5A35 : BA D7 1E 86         	DB   0BAH,0D7H,01EH,086H     ; 39.711
    4104/    5A39 : 64 26 99 87         	DB   064H,026H,099H,087H     ;-76.575
    4105/    5A3D : 58 34 23 87         	DB   058H,034H,023H,087H     ; 81.602
    4106/    5A41 : E0 5D A5 86         	DB   0E0H,05DH,0A5H,086H     ;-41.342
    4107/    5A45 : DA 0F 49 83         	DB   0DAH,00FH,049H,083H     ;  6.2832
    4108/    5A49 :                     
    4109/    5A49 : CD 41 56            TAN:    CALL    STAKFP          ; Put angle on stack
    4110/    5A4C : CD E8 59            	CALL    SIN             ; Get SIN of angle
    4111/    5A4F : C1                  	POP     BC              ; Restore angle
    4112/    5A50 : E1                  	POP     HL
    4113/    5A51 : CD 41 56            	CALL    STAKFP          ; Save SIN of angle
    4114/    5A54 : EB                  	EX      DE,HL           ; BCDE = Angle
    4115/    5A55 : CD 51 56            	CALL    FPBCDE          ; Angle to FPREG
    4116/    5A58 : CD E2 59            	CALL    COS             ; Get COS of angle
    4117/    5A5B : C3 6B 55            	JP      DIV             ; TAN = SIN / COS
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 70 - 2/19/2023 19:38:37


    4118/    5A5E :                     
    4119/    5A5E : CD 10 56            ATN:    CALL    TSTSGN          ; Test sign of value
    4120/    5A61 : FC 8C 58            	CALL    M,NEGAFT        ; Negate result after if -ve
    4121/    5A64 : FC 39 56            	CALL    M,INVSGN        ; Negate value if -ve
    4122/    5A67 : 3A E3 60            	LD      A,(FPEXP)       ; Get exponent
    4123/    5A6A : FE 81               	CP      81H             ; Number less than 1?
    4124/    5A6C : DA 6C 5A            	JP      C,ATN1          ; Yes - Get arc tangnt
    4125/    5A6F : 01 00 81            	LD      BC,8100H        ; BCDE = 1
    4126/    5A72 : 51                  	LD      D,C
    4127/    5A73 : 59                  	LD      E,C
    4128/    5A74 : CD 6D 55            	CALL    DVBCDE          ; Get reciprocal of number
    4129/    5A77 : 21 DB 53            	LD      HL,SUBPHL       ; Sub angle from PI/2
    4130/    5A7A : E5                  	PUSH    HL              ; Save for angle > 1
    4131/    5A7B : 21 7B 5A            ATN1:   LD      HL,ATNTAB       ; Coefficient table
    4132/    5A7E : CD 40 59            	CALL    SUMSER          ; Evaluate sum of series
    4133/    5A81 : 21 2C 5A            	LD      HL,HALFPI       ; PI/2 - angle in case > 1
    4134/    5A84 : C9                  	RET                     ; Number > 1 - Sub from PI/2
    4135/    5A85 :                     
    4136/    5A85 : 09                  ATNTAB: DB   9                       ; Table used by ATN
    4137/    5A86 : 4A D7 3B 78         	DB   04AH,0D7H,03BH,078H     ; 1/17
    4138/    5A8A : 02 6E 84 7B         	DB   002H,06EH,084H,07BH     ;-1/15
    4139/    5A8E : FE C1 2F 7C         	DB   0FEH,0C1H,02FH,07CH     ; 1/13
    4140/    5A92 : 74 31 9A 7D         	DB   074H,031H,09AH,07DH     ;-1/11
    4141/    5A96 : 84 3D 5A 7D         	DB   084H,03DH,05AH,07DH     ; 1/9
    4142/    5A9A : C8 7F 91 7E         	DB   0C8H,07FH,091H,07EH     ;-1/7
    4143/    5A9E : E4 BB 4C 7E         	DB   0E4H,0BBH,04CH,07EH     ; 1/5
    4144/    5AA2 : 6C AA AA 7F         	DB   06CH,0AAH,0AAH,07FH     ;-1/3
    4145/    5AA6 : 00 00 00 81         	DB   000H,000H,000H,081H     ; 1/1
    4146/    5AAA :                     
    4147/    5AAA :                     ;---
    4148/    5AAA :                     
    4149/    5AAA :                     ;CALL A Ruft Maschinenunterprogramm ab Adresse A
    4150/    5AAA :                     ;CALL* 1F00 dto. ab Adresse $1F00 Hexadezimal
    4151/    5AAA : CD AA 5A            PCALL:	call	sub_5ABE
    4152/    5AAD : 28 FE               	jr	z, loc_5AB5
    4153/    5AAF : CD 7E 4C            	call	GETNUM
    4154/    5AB2 : CD DC 48            	call	DEINT
    4155/    5AB5 :                     loc_5AB5:
    4156/    5AB5 : E5                  	push	hl
    4157/    5AB6 : 21 B6 5A            	ld	hl, loc_5ABC
    4158/    5AB9 : E5                  	push	hl
    4159/    5ABA : EB                  	ex	de, hl
    4160/    5ABB : E9                  	jp	(hl)
    4161/    5ABC :                     
    4162/    5ABC :                     loc_5ABC:
    4163/    5ABC : E1                  	pop	hl
    4164/    5ABD : C9                  	ret
    4165/    5ABE :                     ;
    4166/    5ABE :                     sub_5ABE:
    4167/    5ABE : FE AE               	cp	ZTIMES 		; folgt '*'?
    4168/    5AC0 : C0                  	ret	nz
    4169/    5AC1 : 11 00 00            	ld	de, 0
    4170/    5AC4 :                     loc_5AC4:
    4171/    5AC4 : CD 5C 48            	call	GETCHR
    4172/    5AC7 : C8                  	ret	z
    4173/    5AC8 : 38 FE               	jr	c, loc_5AD5
    4174/    5ACA : FE 94               	cp	94h ; ''
    4175/    5ACC : 28 FE               	jr	z, loc_5AE4
    4176/    5ACE : FE 47               	cp	47h ; 'G'
    4177/    5AD0 : D2 70 43            	jp	nc, SNERR
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 71 - 2/19/2023 19:38:37


    4178/    5AD3 : D6 07               	sub	7
    4179/    5AD5 :                     loc_5AD5:
    4180/    5AD5 : D6 30               	sub	'0'
    4181/    5AD7 : DA 70 43            	jp	c, SNERR
    4182/    5ADA : EB                  	ex	de, hl
    4183/    5ADB : 29                  	add	hl, hl
    4184/    5ADC : 29                  	add	hl, hl
    4185/    5ADD : 29                  	add	hl, hl
    4186/    5ADE : 29                  	add	hl, hl
    4187/    5ADF : B5                  	or	l
    4188/    5AE0 : 6F                  	ld	l, a
    4189/    5AE1 : EB                  	ex	de, hl
    4190/    5AE2 : 18 E0               	jr	loc_5AC4
    4191/    5AE4 :                     loc_5AE4:
    4192/    5AE4 : 7B                  	ld	a, e
    4193/    5AE5 : 87                  	add	a, a
    4194/    5AE6 : 87                  	add	a, a
    4195/    5AE7 : 87                  	add	a, a
    4196/    5AE8 : 87                  	add	a, a
    4197/    5AE9 : F6 0D               	or	0Dh
    4198/    5AEB : 57                  	ld	d, a
    4199/    5AEC : 1E EF               	ld	e, 0EFh	; 'ï'
    4200/    5AEE : 18 D4               	jr	loc_5AC4
    4201/    5AF0 :                     
    4202/    5AF0 :                     ;RENUMBER10,50, Nummeriert die Zeilen 10 bis 50 neu, 
    4203/    5AF0 :                     ; neue 200,5 Zeile 200 Abstand 5
    4204/    5AF0 : E5                  RENUM:	push	hl
    4205/    5AF1 : 21 0A 00            	ld	hl, 10
    4206/    5AF4 : 22 54 60            	ld	(unk_6054), hl
    4207/    5AF7 : 2A 5A 60            	ld	hl, (BASTXT)
    4208/    5AFA : E5                  	push	hl
    4209/    5AFB : 23                  	inc	hl
    4210/    5AFC : 23                  	inc	hl
    4211/    5AFD : 7E                  	ld	a, (hl)
    4212/    5AFE : 23                  	inc	hl
    4213/    5AFF : 66                  	ld	h, (hl)
    4214/    5B00 : 6F                  	ld	l, a
    4215/    5B01 : 22 4E 60            	ld	(unk_604E), hl
    4216/    5B04 : 22 52 60            	ld	(unk_6052), hl
    4217/    5B07 : 08                  	ex	af, af'	;'
    4218/    5B08 : ED 5B D2 60         	ld	de, (PROGND)
    4219/    5B0C : 1B                  	dec	de
    4220/    5B0D : 1B                  	dec	de
    4221/    5B0E :                     loc_5B0E:
    4222/    5B0E : E1                  	pop	hl
    4223/    5B0F : E5                  	push	hl
    4224/    5B10 : 7E                  	ld	a, (hl)
    4225/    5B11 : 23                  	inc	hl
    4226/    5B12 : 66                  	ld	h, (hl)
    4227/    5B13 : 6F                  	ld	l, a
    4228/    5B14 : CD 75 46            	call	CPDEHL
    4229/    5B17 : E3                  	ex	(sp), hl
    4230/    5B18 : 20 F4               	jr	nz, loc_5B0E
    4231/    5B1A : D1                  	pop	de
    4232/    5B1B : 23                  	inc	hl
    4233/    5B1C : 23                  	inc	hl
    4234/    5B1D : 7E                  	ld	a, (hl)
    4235/    5B1E : 23                  	inc	hl
    4236/    5B1F : 66                  	ld	h, (hl)
    4237/    5B20 : 6F                  	ld	l, a
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 72 - 2/19/2023 19:38:37


    4238/    5B21 : 22 50 60            	ld	(unk_6050), hl
    4239/    5B24 : 3E 04               	ld	a, 4
    4240/    5B26 : 08                  	ex	af, af'	;'
    4241/    5B27 : 21 4E 60            	ld	hl, unk_604E
    4242/    5B2A : E3                  	ex	(sp), hl
    4243/    5B2B :                     loc_5B2B:
    4244/    5B2B : 28 FE               	jr	z, loc_5B4E
    4245/    5B2D : CD F6 48            	call	ATOH
    4246/    5B30 : F5                  	push	af
    4247/    5B31 : 7A                  	ld	a, d
    4248/    5B32 : B3                  	or	e
    4249/    5B33 :                     loc_5B33:
    4250/    5B33 : CA F1 48            	jp	z, FCERR
    4251/    5B36 : F1                  	pop	af
    4252/    5B37 : E3                  	ex	(sp), hl
    4253/    5B38 : 73                  	ld	(hl), e
    4254/    5B39 : 23                  	inc	hl
    4255/    5B3A : 72                  	ld	(hl), d
    4256/    5B3B : 23                  	inc	hl
    4257/    5B3C : 28 FE               	jr	z, loc_5B4E
    4258/    5B3E : 08                  	ex	af, af'	;'
    4259/    5B3F : 3D                  	dec	a
    4260/    5B40 : 28 FE               	jr	z, loc_5B4A
    4261/    5B42 : 08                  	ex	af, af'	;'
    4262/    5B43 : E3                  	ex	(sp), hl
    4263/    5B44 : CD 7B 46            	call	CHKSYN
    4264/    5B47 : 2C                  	db ','
    4265/    5B48 : 18 E1               	jr	loc_5B2B
    4266/    5B4A :                     loc_5B4A:
    4267/    5B4A : 08                  	ex	af, af'	;'
    4268/    5B4B : C2 70 43            	jp	nz, SNERR
    4269/    5B4E :                     loc_5B4E:
    4270/    5B4E : 2A 50 60            	ld	hl, (unk_6050)
    4271/    5B51 : ED 5B 4E 60         	ld	de, (unk_604E)
    4272/    5B55 : CD 75 46            	call	CPDEHL
    4273/    5B58 :                     loc_5B58:
    4274/    5B58 : DA F1 48            	jp	c, FCERR
    4275/    5B5B : 2A 5A 60            	ld	hl, (BASTXT)
    4276/    5B5E :                     loc_5B5E:
    4277/    5B5E : CD B3 44            	call	SRCHLP
    4278/    5B61 : 38 FE               	jr	c, loc_5B67
    4279/    5B63 : 28 CE               	jr	z, loc_5B33
    4280/    5B65 : 18 F7               	jr	loc_5B5E
    4281/    5B67 :                     loc_5B67:
    4282/    5B67 : E1                  	pop	hl
    4283/    5B68 : C5                  	push	bc
    4284/    5B69 : ED 5B 50 60         	ld	de, (unk_6050)
    4285/    5B6D : 21 00 00            	ld	hl, 0
    4286/    5B70 : 22 50 60            	ld	(unk_6050), hl
    4287/    5B73 :                     loc_5B73:
    4288/    5B73 : 60                  	ld	h, b
    4289/    5B74 : 69                  	ld	l, c
    4290/    5B75 : 4E                  	ld	c, (hl)
    4291/    5B76 : 23                  	inc	hl
    4292/    5B77 : 46                  	ld	b, (hl)
    4293/    5B78 : 78                  	ld	a, b
    4294/    5B79 : B1                  	or	c
    4295/    5B7A : 28 B7               	jr	z, loc_5B33
    4296/    5B7C : 23                  	inc	hl
    4297/    5B7D : 7E                  	ld	a, (hl)
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 73 - 2/19/2023 19:38:37


    4298/    5B7E : 23                  	inc	hl
    4299/    5B7F : 66                  	ld	h, (hl)
    4300/    5B80 : 6F                  	ld	l, a
    4301/    5B81 : CD 75 46            	call	CPDEHL
    4302/    5B84 : 2A 50 60            	ld	hl, (unk_6050)
    4303/    5B87 : 23                  	inc	hl
    4304/    5B88 : 22 50 60            	ld	(unk_6050), hl
    4305/    5B8B : 20 E6               	jr	nz, loc_5B73
    4306/    5B8D : 23                  	inc	hl
    4307/    5B8E : 23                  	inc	hl
    4308/    5B8F : 29                  	add	hl, hl
    4309/    5B90 : 23                  	inc	hl
    4310/    5B91 : ED 5B D2 60         	ld	de, (PROGND)
    4311/    5B95 : 19                  	add	hl, de
    4312/    5B96 : 38 C0               	jr	c, loc_5B58
    4313/    5B98 : CD 58 43            	call	ENFMEM
    4314/    5B9B : 22 D2 60            	ld	(PROGND), hl
    4315/    5B9E : AF                  	xor	a
    4316/    5B9F : 2B                  	dec	hl
    4317/    5BA0 : 77                  	ld	(hl), a
    4318/    5BA1 : 2B                  	dec	hl
    4319/    5BA2 : 77                  	ld	(hl), a
    4320/    5BA3 : 1B                  	dec	de
    4321/    5BA4 : 1B                  	dec	de
    4322/    5BA5 : EB                  	ex	de, hl
    4323/    5BA6 : 73                  	ld	(hl), e
    4324/    5BA7 : 23                  	inc	hl
    4325/    5BA8 : 72                  	ld	(hl), d
    4326/    5BA9 : 23                  	inc	hl
    4327/    5BAA : 3D                  	dec	a
    4328/    5BAB : 77                  	ld	(hl), a
    4329/    5BAC : 23                  	inc	hl
    4330/    5BAD : 77                  	ld	(hl), a
    4331/    5BAE : 23                  	inc	hl
    4332/    5BAF : EB                  	ex	de, hl
    4333/    5BB0 : 2A 52 60            	ld	hl, (unk_6052)
    4334/    5BB3 : 22 4E 60            	ld	(unk_604E), hl
    4335/    5BB6 :                     loc_5BB6:
    4336/    5BB6 : E1                  	pop	hl
    4337/    5BB7 : 4E                  	ld	c, (hl)
    4338/    5BB8 : 23                  	inc	hl
    4339/    5BB9 : 46                  	ld	b, (hl)
    4340/    5BBA : 23                  	inc	hl
    4341/    5BBB : C5                  	push	bc
    4342/    5BBC : 01 4E 60            	ld	bc, unk_604E
    4343/    5BBF : 7E                  	ld	a, (hl)
    4344/    5BC0 : 12                  	ld	(de), a
    4345/    5BC1 : 0A                  	ld	a, (bc)
    4346/    5BC2 : 77                  	ld	(hl), a
    4347/    5BC3 : 23                  	inc	hl
    4348/    5BC4 : 13                  	inc	de
    4349/    5BC5 : 03                  	inc	bc
    4350/    5BC6 : 7E                  	ld	a, (hl)
    4351/    5BC7 : 12                  	ld	(de), a
    4352/    5BC8 : 0A                  	ld	a, (bc)
    4353/    5BC9 : 77                  	ld	(hl), a
    4354/    5BCA : 13                  	inc	de
    4355/    5BCB : 2A 4E 60            	ld	hl, (unk_604E)
    4356/    5BCE : ED 4B 54 60         	ld	bc, (unk_6054)
    4357/    5BD2 : 09                  	add	hl, bc
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 74 - 2/19/2023 19:38:37


    4358/    5BD3 : 22 4E 60            	ld	(unk_604E), hl
    4359/    5BD6 : 2A 50 60            	ld	hl, (unk_6050)
    4360/    5BD9 : 2B                  	dec	hl
    4361/    5BDA : 7C                  	ld	a, h
    4362/    5BDB : B5                  	or	l
    4363/    5BDC : 22 50 60            	ld	(unk_6050), hl
    4364/    5BDF : 20 D5               	jr	nz, loc_5BB6
    4365/    5BE1 : 12                  	ld	(de), a
    4366/    5BE2 : E1                  	pop	hl
    4367/    5BE3 : 2A 5A 60            	ld	hl, (BASTXT)
    4368/    5BE6 : E5                  	push	hl
    4369/    5BE7 :                     loc_5BE7:
    4370/    5BE7 : E1                  	pop	hl
    4371/    5BE8 : 4E                  	ld	c, (hl)
    4372/    5BE9 : 23                  	inc	hl
    4373/    5BEA : 46                  	ld	b, (hl)
    4374/    5BEB : 23                  	inc	hl
    4375/    5BEC : C5                  	push	bc
    4376/    5BED : 7E                  	ld	a, (hl)
    4377/    5BEE : 23                  	inc	hl
    4378/    5BEF : A6                  	and	(hl)
    4379/    5BF0 : 3C                  	inc	a
    4380/    5BF1 : 28 FE               	jr	z, loc_5C16
    4381/    5BF3 :                     loc_5BF3:
    4382/    5BF3 : 23                  	inc	hl
    4383/    5BF4 :                     loc_5BF4:
    4384/    5BF4 : 7E                  	ld	a, (hl)
    4385/    5BF5 : B7                  	or	a
    4386/    5BF6 : 28 EF               	jr	z, loc_5BE7
    4387/    5BF8 : FE 88               	cp	88h ; ''
    4388/    5BFA : 28 FE               	jr	z, loc_5C23
    4389/    5BFC : FE 8C               	cp	8Ch ; ''
    4390/    5BFE : 28 FE               	jr	z, loc_5C23
    4391/    5C00 : FE 8B               	cp	8Bh ; ''
    4392/    5C02 : 28 FE               	jr	z, loc_5C08
    4393/    5C04 : FE A9               	cp	0A9h ; '©'
    4394/    5C06 : 20 EB               	jr	nz, loc_5BF3
    4395/    5C08 :                     loc_5C08:
    4396/    5C08 : 23                  	inc	hl
    4397/    5C09 : CD F6 48            	call	ATOH
    4398/    5C0C : 7B                  	ld	a, e
    4399/    5C0D : B2                  	or	d
    4400/    5C0E : C4 0E 5C            	call	nz, sub_5C38
    4401/    5C11 : C4 11 5C            	call	nz, sub_5C6A
    4402/    5C14 : 18 DE               	jr	loc_5BF4
    4403/    5C16 :                     
    4404/    5C16 :                     loc_5C16:
    4405/    5C16 : 2B                  	dec	hl
    4406/    5C17 : 22 D2 60            	ld	(PROGND), hl
    4407/    5C1A : 2B                  	dec	hl
    4408/    5C1B : 77                  	ld	(hl), a
    4409/    5C1C : 2B                  	dec	hl
    4410/    5C1D : 77                  	ld	(hl), a
    4411/    5C1E : E1                  	pop	hl
    4412/    5C1F : E1                  	pop	hl
    4413/    5C20 : C3 7F 44            	jp	SETPTR
    4414/    5C23 :                     
    4415/    5C23 :                     loc_5C23:
    4416/    5C23 : 23                  	inc	hl
    4417/    5C24 : CD F6 48            	call	ATOH
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 75 - 2/19/2023 19:38:37


    4418/    5C27 : 7B                  	ld	a, e
    4419/    5C28 : B2                  	or	d
    4420/    5C29 : 28 C9               	jr	z, loc_5BF4
    4421/    5C2B : CD 2B 5C            	call	sub_5C38
    4422/    5C2E : C4 2E 5C            	call	nz, sub_5C6A
    4423/    5C31 : 7E                  	ld	a, (hl)
    4424/    5C32 : FE 2C               	cp	','
    4425/    5C34 : 20 BE               	jr	nz, loc_5BF4
    4426/    5C36 : 18 EB               	jr	loc_5C23
    4427/    5C38 :                     
    4428/    5C38 :                     sub_5C38:
    4429/    5C38 : E5                  	push	hl
    4430/    5C39 : D5                  	push	de
    4431/    5C3A : 11 FF FF            	ld	de, 0FFFFh
    4432/    5C3D : CD B0 44            	call	SRCHLN
    4433/    5C40 : D1                  	pop	de
    4434/    5C41 : 03                  	inc	bc
    4435/    5C42 : 03                  	inc	bc
    4436/    5C43 : 03                  	inc	bc
    4437/    5C44 : 03                  	inc	bc
    4438/    5C45 : 60                  	ld	h, b
    4439/    5C46 : 69                  	ld	l, c
    4440/    5C47 : ED 4B 52 60         	ld	bc, (unk_6052)
    4441/    5C4B :                     loc_5C4B:
    4442/    5C4B : 7E                  	ld	a, (hl)
    4443/    5C4C : 23                  	inc	hl
    4444/    5C4D : E5                  	push	hl
    4445/    5C4E : B6                  	or	(hl)
    4446/    5C4F : 28 FE               	jr	z, loc_5C67
    4447/    5C51 : 7E                  	ld	a, (hl)
    4448/    5C52 : 2B                  	dec	hl
    4449/    5C53 : 6E                  	ld	l, (hl)
    4450/    5C54 : 67                  	ld	h, a
    4451/    5C55 : CD 75 46            	call	CPDEHL
    4452/    5C58 : 28 FE               	jr	z, loc_5C64
    4453/    5C5A : 2A 54 60            	ld	hl, (unk_6054)
    4454/    5C5D : 09                  	add	hl, bc
    4455/    5C5E : 44                  	ld	b, h
    4456/    5C5F : 4D                  	ld	c, l
    4457/    5C60 : E1                  	pop	hl
    4458/    5C61 : 23                  	inc	hl
    4459/    5C62 : 18 E7               	jr	loc_5C4B
    4460/    5C64 :                     
    4461/    5C64 :                     loc_5C64:
    4462/    5C64 : 3E FF               	ld	a, 0FFh
    4463/    5C66 : B7                  	or	a
    4464/    5C67 :                     loc_5C67:
    4465/    5C67 : E1                  	pop	hl
    4466/    5C68 : E1                  	pop	hl
    4467/    5C69 : C9                  	ret
    4468/    5C6A :                     
    4469/    5C6A :                     sub_5C6A:
    4470/    5C6A : C5                  	push	bc
    4471/    5C6B : EB                  	ex	de, hl
    4472/    5C6C : 2A D2 60            	ld	hl, (PROGND)
    4473/    5C6F : ED 52               	sbc	hl, de
    4474/    5C71 : E5                  	push	hl
    4475/    5C72 :                     loc_5C72:
    4476/    5C72 : C1                  	pop	bc
    4477/    5C73 : 62                  	ld	h, d
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 76 - 2/19/2023 19:38:37


    4478/    5C74 : 6B                  	ld	l, e
    4479/    5C75 : 1B                  	dec	de
    4480/    5C76 : 1A                  	ld	a, (de)
    4481/    5C77 : FE 2C               	cp	','
    4482/    5C79 : 28 FE               	jr	z, loc_5C86
    4483/    5C7B : FE 3A               	cp	':'
    4484/    5C7D : 30 FE               	jr	nc, loc_5C86
    4485/    5C7F : C5                  	push	bc
    4486/    5C80 : D5                  	push	de
    4487/    5C81 : ED B0               	ldir
    4488/    5C83 : D1                  	pop	de
    4489/    5C84 : 18 EC               	jr	loc_5C72
    4490/    5C86 :                     
    4491/    5C86 :                     loc_5C86:
    4492/    5C86 : EB                  	ex	de, hl
    4493/    5C87 : D1                  	pop	de
    4494/    5C88 : E5                  	push	hl
    4495/    5C89 : C5                  	push	bc
    4496/    5C8A : AF                  	xor	a
    4497/    5C8B : 06 98               	ld	b, 98h ; ''
    4498/    5C8D : CD 27 56            	call	RETINT
    4499/    5C90 : CD A6 57            	call	NUMASC
    4500/    5C93 : C1                  	pop	bc
    4501/    5C94 : D1                  	pop	de
    4502/    5C95 : 23                  	inc	hl
    4503/    5C96 : 13                  	inc	de
    4504/    5C97 :                     loc_5C97:
    4505/    5C97 : 7E                  	ld	a, (hl)
    4506/    5C98 : B7                  	or	a
    4507/    5C99 : 28 FE               	jr	z, loc_5CAA
    4508/    5C9B : C5                  	push	bc
    4509/    5C9C : E5                  	push	hl
    4510/    5C9D : EB                  	ex	de, hl
    4511/    5C9E : 09                  	add	hl, bc
    4512/    5C9F : 54                  	ld	d, h
    4513/    5CA0 : 5D                  	ld	e, l
    4514/    5CA1 : 2B                  	dec	hl
    4515/    5CA2 : ED B8               	lddr
    4516/    5CA4 : E1                  	pop	hl
    4517/    5CA5 : ED A0               	ldi
    4518/    5CA7 : C1                  	pop	bc
    4519/    5CA8 : 18 ED               	jr	loc_5C97
    4520/    5CAA :                     
    4521/    5CAA :                     loc_5CAA:
    4522/    5CAA : D5                  	push	de
    4523/    5CAB : ED 5B 5A 60         	ld	de, (BASTXT)
    4524/    5CAF : CD 88 44            	call	PTRLP
    4525/    5CB2 :                     loc_5CB2:
    4526/    5CB2 : 23                  	inc	hl
    4527/    5CB3 : 7E                  	ld	a, (hl)
    4528/    5CB4 : 23                  	inc	hl
    4529/    5CB5 : B6                  	or	(hl)
    4530/    5CB6 : 20 FA               	jr	nz, loc_5CB2
    4531/    5CB8 : EB                  	ex	de, hl
    4532/    5CB9 : 73                  	ld	(hl), e
    4533/    5CBA : 23                  	inc	hl
    4534/    5CBB : 72                  	ld	(hl), d
    4535/    5CBC : 13                  	inc	de
    4536/    5CBD : 13                  	inc	de
    4537/    5CBE : ED 53 D2 60         	ld	(PROGND), de
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 77 - 2/19/2023 19:38:37


    4538/    5CC2 : E1                  	pop	hl
    4539/    5CC3 : 54                  	ld	d, h
    4540/    5CC4 : 5D                  	ld	e, l
    4541/    5CC5 :                     loc_5CC5:
    4542/    5CC5 : 7E                  	ld	a, (hl)
    4543/    5CC6 : B7                  	or	a
    4544/    5CC7 : 23                  	inc	hl
    4545/    5CC8 : 20 FB               	jr	nz, loc_5CC5
    4546/    5CCA : C1                  	pop	bc
    4547/    5CCB : E3                  	ex	(sp), hl
    4548/    5CCC : C5                  	push	bc
    4549/    5CCD : EB                  	ex	de, hl
    4550/    5CCE : C9                  	ret
    4551/    5CCF :                     
    4552/    5CCF :                     ;------------------------------------------------------------------------------
    4553/    5CCF :                     ; Erweiterungen Basic V3.2 gegenüber Original
    4554/    5CCF :                     ;------------------------------------------------------------------------------
    4555/    5CCF :                     
    4556/    5CCF : FE 0D               sub_5CCF:	cp	0Dh
    4557/    5CD1 : C8                  		ret	z
    4558/    5CD2 : FE 13               		cp	13h
    4559/    5CD4 : CC BF 4A            		call	z, PRNTCRLF
    4560/    5CD7 : 37                  		scf
    4561/    5CD8 : C8                  		ret	z
    4562/    5CD9 : C3 8E 46            		jp	OUTC
    4563/    5CDC :                     		
    4564/    5CDC : CD 93 50            INKEY:		call	IDTEST
    4565/    5CDF : CD 5E 4E            		call	GETVAR
    4566/    5CE2 : 2B                  		dec	hl
    4567/    5CE3 : CD 7B 46            		call	CHKSYN
    4568/    5CE6 : 24                  		db '$'
    4569/    5CE7 : E5                  		push	hl
    4570/    5CE8 : EB                  		ex	de, hl
    4571/    5CE9 : 36 00               		ld	(hl), 0
    4572/    5CEB : 23                  		inc	hl
    4573/    5CEC : 54                  		ld	d, h
    4574/    5CED : 5D                  		ld	e, l
    4575/    5CEE : 23                  		inc	hl
    4576/    5CEF : 73                  		ld	(hl), e
    4577/    5CF0 : 23                  		inc	hl
    4578/    5CF1 : 72                  		ld	(hl), d
    4579/    5CF2 : CD F2 5C            		call	sub_5FC4	; jp unk_297 UP "Taste"
    4580/    5CF5 : E1                  		pop	hl
    4581/    5CF6 : C8                  		ret	z
    4582/    5CF7 : 12                  		ld	(de), a
    4583/    5CF8 : 1B                  		dec	de
    4584/    5CF9 : 3E 01               		ld	a, 1
    4585/    5CFB : 12                  		ld	(de), a
    4586/    5CFC : C9                  		ret
    4587/    5CFD :                     
    4588/    5CFD :                     ;NMI-Routine -> Break
    4589/    5CFD : 3E 11               loc_5CFD:	ld	a, 11h		; NMI-Routine
    4590/    5CFF : 32 FF 5C            loc_5CFF:	ld	(IOBYT), a
    4591/    5D02 : E5                  		push	hl
    4592/    5D03 : 21 91 48            		ld	hl, unk_4891
    4593/    5D06 : E3                  		ex	(sp), hl
    4594/    5D07 : ED 45               		retn
    4595/    5D09 :                     
    4596/    5D09 :                     ;-------------------
    4597/    5D09 :                     ;KEY Aktuelle Belegung der Funktionstasten
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 78 - 2/19/2023 19:38:37


    4598/    5D09 : 20 FE               KEY:		jr	nz, LOCATE	; wenn noch wasl folgz, dann Sprung
    4599/    5D0B :                     					; aber warum zu LOCATE und nicht zu ERROR???
    4600/    5D0B :                     		;			
    4601/    5D0B : 01 31 08            		ld	bc, 831h	; B=8, C='1'
    4602/    5D0E : 11 0F 5D            		ld	de, unk_1F80+1	; Funktionstasten
    4603/    5D11 : DF                  loc_5D11:	rst	18h
    4604/    5D12 : 0D 4B 45 D9         		db 0Dh,"KE",'Y'+80h
    4605/    5D16 : 79                  		ld	a, c
    4606/    5D17 : D7                  		rst	10h		; outch nummer
    4607/    5D18 : DF                  		rst	18h		; Leerzeichen
    4608/    5D19 : A0                  		db 0A0h
    4609/    5D1A : 1A                  loc_5D1A:	ld	a, (de)
    4610/    5D1B : 13                  		inc	de
    4611/    5D1C : FE 20               		cp	' '		; Steuerzeichen?
    4612/    5D1E : 30 FE               		jr	nc, loc_5D22	; nein
    4613/    5D20 : C6 E0               		add	a, 0E0h		; Sonst stattdessen Grafikzeichen ausgeben
    4614/    5D22 : FE E0               loc_5D22:	cp	0E0h		; 00-Byte
    4615/    5D24 : C4 8E 46            		call	nz, OUTC	; dabei übergehen
    4616/    5D27 : 20 F1               		jr	nz, loc_5D1A	; 00 ist Trennzeichen zu nächstem Key
    4617/    5D29 : 0C                  		inc	c		; nächste Nummer
    4618/    5D2A : 10 E5               		djnz	loc_5D11	; 8 Funktionstasten durchlaufen
    4619/    5D2C : C9                  		ret
    4620/    5D2D :                     
    4621/    5D2D :                     ;-------------------
    4622/    5D2D :                     ;LOCATE (S,Z) Kursor nach Spalte S, Zeile Z
    4623/    5D2D : CD 7B 46            LOCATE:		call	CHKSYN
    4624/    5D30 : 28                  		db '('
    4625/    5D31 : CD 88 53            		call	GETINT		; Spalte
    4626/    5D34 : FE 40               		cp	64
    4627/    5D36 : 30 FE               		jr	nc, loc_5D43
    4628/    5D38 : F5                  		push	af
    4629/    5D39 : CD 7B 46            		call	CHKSYN
    4630/    5D3C : 2C                  		db ','
    4631/    5D3D : CD 88 53            		call	GETINT		; a=Zeile
    4632/    5D40 : FE 20               		cp	32
    4633/    5D42 : D1                  		pop	de		; d=Spalte
    4634/    5D43 : D2 F1 48            loc_5D43:	jp	nc, FCERR
    4635/    5D46 : 06 06               		ld	b, 6		; 2^6 = 64
    4636/    5D48 : 5A                  		ld	e, d		; e=Spalte
    4637/    5D49 : 16 00               		ld	d, 0		; da=Zeile
    4638/    5D4B : CB 27               loc_5D4B:	sla	a
    4639/    5D4D : CB 12               		rl	d		
    4640/    5D4F : 10 FA               		djnz	loc_5D4B	; da=Zeile * 64
    4641/    5D51 : 83                  		add	a, e		; + Spalte 
    4642/    5D52 : 5F                  		ld	e, a		; de=pos
    4643/    5D53 : E5                  		push	hl
    4644/    5D54 : 21 FF 17            		ld	hl, 17FFh	; BWS links oben
    4645/    5D57 : ED 52               		sbc	hl, de		; Pos. Berechnen
    4646/    5D59 : 22 59 5D            		ld	(cupos), hl	; Cusor setzen
    4647/    5D5C : E1                  loc_5D5C:	pop	hl
    4648/    5D5D : CD 7B 46            		call	CHKSYN
    4649/    5D60 : 29                  		db ')'
    4650/    5D61 : C9                  		ret
    4651/    5D62 :                     
    4652/    5D62 :                     ;-------------------
    4653/    5D62 :                     ;Raster - Grafik :
    4654/    5D62 :                     ;Der Bildschirm wird in 8192 Bildpunkte unterteilt (128 x 64)
    4655/    5D62 :                     ;Jeder Bildpunkt kann gesetzt, rückgesetzt und getestet werden.
    4656/    5D62 :                     ;SET (x,y) SET (63,31) setzt Punkt in Bildmitte
    4657/    5D62 :                     ;RESET (x,y) RESET (A,B)
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 79 - 2/19/2023 19:38:37


    4658/    5D62 :                     ;POINT (x,y) POINT (0,0) testet links oben
    4659/    5D62 :                     ;x=0 Bis 127; y=0 bis 63
    4660/    5D62 :                     
    4661/    5D62 : 97                  PSET:		sub	a		; a=0
    4662/    5D63 : 01                  		db    1			; ld	  bc,...
    4663/    5D64 : 3E 80               POINT:		ld	a, 80h		; a=80
    4664/    5D66 : 01                  		db    1			; ld	  bc,...
    4665/    5D67 : 3E 01               PRESET:		ld	a, 1		; a=1
    4666/    5D69 : F5                  		push	af
    4667/    5D6A : CD 7B 46            		call	CHKSYN
    4668/    5D6D : 28                  		db	'('
    4669/    5D6E : CD 88 53            		call	GETINT
    4670/    5D71 : 88                  		adc	a, b
    4671/    5D72 : 53                  POINT0:		ld	d, e
    4672/    5D73 : FE 80               		cp	128
    4673/    5D75 : 30 CC               		jr	nc, loc_5D43	; fehler
    4674/    5D77 : F5                  		push	af
    4675/    5D78 : CD 7B 46            		call	CHKSYN
    4676/    5D7B : 2C                  		db	','
    4677/    5D7C : CD 88 53            		call	GETINT
    4678/    5D7F : FE 40               		cp	64
    4679/    5D81 : 30 C0               		jr	nc, loc_5D43	; fehler
    4680/    5D83 : CB 3F               		srl	a
    4681/    5D85 : 0E 00               		ld	c, 0
    4682/    5D87 : CB 11               		rl	c
    4683/    5D89 : CB 21               		sla	c
    4684/    5D8B : CB 21               		sla	c
    4685/    5D8D : 20 FE               		jr	nz, loc_5D8E
    4686/    5D8F : 0C                  		inc	c
    4687/    5D90 : D1                  loc_5D8E:	pop	de
    4688/    5D91 : 5A                  		ld	e, d
    4689/    5D92 : CB 23               		sla	e
    4690/    5D94 : 1F                  		rra
    4691/    5D95 : CB 1B               		rr	e
    4692/    5D97 : 1F                  		rra
    4693/    5D98 : CB 1B               		rr	e
    4694/    5D9A : 57                  		ld	d, a
    4695/    5D9B : 30 FE               		jr	nc, loc_5D9D
    4696/    5D9D : CB 21               		sla	c
    4697/    5D9F : F1                  loc_5D9D:	pop	af
    4698/    5DA0 : E5                  		push	hl
    4699/    5DA1 : 21 FF 17            		ld	hl, 17FFh	; BWS-Anfang
    4700/    5DA4 : ED 52               		sbc	hl, de
    4701/    5DA6 : 47                  		ld	b, a
    4702/    5DA7 : 7E                  		ld	a, (hl)
    4703/    5DA8 : FE 10               		cp	10h		; ?
    4704/    5DAA : 38 FE               		jr	c, loc_5DAB
    4705/    5DAC : 97                  		sub	a
    4706/    5DAD : CB 20               loc_5DAB:	sla	b
    4707/    5DAF : 38 FE               		jr	c, loc_5DBB
    4708/    5DB1 : 28 FE               		jr	z, loc_5DB8
    4709/    5DB3 : 47                  		ld	b, a
    4710/    5DB4 : 79                  		ld	a, c
    4711/    5DB5 : 2F                  		cpl
    4712/    5DB6 : A0                  		and	b
    4713/    5DB7 : 77                  loc_5DB5:	ld	(hl), a
    4714/    5DB8 : 18 A2               		jr	loc_5D5C
    4715/    5DBA : B1                  loc_5DB8:	or	c
    4716/    5DBB : 18 FA               		jr	loc_5DB5
    4717/    5DBD : E1                  loc_5DBB:	pop	hl
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 80 - 2/19/2023 19:38:37


    4718/    5DBE : 47                  		ld	b, a
    4719/    5DBF : CD 7B 46            		call	CHKSYN
    4720/    5DC2 : 29                  		db	')'
    4721/    5DC3 : 78                  		ld	a, b
    4722/    5DC4 : A1                  		and	c
    4723/    5DC5 : 91                  		sub	c
    4724/    5DC6 : D1                  		pop	de
    4725/    5DC7 : E5                  		push	hl
    4726/    5DC8 : 11 52 4D            		ld	de, RETNUM
    4727/    5DCB : D5                  		push	de
    4728/    5DCC : 20 FE               		jr	nz, loc_5DCF
    4729/    5DCE : 06 01               		ld	b, 1
    4730/    5DD0 : 11                  		db  11h			; Ld de, xxxx
    4731/    5DD1 : AF                  loc_5DCF:	xor	a
    4732/    5DD2 : 47                  		ld	b, a
    4733/    5DD3 : C3 0A 50            		jp	ABPASS		; Return integer AB
    4734/    5DD6 :                     
    4735/    5DD6 :                     ;
    4736/    5DD6 :                     ;-------------------
    4737/    5DD6 :                     ; CSAVE"Name" Speichert das Basicprogramm auf Kassette, Name 1-16 Zeichen
    4738/    5DD6 :                     ; CSAVE*"Name" Speichert Feld unter Name auf Kassette
    4739/    5DD6 : FE AE               CSAVE:		cp	ZTIMES		; folgt '*'?
    4740/    5DD8 : 28 FE               		jr	z, loc_5DEF
    4741/    5DDA :                     ;Programm speichern
    4742/    5DDA : CD 97 4C            		call	EVAL
    4743/    5DDD : E5                  		push	hl
    4744/    5DDE : 0E 42               		ld	c, 'B'          ; Basic-Programm
    4745/    5DE0 : 2A D2 60            		ld	hl, (PROGND)
    4746/    5DE3 : ED 5B 5A 60         		ld	de, (BASTXT)
    4747/    5DE7 : CD E7 5D            		call	sub_5F39	; tb-Kopfblock füllen
    4748/    5DEA : CD EA 5D            		call	sub_5F00	; speichern
    4749/    5DED : E1                  loc_5DEB:	pop	hl
    4750/    5DEE : C3 EE 5D            		jp	unk_A31		; q_ko20, Start/Stop-Schaltung stop
    4751/    5DF1 :                     ; Feld speichern		
    4752/    5DF1 : 23                  loc_5DEF:	inc	hl
    4753/    5DF2 : CD 97 4C            		call	EVAL
    4754/    5DF5 : E5                  		push	hl
    4755/    5DF6 : 2A AB 60            		ld	hl, (LSTRAM)
    4756/    5DF9 : ED 4B BF 60         		ld	bc, (STRBOT)
    4757/    5DFD : A7                  		and	a
    4758/    5DFE : ED 42               		sbc	hl, bc
    4759/    5E00 : 28 EB               		jr	z, loc_5DEB
    4760/    5E02 : 2A D6 60            		ld	hl, (ARREND)
    4761/    5E05 : 11 AB 60            		ld	de, LSTRAM
    4762/    5E08 : 0E 46               		ld	c, 'F'          ; Feld
    4763/    5E0A : CD 0A 5E            		call	sub_5F39	; tb-Kopfblock füllen
    4764/    5E0D : CD 0D 5E            		call	sub_5F00	; speichern
    4765/    5E10 : CD 10 5E            		call	sub_5F2C	; Speicherbereich Variablen selektieren
    4766/    5E13 : CD 13 5E            		call	unk_BF7		; tbsave
    4767/    5E16 : 18 D5               		jr	loc_5DEB
    4768/    5E18 :                     ;
    4769/    5E18 :                     ;-------------------
    4770/    5E18 :                     ; CLOAD"Name" Lädt ein Programm von Kassette
    4771/    5E18 :                     ; CLOAD* A$ Lädt Feld mit übereinstimmenden Namen in A$ von Kassette.
    4772/    5E18 : FE AE               CLOAD:		cp	ZTIMES		; folgt '*'?
    4773/    5E1A : 28 FE               		jr	z, loc_5E4D
    4774/    5E1C :                     ; Programm laden
    4775/    5E1C : 08                  		ex	af, af'		; '
    4776/    5E1D : CD 97 4C            		call	EVAL
    4777/    5E20 : E5                  		push	hl
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 81 - 2/19/2023 19:38:37


    4778/    5E21 : CD 21 5E            		call	sub_5F39	; tb-Kopfblock füllen
    4779/    5E24 : 01 42 50            		ld	bc, 5042h	; "BP"
    4780/    5E27 : CD 27 5E            		call	sub_5E70
    4781/    5E2A : 30 FE               		jr	nc, loc_5E48
    4782/    5E2C :                     		; Programm hinter aktuelles Programm laden
    4783/    5E2C : 2A 2C 5E            		ld	hl, (unk_18D1)	; tbl_eadr
    4784/    5E2F : ED 5B 2F 5E         		ld	de, (unk_18D3)	; tbl_aadr
    4785/    5E33 : A7                  		and	a
    4786/    5E34 : ED 52               		sbc	hl, de		; hl=länge
    4787/    5E36 : ED 5B D2 60         		ld	de, (PROGND)	; aktuelles Programmende
    4788/    5E3A : 1B                  		dec	de		; 2 Zeichen zurück (Zeilennummer 0000)
    4789/    5E3B : 1B                  		dec	de		; 
    4790/    5E3C : 19                  		add	hl, de		; neues Programmende
    4791/    5E3D : CD 58 43            		call	ENFMEM		; test auf genug speicher
    4792/    5E40 : ED 53 40 5E         		ld	(unk_18D3), de	; tbl_aadr  neue Ladeadressen setzen
    4793/    5E44 : 22 44 5E            		ld	(unk_18D1), hl	; tbl_eadr
    4794/    5E47 : 22 D2 60            		ld	(PROGND), hl
    4795/    5E4A : CD 4A 5E            loc_5E48:	call	loc_5ED3
    4796/    5E4D : 18 9E               loc_5E4B:	jr	loc_5DEB
    4797/    5E4F :                     ;Feld laden
    4798/    5E4F : 23                  loc_5E4D:	inc	hl
    4799/    5E50 : A7                  		and	a
    4800/    5E51 : 08                  		ex	af, af'		;'
    4801/    5E52 : CD 97 4C            		call	EVAL
    4802/    5E55 : E5                  		push	hl
    4803/    5E56 : CD 56 5E            		call	sub_5F39	; tb-Kopfblock füllen
    4804/    5E59 : 01 46 44            		ld	bc, 4446h	; "FD"
    4805/    5E5C : CD 5C 5E            		call	sub_5E70
    4806/    5E5F : 30 8C               		jr	nc, loc_5DEB
    4807/    5E61 : 2A 61 5E            		ld	hl, (unk_18D1)	; tbl_eadr
    4808/    5E64 : CD 58 43            		call	ENFMEM
    4809/    5E67 : CD 67 5E            		call	loc_5ED3
    4810/    5E6A : CD 6A 5E            		call	sub_5F2C	; Speicherbereich Variablen selektieren
    4811/    5E6D : CD 6D 5E            		call	sub_5EEA
    4812/    5E70 : 18 DB               		jr	loc_5E4B
    4813/    5E72 :                     ;
    4814/    5E72 : CD 72 5E            sub_5E70:	call	unk_A37		; q_ko21, Start/Stop-Schaltung start
    4815/    5E75 : 22 75 5E            		ld	(unk_1880), hl	; tbb_aadr
    4816/    5E78 : 2E D5               		ld	l, 0D5h		; ???
    4817/    5E7A : 22 7A 5E            		ld	(unk_187E), hl	; tbb_eadr
    4818/    5E7D : DF                  		rst	18h
    4819/    5E7E : 53 65 61 72 63 68   		db "Search for",0A0h
                    20 66 6F 72 A0    
> > > grafikbasic-v3-2.asm(4820):9: error: unknown function
    4820/    5E89 :                     		ld	l, lo(unk_189E)	; tbh_filename, h=18h
    4821/    5E89 : C5                  		push	bc
    4822/    5E8A : 06 10               		ld	b, 10h
    4823/    5E8C : CD 8C 5E            		call	sub_5ECB
    4824/    5E8F : CD 8F 5E            loc_5E8F:	call	unk_C81		; tbload
    4825/    5E92 : 21 92 5E            		ld	hl, unk_18B6	; tb_blkbuf
    4826/    5E95 : 11 95 5E            		ld	de, unk_1896	; tb_kopfbuf
    4827/    5E98 : 06 08               		ld	b, 8
    4828/    5E9A : 1A                  loc_5E9A:	ld	a, (de)
    4829/    5E9B : BE                  		cp	(hl)
    4830/    5E9C : 20 F1               		jr	nz, loc_5E8F
    4831/    5E9E : 23                  		inc	hl
    4832/    5E9F : 13                  		inc	de
    4833/    5EA0 : 10 F8               		djnz	loc_5E9A
    4834/    5EA2 : 06 12               		ld	b, 12h
    4835/    5EA4 : 1A                  loc_5EA4:	ld	a, (de)
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 82 - 2/19/2023 19:38:37


    4836/    5EA5 : BE                  		cp	(hl)
    4837/    5EA6 : 28 FE               		jr	z, loc_5EAC
    4838/    5EA8 : FE 20               		cp	20h ; ' '
    4839/    5EAA : 20 FE               		jr	nz, loc_5EB8
    4840/    5EAC : 23                  loc_5EAC:	inc	hl
    4841/    5EAD : 13                  		inc	de
    4842/    5EAE : 10 F4               		djnz	loc_5EA4
    4843/    5EB0 : C1                  		pop	bc
    4844/    5EB1 : 7E                  		ld	a, (hl)
    4845/    5EB2 : B8                  		cp	b
    4846/    5EB3 : C8                  		ret	z
    4847/    5EB4 : B9                  		cp	c
    4848/    5EB5 : 37                  		scf
    4849/    5EB6 : C8                  		ret	z
    4850/    5EB7 : C5                  		push	bc
    4851/    5EB8 : DF                  loc_5EB8:	rst	18h
    4852/    5EB9 : 46 6F 75 6E 64 20   		db "Found  ",0A0h
                    20 A0             
    4853/    5EC1 : CD C1 5E            		call	sub_5EC6	; Anzeige Filename
    4854/    5EC4 : 18 C9               		jr	loc_5E8F
    4855/    5EC6 :                     
    4856/    5EC6 :                     ; Anzeige Filename
    4857/    5EC6 : 21 C6 5E            sub_5EC6:	ld	hl, unk_18BE	; tbl_filename
    4858/    5EC9 : 06 13               		ld	b, 13h		; 16+2+1 (Filename, Trenner, Dateityp)
    4859/    5ECB : 7E                  sub_5ECB:	ld	a, (hl)
    4860/    5ECC : D7                  		rst	10h
    4861/    5ECD : 23                  		inc	hl
    4862/    5ECE : 10 FB               		djnz	sub_5ECB
    4863/    5ED0 : DF                  		rst	18h
> > > grafikbasic-v3-2.asm(4864): error: invalid symbol name
    4864/    5ED1 :                     		db  8Dh	 
    4865/    5ED1 : C9                  		ret
    4866/    5ED2 :                     
    4867/    5ED2 :                     ; Adressen aus Lese-Kopfblockbuffer übernehmen und Laden
    4868/    5ED2 : 21 D2 5E            loc_5ED3:	ld	hl, unk_18D1	; tbl_eadr
    4869/    5ED5 : 11 D5 5E            		ld	de, unk_187E	; tbb_eadr
    4870/    5ED8 : 01 04 00            		ld	bc, 4
    4871/    5EDB : ED B0               		ldir
    4872/    5EDD : DF                  		rst	18h
    4873/    5EDE : 4C 6F 61 64 69 6E   		db "Loading",0A0h
                    67 A0             
    4874/    5EE6 : CD C6 5E            		call	sub_5EC6	; Anzeige Filename
    4875/    5EE9 : CD E9 5E            sub_5EEA:	call	unk_C81		; tbload
    4876/    5EEC : FD 7D               		ld	a, iyl		; IY zeigt in Fehlerarray
    4877/    5EEE : D6 82               		sub	82h		; lo(tb_errarr) auf anfang?
    4878/    5EF0 : C8                  		ret	z		; dann kein Lesefehler, also ok
    4879/    5EF1 : 0F                  		rrca			; 
    4880/    5EF2 : D9                  		exx
    4881/    5EF3 : BD                  		cp	l
    4882/    5EF4 : C4 F4 5E            		call	nz, unk_183	; OUTHEX
    4883/    5EF7 : CD F7 5E            		call	unk_A31		; q_ko20, Start/Stop-Schaltung stop
    4884/    5EFA : 1E 24               		ld	e, 24h 		; "LD" load error
    4885/    5EFC : C3 84 43            		jp	ERROR
    4886/    5EFF :                     		
    4887/    5EFF :                     ; speichern
    4888/    5EFF :                     ;in hl = 18h
    4889/    5EFF : CD FF 5E            sub_5F00:	call	unk_A37		; q_ko21, Start/Stop-Schaltung start
    4890/    5F02 : 2B                  		dec	hl		; h==18h
    4891/    5F03 : 22 03 5F            		ld	(unk_187E), hl	; tbb_eadr
> > > grafikbasic-v3-2.asm(4892):9: error: unknown function
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 83 - 2/19/2023 19:38:37


    4892/    5F06 :                     		ld	l, lo(unk_1896)		; lo(tb_kopfbuf)
    4893/    5F06 : 22 06 5F            		ld	(unk_1880), hl	; tbb_aadr
    4894/    5F09 : DF                  		rst	18h
    4895/    5F0A : 53 61 76 69 6E 67   		db "Saving",0A0h
                    A0                
> > > grafikbasic-v3-2.asm(4896):9: error: unknown function
    4896/    5F11 :                     		ld	l, lo(unk_189E)  	; lo(tbh_filename)
    4897/    5F11 : 06 10               		ld	b, 10h
    4898/    5F13 : CD CB 5E            		call	sub_5ECB
    4899/    5F16 : CD 16 5F            		call	unk_BF7		; tbsave
    4900/    5F19 : 21 19 5F            		ld	hl, unk_18B1	; tbh_eadr
    4901/    5F1C : 11 1C 5F            		ld	de, unk_187E	; tbb_eadr
    4902/    5F1F : 01 04 00            		ld	bc, 4
    4903/    5F22 : ED B0               		ldir
    4904/    5F24 : C3 24 5F            		jp	unk_BF7		; tbsave
    4905/    5F27 :                     
    4906/    5F27 :                     ; Speicherbereich Variablen selektieren
    4907/    5F27 : 2A AB 60            sub_5F2C:	ld	hl, (LSTRAM)	; Last available RAM
    4908/    5F2A : 22 2A 5F            		ld	(unk_187E), hl	; tbb_eadr
    4909/    5F2D : 2A BF 60            		ld	hl, (STRBOT)	; Bottom of string space
    4910/    5F30 : 22 30 5F            		ld	(unk_1880), hl	; tbb_aadr
    4911/    5F33 : C9                  		ret
    4912/    5F34 :                     
    4913/    5F34 :                     ; tb-Kopfblock füllen
    4914/    5F34 : C5                  sub_5F39:	push	bc
    4915/    5F35 : 22 35 5F            		ld	(unk_18B1), hl	; tbh_eadr
    4916/    5F38 : ED 53 38 5F         		ld	(unk_18B3), de	; tbh_aadr
    4917/    5F3C : CD 8E 52            		call	GETLEN
    4918/    5F3F : CA F1 48            		jp	z, FCERR
    4919/    5F42 : 23                  		inc	hl
    4920/    5F43 : 23                  		inc	hl
    4921/    5F44 : 5E                  		ld	e, (hl)
    4922/    5F45 : 23                  		inc	hl
    4923/    5F46 : 56                  		ld	d, (hl)
    4924/    5F47 : 21 47 5F            		ld	hl, unk_1896	; tb_kopfbuf
    4925/    5F4A : 06 08               		ld	b, 8		; 8x'N' eintragen
    4926/    5F4C : 36 4E               loc_5F51:	ld	(hl), 'N'
    4927/    5F4E : 2C                  		inc	l
    4928/    5F4F : 10 FB               		djnz	loc_5F51
    4929/    5F51 : 4F                  		ld	c, a
    4930/    5F52 : 06 10               		ld	b, 10h		; 16 Zeichen Namen
    4931/    5F54 : 1A                  loc_5F59:	ld	a, (de)
    4932/    5F55 : 77                  		ld	(hl), a
    4933/    5F56 : 20 FE               		jr	nz, loc_5F60
    4934/    5F58 : 36 20               		ld	(hl), ' '	; Rest: Leerzeichen
    4935/    5F5A : 0C                  		inc	c
    4936/    5F5B : 13                  loc_5F60:	inc	de
    4937/    5F5C : 23                  		inc	hl
    4938/    5F5D : 0D                  		dec	c
    4939/    5F5E : 10 F4               		djnz	loc_5F59
    4940/    5F60 : C1                  		pop	bc
    4941/    5F61 : C3 61 5F            		jp	unk_BD4		; weiter im Monitor bei tbh6
    4942/    5F64 :                     
    4943/    5F64 :                     ;-------------------
    4944/    5F64 :                     ;SOUND X,Y Tonausgabe X= Tonlänge, Y= Tonhöhe
    4945/    5F64 : CA 64 5F            SOUND:		jp	z, unk_272	; beep, UP "akustisches Signal"
    4946/    5F67 : CD 88 53            		call	GETINT
    4947/    5F6A : F5                  		push	af
    4948/    5F6B : CD 7B 46            		call	CHKSYN
    4949/    5F6E : 2C                  		inc	l
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 84 - 2/19/2023 19:38:37


    4950/    5F6F : CD 88 53            		call	GETINT
    4951/    5F72 : D1                  		pop	de
    4952/    5F73 : 4F                  		ld	c, a
    4953/    5F74 : 14                  		inc	d
    4954/    5F75 : 0C                  		inc	c
    4955/    5F76 : 47                  		ld	b, a
    4956/    5F77 : FE 08               		cp	8
    4957/    5F79 : 3E 08               		ld	a, 8
    4958/    5F7B : 30 FE               		jr	nc, loc_5F83
    4959/    5F7D : 47                  		ld	b, a
    4960/    5F7E : CB 27               loc_5F83:	sla	a
    4961/    5F80 : CB 20               		sla	b
    4962/    5F82 : 30 FA               		jr	nc, loc_5F83
    4963/    5F84 : 5F                  		ld	e, a
    4964/    5F85 : CB 3B               		srl	e
    4965/    5F87 : CB 38               loc_5F8C:	srl	b
    4966/    5F89 : CB 23               		sla	e
    4967/    5F8B : 20 FA               		jr	nz, loc_5F8C
    4968/    5F8D : 90                  		sub	b
    4969/    5F8E : 42                  loc_5F93:	ld	b, d
    4970/    5F8F : CD 8F 5F            		call	unk_287	; UPTON, UP "Ton", Reg, B = Tonlaenge, C = Tonhoehe
    4971/    5F92 : 42                  		ld	b, d
    4972/    5F93 : CD 93 5F            		call	unk_287	; UPTON, UP "Ton", Reg, B = Tonlaenge, C = Tonhoehe
    4973/    5F96 : 3D                  		dec	a
    4974/    5F97 : 20 F5               		jr	nz, loc_5F93
    4975/    5F99 : C9                  		ret
    4976/    5F9A :                     
    4977/    5F9A :                     ;-------------------
    4978/    5F9A :                     ;MODE Wechselt Zeichensatz ZG (GRAFIK-AC1)
    4979/    5F9A :                     ; MODE 0 Zeichensatz 1 Grafikmodus 
    4980/    5F9A :                     ; 	Befehle wirken auf Hardwareerweiterung
    4981/    5F9A :                     ; 	4/8K ZG, ohne Erweiterung ist ständig
    4982/    5F9A :                     ; 	Grafikmodus, MODE und MODE 0 ohne Wirkung.
    4983/    5F9A :                     ; MODE 1 FAST-Modus des Basicinterpreter, Arbeitsgeschwindigkeit
    4984/    5F9A :                     ; 	des nachfolgenden Programm ca. doppelt
    4985/    5F9A :                     ; MODE 2 SLOW-Modus, normale Arbeitsgeschwindigkeit
    4986/    5F9A : 20 FE               MODE:		jr	nz, loc_5FA8	; folgt Parameter?
    4987/    5F9C :                     		; nein, dann Wechsel Zeichensatz
    4988/    5F9C : DB 05               		in	a, (5)
    4989/    5F9E : EE 08               		xor	8
    4990/    5FA0 : D3 05               		out	(5), a
    4991/    5FA2 : C9                  		ret
    4992/    5FA3 :                     ;
    4993/    5FA3 : CD 88 53            loc_5FA8:	call	GETINT		; Parameter
    4994/    5FA6 : A7                  		and	a
    4995/    5FA7 : 28 FE               		jr	z, loc_5FD9	; mode 0
    4996/    5FA9 :                     		; mode 1
    4997/    5FA9 : 32 09 60            		ld	(byte_6009), a	; fastmode=1/2
    4998/    5FAC : C9                  		ret
    4999/    5FAD :                     
    5000/    5FAD :                     ;-------------------
    5001/    5FAD :                     ;CLS Löscht Bildschirm
    5002/    5FAD : 3E 0C               CLS:		ld	a, 0Ch
    5003/    5FAF :                     ;
    5004/    5FAF : E5                  MONOUT:		push	hl
    5005/    5FB0 : 21 B0 5F            		ld	hl, kdov24
    5006/    5FB3 : CB FE               		set	7, (hl)		; 8 bit mode
    5007/    5FB5 : D7                  		rst	10h		; outch
    5008/    5FB6 : CB BE               		res	7, (hl)		; 7 bit mode
    5009/    5FB8 : E1                  		pop	hl
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 85 - 2/19/2023 19:38:37


    5010/    5FB9 : C9                  		ret
    5011/    5FBA :                     
    5012/    5FBA :                     ; UP zu TSTBRK
    5013/    5FBA : 3A 09 60            sub_5FBF:	ld	a, (byte_6009)	; fastmode
    5014/    5FBD : 3D                  		dec	a		; =1?
    5015/    5FBE : C8                  		ret	z		; dann raus
    5016/    5FBF :                     					; sonst Test auf Taste
    5017/    5FBF : C3 BF 5F            sub_5FC4:	jp	unk_297	; UPTAST, UP "Taste", testet Tastaturtatus
    5018/    5FC2 :                     
    5019/    5FC2 :                     
    5020/    5FC2 :                     ;-------------------
    5021/    5FC2 : =>TRUE              	if basver=0 
    5022/    5FC2 :                     
    5023/    5FC2 : FF                  		db 0FFh
    5024/    5FC3 :                     
    5025/    5FC3 :                     ;Start des Basic-Interpreters V. 3.2
    5026/    5FC3 : 00 09 62 0D         		db 0,9,'b',0Dh
    5027/    5FC7 : 21 00 40            		ld	hl, COLD
    5028/    5FCA : 18 FE               		jr	loc_5FD8
    5029/    5FCC :                     ;
    5030/    5FCC :                     ; Start des Basicinterpreter V.3.2 (warm)
    5031/    5FCC : 00 09 72 0D         		db 0,9,'r',0Dh
    5032/    5FD0 :                     		
    5033/    5FD0 : =>FALSE             	else
    5034/    5FD0 :                     ; patches für Modul-1 Paket X V.2
    5035/    5FD0 :                     loc_5FC7:	LD      HL, COLD
    5036/    5FD0 :                     		JR      loc_5FD8
    5037/    5FD0 :                     		;
    5038/    5FD0 :                     		JR      loc_5FC7
    5039/    5FD0 :                     		;
    5040/    5FD0 :                     loc_5FCE:	LD      BC,RUNCNT
    5041/    5FD0 :                     		PUSH    BC
    5042/    5FD0 :                     		JP      RUNFST
    5043/    5FD0 :                     
    5044/    5FD0 : [5021]              	endif
    5045/    5FD0 :                     		
    5046/    5FD0 : 21 00 60            		ld	hl, WRKSPC
    5047/    5FD3 : E5                  loc_5FD8:	push	hl
    5048/    5FD4 : DB 05               loc_5FD9:	in	a, (5)
    5049/    5FD6 : CB DF               		set	3, a		; setze Bildschim-Mode/Zeichensatz
    5050/    5FD8 : D3 05               		out	(5), a
    5051/    5FDA : C9                  		ret
    5052/    5FDB :                     
    5053/    5FDB :                     ; Funktionstasten
    5054/    5FDB : 00                  unk_5FE0:	db    0
    5055/    5FDC : 4C 49 53 54 0D 00   		db "LIST",0Dh,0
    5056/    5FE2 : 52 55 4E 0D 00      		db "RUN",0Dh,0
    5057/    5FE7 : 43 4C 4F 41 44 22   		db "CLOAD\" \"",0Dh,0
                    20 22 0D 00       
    5058/    5FF1 : 43 53 41 56 45 00   		db "CSAVE",0
    5059/    5FF7 :                     
    5060/    5FF7 :                     ;------------------------------------------------------------------------------
    5061/    5FF7 :                     ; AC1-SCCH-Monitor
    5062/    5FF7 :                     ;------------------------------------------------------------------------------
    5063/    5FF7 :                     
    5064/    5FF7 : =1821H              IOBYT:		equ 1821h
    5065/    5FF7 : =1800H              cupos:		equ 1800h
    5066/    5FF7 : =1820H              kdov24:		equ 1820h
    5067/    5FF7 :                     
    5068/    5FF7 : =1818H              unk_1818:	equ 1818h			; nmi-sprungadr
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 86 - 2/19/2023 19:38:37


    5069/    5FF7 : =187EH              unk_187E:	equ 187Eh			; tbb_eadr
    5070/    5FF7 : =1880H              unk_1880:	equ 1880h			; tbb_aadr
    5071/    5FF7 : =1896H              unk_1896:	equ 1896h			; tb_kopfbuf
    5072/    5FF7 : =189EH              unk_189E:	equ 189Eh		  	; tbh_filename
    5073/    5FF7 : =18B1H              unk_18B1:	equ 18B1h			; tbh_eadr
    5074/    5FF7 : =18B3H              unk_18B3:	equ 18B3h			; tbh_aadr
    5075/    5FF7 : =18B6H              unk_18B6:	equ 18B6h			; tb_blkbuf
    5076/    5FF7 : =18BEH              unk_18BE:	equ 18BEh			; tbl_filename
    5077/    5FF7 : =18D1H              unk_18D1:	equ 18D1h			; tbl_eadr
    5078/    5FF7 : =18D3H              unk_18D3:	equ 18D3h			; tbl_aadr
    5079/    5FF7 : =18D5H              unk_18D5:	equ 18D5h			; tbl_special
    5080/    5FF7 :                     
    5081/    5FF7 : =1F80H              unk_1F80:	equ 1F80h			; Funktionstasten
    5082/    5FF7 :                     
    5083/    5FF7 :                     ;Direktaufrufe in den Monitor
    5084/    5FF7 : =8H                 unk_8:		equ 8h				; inch
    5085/    5FF7 : =71H                unk_71:		equ 71h				; (BYE) sprung in Monitor, init8 ff
    5086/    5FF7 :                     						; Ausgabe Startmeldung. Besser wäre Adr 006E (init8)
    5087/    5FF7 : =183H               unk_183:	equ 0183h			; OUTHEX
    5088/    5FF7 : =272H               unk_272:	equ 0272h			; beep, UP "akustisches Signal"
    5089/    5FF7 : =287H               unk_287:	equ 0287h			; UPTON, UP "Ton", Reg, B = Tonlaenge, C = Tonhoehe
    5090/    5FF7 : =297H               unk_297:	equ 0297h			; UPTAST, UP "Taste", testet Tastaturtatus
    5091/    5FF7 : =0A31H              unk_A31:	equ 0A31h			; q_ko20, Start/Stop-Schaltung stop
    5092/    5FF7 : =0A37H              unk_A37:	equ 0A37h			; q_ko21, Start/Stop-Schaltung start
    5093/    5FF7 : =0BD4H              unk_BD4:	equ 0BD4h			; tbh6
    5094/    5FF7 : =0BF7H              unk_BF7:	equ 0BF7h			; tbsave
    5095/    5FF7 : =0C81H              unk_C81:	equ 0C81h			; tbload
    5096/    5FF7 :                     
    5097/    5FF7 :                     	end
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 87 - 2/19/2023 19:38:37


  Symbol Table (* = unused):
  --------------------------

 ABPASS :                      500A C | *ABS :                         5635 C |
*ACPASS :                      5009 C | *ADDEXP :                      55CE C |
*ADDIG :                       5767 C |  ADDPHL :                      53D6 C |
*ALLFOL :                      52C7 C |  ANTVLU :                      4BAB C |
*ARCHITECTURE :  i386-unknown-win32 - | *ARLDSV :                      4F36 C |
 ARREND :                      60D6 - |  ARRLP :                       5199 C |
*ASC :                         5299 C | *ASCTFP :                      5713 C |
*ASPCS :                       4B04 C | *ATN :                         5A5E C |
*ATN1 :                        5A7B C | *ATNTAB :                      5A85 C |
 ATOH :                        48F6 C | *AUTO :                        4600 C |
*AUTO1 :                       4616 C | *AUTO2 :                       461E C |
*AUTO3 :                       461F C |  BADINP :                      4B37 C |
 BAKSTK :                      4766 C | *BAKTMP :                      5279 C |
 BASTXT :                      605A - |  BASVER :                         0 - |
 BCDEFP :                      565C C | *BFREE :                       40C3 C |
*BIGENDIAN :                      0 - | *BKSP :                           8 - |
 BNORM :                       5434 C |  BNRMLP :                      5437 C |
*BRANCHEXT :                      0 - |  BRKLIN :                      60CA - |
 BRKMSG :                      4349 C |  BRKRET :                      405F C |
 BS :                            10 - |  BSERR :                       4F64 C |
 BUFFER :                      605D - |  BYTE_6009 :                   6009 - |
*BYTSFT :                      555A C | *CASESENSITIVE :                  0 - |
*CFEVAL :                      4ECF C | *CHARTY :                      4E83 C |
*CHEKFN :                      50A1 C |  CHKLTR :                      4686 C |
 CHKSTK :                      434F C |  CHKSYN :                      467B C |
 CHKTYP :                      4C83 C | *CHR :                         52AA C |
*CLEAR :                       491A C | *CLOAD :                       5E18 C |
*CLREG :                       4658 C | *CLRPTR :                      4633 C |
*CLS :                         5FAD C | *CMPFP :                       56A3 C |
*CMPLG1 :                      4DEE C | *CMPLOG :                      4DEC C |
 CMPNUM :                      5689 C | *CMPRES :                      4E2F C |
 CMPSTR :                      4E18 C |  CN :                            20 - |
*CNVNUM :                      571D C |  COLD :                        4000 C |
 COMMAN :                      6042 - |  COMPL :                       548E C |
*CONCAT :                      5210 C | *CONEXP :                      5747 C |
 CONPOS :                      5431 C | *CONSTPI :        3.141592653589793 - |
*CONT :                        48BD C |  CONTAD :                      60D0 - |
*CONVAR :                      4D57 C |  COS :                         59E2 C |
 COUNT :                       4744 C |  CPDEHL :                      4675 C |
*CPYLIT :                      4567 C |  CR :                            0D - |
 CRARLP :                      4F84 C | *CREARY :                      4F69 C |
*CRESTR :                      4A10 C |  CRNCLP :                      44D8 C |
 CRTMST :                      50DA C |  CRTST :                       50E6 C |
*CRTSTE :                      50F9 C | *CRUNCH :                      44CF C |
*CS :                            0C - | *CSAVE :                       5DD6 C |
 CTLOFG :                      6043 - | *CTRLC :                          3 - |
*CTRLG :                          7 - | *CTRLO :                         0F - |
*CTRLQ :                         11 - | *CTRLR :                         12 - |
*CTRLS :                         13 - | *CTRLU :                         15 - |
*CUPOS :                       1800 - |  CUROPR :                      60C1 - |
 CURPOS :                      60A7 - |  DATA :                        49BD C |
*DATE :                   2/19/2023 - |  DATFLG :                      60AA - |
 DATLIN :                      60C5 - |  DATSNR :                      436A C |
*DCBCDE :                      56DA C |  DD :                            12 - |
 DDERR :                       4379 C | *DEEK :                        53B1 C |
*DEF :                         501E C | *DEFSIZ :                      4F8B C |
 DEINT :                       48DC C |  DEPINT :                      48D6 C |
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 88 - 2/19/2023 19:38:37


*DETHL4 :                      566B C |  DETHLB :                      566D C |
 DIGTXT :                      580B C | *DIM :                         4E59 C |
 DIMRET :                      4E50 C | *DINPOS :                      46B4 C |
 DIV :                         556B C |  DIV1 :                        600C - |
 DIV10 :                       555F C |  DIV2 :                        6010 - |
 DIV3 :                        6014 - |  DIV4 :                        6017 - |
 DIVLP :                       5592 C |  DIVSUP :                      600B - |
 DOAGN :                       4671 C | *DOCOM :                       4ADA C |
*DOEBIT :                      5847 C | *DOFN :                        504B C |
*DOKE :                        53BC C | *DONULL :                      4AC8 C |
*DOSPC :                       4B00 C | *DOTAB :                       4AEE C |
*DPOINT :                      5744 C | *DTSTR :                       50EA C |
 DVBCDE :                      556D C |  DZ :                            14 - |
 DZERR :                       4373 C | *EDIGIT :                      5788 C |
*ENDBUF :                      456D C | *ENDCON :                      5756 C |
*ENDDIM :                      4FE5 C | *ENDINP :                      4ABA C |
 ENDNAM :                      4E79 C | *ENDPRG :                      489A C |
 ENFMEM :                      4358 C |  ERRIN :                       43A4 C |
 ERRLIN :                      60CE - |  ERRMSG :                      4338 C |
 ERROR :                       4384 C |  ERRORS :                      4312 C |
*ESC :                           1B - |  EVAL :                        4C97 C |
 EVAL1 :                       4C9A C |  EVAL2 :                       4CA3 C |
 EVAL3 :                       4CA6 C |  EVLPAR :                      4D3E C |
*EVNOT :                       4E39 C | *EXCUTE :                      4831 C |
*EXP :                         58DF C |  EXPLP :                       5738 C |
*EXPTAB :                      591F C |  EXPTEN :                      5858 C |
*EXTIG :                       4C02 C | *FALSE :                          0 - |
*FANDT :                       4C2A C |  FC :                             8 - |
 FCERR :                       48F1 C |  FDTLP :                       4C12 C |
*FINDEL :                      4FC3 C | *FLGDIF :                      561B C |
 FLGREL :                      5622 C |  FNARG :                       60DC - |
 FNCTAB :                      42C9 C |  FNDARY :                      4F3C C |
 FNDELP :                      4FC8 C |  FNDEND :                      4496 C |
*FNDNUM :                      5385 C |  FNDVAR :                      4EBA C |
*FNDWRD :                      44FD C | *FNOFST :                      4D68 C |
 FNRGNM :                      60DA - | *FNTHR :                       4EC6 C |
*FNVAL :                       4D92 C | *FOPRND :                      4CCC C |
*FOR :                         4787 C |  FORFLG :                      60C7 - |
*FORFND :                      47B5 C |  FORSLP :                      479B C |
 FPADD :                       53E4 C |  FPBCDE :                      5651 C |
 FPEXP :                       60E3 - |  FPINT :                       56B6 C |
 FPMULT :                      5512 C |  FPREG :                       60E0 - |
 FPROND :                      5475 C |  FPSINT :                      48D0 C |
 FPTHL :                       5668 C | *FRE :                         4FE9 C |
*FRENUM :                      5004 C |  FRMEVL :                      4D5A C |
*FULLPMMU :                       1 - | *GARBGE :                      5166 C |
 GARBLP :                      5169 C |  GETCHR :                      485C C |
 GETCMD :                      43C9 C | *GETCMD1 :                     43E7 C |
 GETCMD2 :                     43F0 C | *GETCMD3 :                     43F6 C |
*GETCMD4 :                     440F C | *GETCMD5 :                     4424 C |
 GETINT :                      5388 C |  GETLEN :                      528E C |
 GETLN :                       48F7 C |  GETNUM :                      4C7E C |
 GETNXT :                      4516 C |  GETSTR :                      5259 C |
 GETVAR :                      4E5E C |  GNXARY :                      5198 C |
*GOFUNC :                      4D9A C | *GOSUB :                       496A C |
 GOTO :                        497B C |  GRBARY :                      51B6 C |
 GRBDON :                      513F C |  GRBLP :                       5177 C |
*GSTRCU :                      525C C |  GSTRDE :                      5260 C |
*GSTRHL :                      525F C | *GTFLNM :                      529D C |
 GTFNAM :                      4E63 C |  GTLNLP :                      48FA C |
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 89 - 2/19/2023 19:38:37


 GTSIXD :                      57D7 C | *GTVLUS :                      4B85 C |
 HALF :                        5876 C |  HALFPI :                      5A2C C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 ID :                            16 - |  IDTEST :                      5093 C |
*IF :                          4A44 C | *IFGO :                        4A51 C |
 IFJMP :                       4838 C |  INCHL :                       5666 C |
*INCLEN :                      46B0 C | *INDFND :                      477F C |
*INEWLN :                      4459 C | *INEXTMODE :                      0 - |
*INITAB :                      40D2 C | *INITBE :                      412E C |
*INKEY :                       5CDC C | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - |  INMSG :                       433F C |
*INP :                         5346 C | *INPBIN :                      4BD2 C |
 INPBRK :                      4897 C | *INPUT :                       4B48 C |
*INRNG :                       57E0 C | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  INT :                         56E1 C |
 INTVAR :                      4642 C |  INVSGN :                      5639 C |
*IOBYT :                       1821 - | *ITMSEP :                      4BC3 C |
*JSTZER :                      5861 C | *KDOV24 :                      1820 - |
*KEY :                         5D09 C | *KILFOR :                      4C6E C |
 LCRFLG :                      60A8 - | *LEFT :                        52BA C |
*LEN :                         528A C | *LET :                         49D2 C |
*LETNUM :                      4A21 C |  LETSTR :                      49EC C |
*LF :                            0A - | *LFRGNM :                      533C C |
 LINEAT :                      6058 - | *LINEIN :                      5793 C |
*LINES :                       46D2 C |  LINESC :                      6044 - |
 LINESN :                      6046 - | *LINFND :                      4444 C |
*LIST :                        46E1 C |  LISTLP :                      46ED C |
*LISTON :                         1 - |  LOADFP :                      565F C |
*LOCATE :                      5D2D C |  LOC_457E :                    457E C |
*LOC_4589 :                    4589 C |  LOC_458C :                    458C C |
 LOC_459E :                    459E C | *LOC_45A8 :                    45A8 C |
 LOC_45AB :                    45AB C |  LOC_45BA :                    45BA C |
*LOC_45CB :                    45CB C | *LOC_45CF :                    45CF C |
*LOC_45D5 :                    45D5 C | *LOC_45DF :                    45DF C |
 LOC_45E6 :                    45E6 C |  LOC_45ED :                    45ED C |
 LOC_45F7 :                    45F7 C | *LOC_45FA :                    45FA C |
*LOC_462D :                    462D C | *LOC_469E :                    469E C |
 LOC_470C :                    470C C |  LOC_470F :                    470F C |
 LOC_4724 :                    4724 C |  LOC_472B :                    472B C |
 LOC_473C :                    473C C | *LOC_4741 :                    4741 C |
*LOC_4830 :                    4830 C | *LOC_484E :                    484E C |
 LOC_5372 :                    5372 C | *LOC_5AB5 :                    5AB5 C |
*LOC_5ABC :                    5ABC C |  LOC_5AC4 :                    5AC4 C |
*LOC_5AD5 :                    5AD5 C | *LOC_5AE4 :                    5AE4 C |
 LOC_5B0E :                    5B0E C |  LOC_5B2B :                    5B2B C |
 LOC_5B33 :                    5B33 C | *LOC_5B4A :                    5B4A C |
*LOC_5B4E :                    5B4E C |  LOC_5B58 :                    5B58 C |
 LOC_5B5E :                    5B5E C | *LOC_5B67 :                    5B67 C |
 LOC_5B73 :                    5B73 C |  LOC_5BB6 :                    5BB6 C |
 LOC_5BE7 :                    5BE7 C |  LOC_5BF3 :                    5BF3 C |
 LOC_5BF4 :                    5BF4 C | *LOC_5C08 :                    5C08 C |
*LOC_5C16 :                    5C16 C |  LOC_5C23 :                    5C23 C |
 LOC_5C4B :                    5C4B C | *LOC_5C64 :                    5C64 C |
*LOC_5C67 :                    5C67 C |  LOC_5C72 :                    5C72 C |
*LOC_5C86 :                    5C86 C |  LOC_5C97 :                    5C97 C |
*LOC_5CAA :                    5CAA C |  LOC_5CB2 :                    5CB2 C |
 LOC_5CC5 :                    5CC5 C | *LOC_5CFD :                    5CFD C |
*LOC_5CFF :                    5CFF C |  LOC_5D11 :                    5D11 C |
 LOC_5D1A :                    5D1A C | *LOC_5D22 :                    5D22 C |
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 90 - 2/19/2023 19:38:37


 LOC_5D43 :                    5D43 C |  LOC_5D4B :                    5D4B C |
 LOC_5D5C :                    5D5C C | *LOC_5D8E :                    5D90 C |
*LOC_5D9D :                    5D9F C | *LOC_5DAB :                    5DAD C |
 LOC_5DB5 :                    5DB7 C | *LOC_5DB8 :                    5DBA C |
*LOC_5DBB :                    5DBD C | *LOC_5DCF :                    5DD1 C |
 LOC_5DEB :                    5DED C | *LOC_5DEF :                    5DF1 C |
*LOC_5E48 :                    5E4A C |  LOC_5E4B :                    5E4D C |
*LOC_5E4D :                    5E4F C |  LOC_5E8F :                    5E8F C |
 LOC_5E9A :                    5E9A C |  LOC_5EA4 :                    5EA4 C |
*LOC_5EAC :                    5EAC C | *LOC_5EB8 :                    5EB8 C |
*LOC_5ED3 :                    5ED2 C |  LOC_5F51 :                    5F4C C |
 LOC_5F59 :                    5F54 C | *LOC_5F60 :                    5F5B C |
 LOC_5F83 :                    5F7E C |  LOC_5F8C :                    5F87 C |
 LOC_5F93 :                    5F8E C | *LOC_5FA8 :                    5FA3 C |
*LOC_5FD8 :                    5FD3 C | *LOC_5FD9 :                    5FD4 C |
 LOG :                         54D1 C |  LOGTAB :                      54C4 C |
 LOKFOR :                      476A C |  LOOPST :                      60C3 - |
 LS :                            1C - |  LSTBIN :                      60C8 - |
 LSTRAM :                      60AB - |  LSTRND :                      603C - |
*LTSTND :                      4BDD C |  LWIDTH :                      6041 - |
*MACEXP :                         7 - | *MAKINT :                      538B C |
*MAKNUM :                      57FB C |  MANLP :                       5725 C |
*MATCH :                       4543 C | *MEMMSG :                      4065 C |
*MID :                         52F2 C |  MID1 :                        52C0 C |
*MIDNUM :                      5341 C | *MINCDE :                      5423 C |
*MINUS :                       4D46 C |  MKTMST :                      50D7 C |
 MLDBLP :                      5702 C | *MLDEBC :                      56FA C |
 MLOOP :                       4030 C |  MLSP10 :                      55F9 C |
 MO :                            19 - | *MODE :                        5F9A C |
*MOMCPU :                      80DC - | *MOMCPUNAME :              Z80UNDOC - |
*MONOUT :                      5FAF C | *MORDT :                       4BE8 C |
 MOVBUF :                      4478 C |  MOVDIR :                      454B C |
 MOVLP :                       44A6 C |  MOVSTR :                      44A3 C |
 MOVUP :                       44A0 C |  MRPRNT :                      4A63 C |
*MSIZ1 :                       402D C |  MUL8LP :                      553C C |
 MULLN2 :                      5509 C |  MULT :                        5510 C |
*MULT8 :                       5534 C |  MULTEN :                      5760 C |
 MULVAL :                      60F2 - | *MVSTPT :                      4A18 C |
 NEDMOR :                      4B81 C |  NEGAFT :                      588C C |
*NESTMAX :                      100 - | *NEW :                         4632 C |
*NEXITM :                      4B0D C | *NEXT :                        4C34 C |
 NEXT1 :                       4C37 C |  NF :                             0 - |
 NFERR :                       4376 C | *NOCHNG :                      453D C |
*NOENED :                      5864 C | *NOLIN :                       48AC C |
*NOMADD :                      554C C | *NOMLAD :                      570F C |
*NOPMPT :                      4B61 C |  NORMAL :                      544C C |
*NOSPC :                       4535 C | *NOSWAP :                      53FD C |
*NOTSTR :                      4E91 C | *NOXOR :                       536D C |
*NSCFOR :                      4EA0 C | *NULL :                        4B1C C |
 NULLP :                       4AD0 C |  NULLS :                       6040 - |
 NUMASC :                      57A6 C | *NXTARY :                      4F4D C |
 NXTBYT :                      4525 C |  NXTCHR :                      4560 C |
 NXTDAT :                      60D8 - |  NXTDTA :                      49BC C |
*NXTITM :                      4B7A C |  NXTOPR :                      60CC - |
 NXTSTL :                      49C3 C |  NXTSTT :                      49C6 C |
 OD :                             6 - |  OKMSG :                       4344 C |
 OM :                            0C - |  OMERR :                       4366 C |
*ON :                          4A28 C | *ONGO :                        4A36 C |
 ONGOLP :                      4A37 C |  ONJMP :                       4839 C |
 OPNPAR :                      4C93 C |  OPRND :                       4D0A C |
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 91 - 2/19/2023 19:38:37


 OS :                            1A - |  OTPORT :                      6006 - |
 OUTC :                        468E C | *OUTEXP :                      5856 C |
 OV :                            0A - |  OVERR :                       437F C |
 OVTST1 :                      55EC C | *OVTST2 :                      55F1 C |
*OVTST3 :                      55F2 C | *PACKING :                        0 - |
*PADD :                        5783 C | *PADDING :                        1 - |
*PAND :                        4DB4 C |  PASSA :                       5019 C |
 PBUFF :                       60E5 - | *PCALL :                       5AAA C |
*PEEK :                        5399 C | *PEND :                        4892 C |
 PHLTFP :                      564E C |  PLUCDE :                      5482 C |
*PNORM :                       5452 C | *POINT :                       5D64 C |
*POINT0 :                      5D72 C | *POKE :                        53A0 C |
*POPAF :                       46B8 C | *POPHL :                       5277 C |
 POPHRT :                      5558 C |  POPNOK :                      43BA C |
*POR :                         4DB3 C | *POR1 :                        4DD5 C |
*POS :                         5016 C |  POSINT :                      48D3 C |
*POUT :                        534F C | *POWER :                       589A C |
*POWER1 :                      58AA C | *POWER2 :                      58C7 C |
*POWERS :                      587A C | *PRESET :                      5D67 C |
*PRINT :                       4A69 C |  PRITAB :                      42FD C |
 PRNTCRLF :                    4ABF C | *PRNTHL :                      579B C |
 PRNTLP :                      4A6B C | *PRNTNB :                      4AA9 C |
 PRNTOK :                      43BB C | *PRNTST :                      4AAD C |
 PRNUMS :                      5124 C |  PROGND :                      60D2 - |
 PROGST :                      60F6 - |  PROMPT :                      46C7 C |
 PRS :                         5125 C | *PRS1 :                        5128 C |
 PRSLP :                       512F C | *PSET :                        5D62 C |
*PSUB :                        53DF C |  PTRLP :                       4488 C |
 PUTFID :                      47F9 C |  QTSTLP :                      50ED C |
*QTSTR :                       50E7 C | *QUARTR :                      5A30 C |
*READ :                        4B75 C |  READFG :                      60C9 - |
 REDO :                        4B25 C | *RELAXED :                        0 - |
 REM :                         49BF C | *RENUM :                       5AF0 C |
*RESDIV :                      55A4 C | *RESEED :                      59CF C |
*RESTNL :                      487F C | *RESTOR :                      486B C |
 RESZER :                      5447 C | *RETADR :                      4F01 C |
 RETINT :                      5627 C | *RETLIN :                      49B7 C |
*RETNAD :                      4547 C | *RETNUL :                      4F04 C |
 RETNUM :                      4D52 C |  RETREL :                      5619 C |
*RETURN :                      4999 C |  RG :                             4 - |
*RIGHT :                       52E9 C |  RIGHT1 :                      52BE C |
 RINPUT :                      604A - |  RLTLP :                       4CB3 C |
*RND :                         596F C |  RND1 :                        59AB C |
*RND2 :                        59C6 C | *RNDTAB :                      59D6 C |
*RNGTST :                      5867 C |  RONDB :                       5464 C |
*RONDUP :                      5463 C |  ROUND :                       53D3 C |
*RSCALE :                      577D C | *RSTSTR :                      530A C |
*RUN :                         495F C |  RUNCNT :                      47FD C |
 RUNFST :                      463E C | *RUNLIN :                      497A C |
 SAVEXP :                      5448 C | *SAVSTP :                      47F0 C |
*SAVSTR :                      50C2 C | *SBSCPT :                      4F0F C |
 SCALE :                       54A2 C |  SCALLP :                      54A4 C |
 SCALMI :                      574A C | *SCALPL :                      575F C |
*SCNEND :                      51EB C |  SCPTLP :                      4F15 C |
 SEARCH :                      4514 C |  SEED :                        6019 - |
*SETIO :                       5379 C |  SETLIN :                      4733 C |
*SETLIT :                      4557 C |  SETPTR :                      447F C |
*SETTOP :                      403F C |  SFTPRG :                      444B C |
*SGN :                         561F C |  SGNEXP :                      4DA3 C |
 SGNRES :                      60E4 - | *SHRITE :                      54AF C |
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 92 - 2/19/2023 19:38:37


 SHRLP :                       54B2 C | *SHRT1 :                       54B6 C |
 SIGNS :                       5674 C |  SIN :                         59E8 C |
*SIN1 :                        5A18 C | *SINTAB :                      5A34 C |
 SIXDIG :                      57C3 C |  SMPVAR :                      5186 C |
*SMSER1 :                      594F C |  SN :                             2 - |
 SNERR :                       4370 C | *SOUND :                       5F64 C |
*SPCFST :                      57B4 C |  SPCLP :                       4B08 C |
*SQR :                         5891 C |  SRCHLN :                      44B0 C |
 SRCHLP :                      44B3 C | *SSTSA :                       5247 C |
 ST :                            1E - |  STACK :                       6062 - |
 STAKFP :                      5641 C |  STKTHS :                      4CF4 C |
 STLOOK :                      615B - | *STOP :                        4890 C |
*STORED :                      493C C | *STPOOL :                      51C2 C |
*STR :                         50B2 C | *STR1 :                        50B8 C |
*STRADD :                      51C5 C |  STRBOT :                      60BF - |
*STRENT :                      4BC6 C |  STRSPC :                      6056 - |
*STTLIN :                      4AB3 C |  SUBCDE :                      53E1 C |
 SUBPHL :                      53DB C |  SUB_46BB :                    46BB C |
 SUB_46CD :                    46CD C | *SUB_5ABE :                    5ABE C |
*SUB_5C38 :                    5C38 C | *SUB_5C6A :                    5C6A C |
*SUB_5CCF :                    5CCF C | *SUB_5E70 :                    5E72 C |
 SUB_5EC6 :                    5EC6 C |  SUB_5ECB :                    5ECB C |
*SUB_5EEA :                    5EE9 C | *SUB_5F00 :                    5EFF C |
*SUB_5F2C :                    5F27 C | *SUB_5F39 :                    5F34 C |
*SUB_5FBF :                    5FBA C | *SUB_5FC4 :                    5FBF C |
 SUMLP :                       5958 C |  SUMSER :                      5940 C |
 SUPTLZ :                      583C C | *SVNAM2 :                      4E78 C |
*SVSTAD :                      50E0 C | *TAN :                         5A49 C |
*TESTOS :                      515A C |  TESTR :                       513D C |
*TIME :                    19:38:37 - |  TM :                            18 - |
 TMERR :                       4382 C |  TMPSTR :                      60BB - |
 TMSTPL :                      60AF - |  TMSTPT :                      60AD - |
*TOPOOL :                      52B6 C |  TOSTRA :                      5250 C |
 TRFLAG :                      600A - | *TROFF :                       4761 C |
*TRON :                        4760 C | *TRUE :                           1 - |
 TRYAGN :                      581A C |  TSALP :                       5251 C |
*TSTBRK :                      4885 C |  TSTNUM :                      4C81 C |
 TSTOPL :                      5105 C | *TSTRED :                      4DDA C |
*TSTREM :                      455A C |  TSTSGN :                      5610 C |
 TSTSTR :                      4C82 C | *TTYLIN :                      4576 C |
 TYPE :                        60A9 - |  UF :                            22 - |
 UFERR :                       437C C |  UL :                            0E - |
*ULERR :                       4994 C |  UNITY :                       54C0 C |
*UNK_1818 :                    1818 - | *UNK_183 :                      183 - |
*UNK_187E :                    187E - | *UNK_1880 :                    1880 - |
*UNK_1896 :                    1896 - | *UNK_189E :                    189E - |
*UNK_18B1 :                    18B1 - | *UNK_18B3 :                    18B3 - |
*UNK_18B6 :                    18B6 - | *UNK_18BE :                    18BE - |
*UNK_18D1 :                    18D1 - | *UNK_18D3 :                    18D3 - |
*UNK_18D5 :                    18D5 - | *UNK_1F80 :                    1F80 - |
*UNK_272 :                      272 - | *UNK_287 :                      287 - |
*UNK_297 :                      297 - | *UNK_4577 :                    4577 C |
 UNK_4891 :                    4891 C | *UNK_5FE0 :                    5FDB C |
 UNK_604D :                    604D - |  UNK_604E :                    604E - |
 UNK_6050 :                    6050 - |  UNK_6052 :                    6052 - |
 UNK_6054 :                    6054 - |  UNK_60A6 :                    60A6 - |
*UNK_60DE :                    60DE - | *UNK_71 :                        71 - |
*UNK_8 :                          8 - | *UNK_A31 :                     0A31 - |
*UNK_A37 :                     0A37 - | *UNK_BD4 :                     0BD4 - |
*UNK_BF7 :                     0BF7 - | *UNK_C81 :                     0C81 - |
 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 93 - 2/19/2023 19:38:37


 UPDATA :                      4880 C |  USR :                         6003 - |
*VAL :                         5321 C |  VAREND :                      60D4 - |
*VERSION :                     142F - | *WAIT :                        535A C |
 WARMST :                      405C C | *WIDTH :                       4B14 C |
 WORDS :                       412E C |  WORDTB :                      426D C |
 WRKSPC :                      6000 - |  ZDATA :                         83 - |
*ZDIV :                         0AF - |  ZEND :                          80 - |
 ZEQUAL :                       0B4 - |  ZERARY :                      4FA8 C |
 ZERBYT :                      4343 - |  ZEROLP :                      4EF4 C |
 ZFN :                          0A7 - |  ZFOR :                          81 - |
 ZGOSUB :                        8C - |  ZGOTO :                         88 - |
 ZGTR :                         0B3 - | *ZLEFT :                        0CF - |
 ZLTH :                         0B5 - |  ZMINUS :                       0AD - |
 ZNEW :                         0A4 - |  ZNOT :                         0AA - |
 ZONELP :                      4AE7 C |  ZOR :                          0B2 - |
 ZPLUS :                        0AC - | *ZPOINT :                       0C7 - |
 ZPRINT :                        9E - |  ZREM :                          8E - |
 ZSGN :                         0B6 - |  ZSPC :                         0A8 - |
 ZSTEP :                        0AB - |  ZTAB :                         0A5 - |
 ZTHEN :                        0A9 - |  ZTIMES :                       0AE - |
 ZTO :                          0A6 - |

    755 symbols
    376 unused symbols

 AS V1.42 Beta [Bld 157] - Source File grafikbasic-v3-2.asm - Page 94 - 2/19/2023 19:38:37


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.03 seconds assembly time

   5103 lines source file
      1 pass
        Additional necessary passes not started due to
        errors, listing possibly incorrect.
      4 errors
      0 warnings
